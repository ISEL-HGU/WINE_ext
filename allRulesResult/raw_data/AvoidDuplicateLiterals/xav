21000,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/parser/BeamDDLTest.java,61,,"            + ""id int COMMENT 'id', \n"""
21001,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/parser/BeamDDLTest.java,62,,"            + ""name varchar COMMENT 'name') \n"""
21002,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/parser/BeamDDLTest.java,63,,"            + ""TYPE 'text' \n"""
21003,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/parser/BeamDDLTest.java,64,,"            + ""COMMENT 'person table' \n"""
21004,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/parser/BeamDDLTest.java,65,,"            + ""LOCATION '/home/admin/person'\n"""
21005,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/parser/BeamDDLTest.java,66,,"            + ""TBLPROPERTIES '{\""hello\"": [\""james\"", \""bond\""]}'"");"
21006,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/parser/BeamDDLTest.java,69,,"        mockTable(""person"", ""text"", ""person table"", properties),"
21007,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/parser/BeamDDLTest.java,69,,"        mockTable(""person"", ""text"", ""person table"", properties),"
21008,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamCoGBKJoinRelBoundedVsBoundedTest.java,43,,"              Schema.FieldType.INT32, ""order_id"","
21009,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamCoGBKJoinRelBoundedVsBoundedTest.java,44,,"              Schema.FieldType.INT32, ""site_id"","
21010,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamCoGBKJoinRelBoundedVsBoundedTest.java,45,,"              Schema.FieldType.INT32, ""price"")"
21011,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamCoGBKJoinRelBoundedVsBoundedTest.java,64,,"        ""SELECT *  """
21012,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamCoGBKJoinRelBoundedVsBoundedTest.java,65,,"            + ""FROM ORDER_DETAILS1 o1"""
21013,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamCoGBKJoinRelBoundedVsBoundedTest.java,66,,"            + "" JOIN ORDER_DETAILS2 o2"""
21014,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamCoGBKJoinRelBoundedVsBoundedTest.java,67,,"            + "" on """
21015,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamCoGBKJoinRelBoundedVsBoundedTest.java,68,,"            + "" o1.order_id=o2.site_id AND o2.price=o1.site_id"";"
21016,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamCoGBKJoinRelBoundedVsBoundedTest.java,78,,"                        .addField(""order_id0"", Schema.FieldType.INT32)"
21017,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamCoGBKJoinRelBoundedVsBoundedTest.java,79,,"                        .addField(""site_id0"", Schema.FieldType.INT32)"
21018,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamCoGBKJoinRelBoundedVsBoundedTest.java,80,,"                        .addField(""price0"", Schema.FieldType.INT32)"
21019,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamCoGBKJoinRelUnboundedVsUnboundedTest.java,52,,"                Schema.FieldType.INT32, ""order_id"","
21020,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamCoGBKJoinRelUnboundedVsUnboundedTest.java,86,,"        ""SELECT * FROM """
21021,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamCoGBKJoinRelUnboundedVsUnboundedTest.java,87,,"            + ""(select order_id, sum(site_id) as sum_site_id FROM ORDER_DETAILS """
21022,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamCoGBKJoinRelUnboundedVsUnboundedTest.java,91,,"            + ""          GROUP BY order_id, TUMBLE(order_time, INTERVAL '1' HOUR)) o2 """
21023,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamCoGBKJoinRelUnboundedVsUnboundedTest.java,92,,"            + "" on """
21024,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamCoGBKJoinRelUnboundedVsUnboundedTest.java,93,,"            + "" o1.order_id=o2.order_id"";"
21025,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamCoGBKJoinRelUnboundedVsUnboundedTest.java,100,,"                        .addField(""order_id1"", Schema.FieldType.INT32)"
21026,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamCoGBKJoinRelUnboundedVsUnboundedTest.java,101,,"                        .addField(""sum_site_id"", Schema.FieldType.INT32)"
21027,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamCoGBKJoinRelUnboundedVsUnboundedTest.java,103,,"                        .addField(""sum_site_id0"", Schema.FieldType.INT32)"
21028,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamIntersectRelTest.java,45,,"                Schema.FieldType.INT64, ""order_id"","
21029,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamIntersectRelTest.java,46,,"                Schema.FieldType.INT32, ""site_id"","
21030,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamIntersectRelTest.java,47,,"                Schema.FieldType.DECIMAL, ""price"")"
21031,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamIntersectRelTest.java,84,,"        ""SELECT order_id, site_id, price """
21032,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamMatchRelTest.java,44,,"            .addStringField(""name"")"
21033,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamMatchRelTest.java,45,,"            .addInt32Field(""proctime"")"
21034,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamMatchRelTest.java,49,,"        ""TestTable"", TestBoundedTable.of(schemaType).addRows(1, ""a"", 1, 1, ""b"", 2, 1, ""c"", 3));"
21035,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamMatchRelTest.java,52,,"        ""SELECT * """
21036,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamMatchRelTest.java,53,,"            + ""FROM TestTable """
21037,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamMatchRelTest.java,54,,"            + ""MATCH_RECOGNIZE ("""
21038,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamMatchRelTest.java,59,,"            + ""DEFINE """
21039,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamMinusRelTest.java,53,,"                Schema.FieldType.INT64, ""order_id"","
21040,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamMinusRelTest.java,54,,"                Schema.FieldType.INT32, ""site_id"","
21041,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamMinusRelTest.java,55,,"                Schema.FieldType.DECIMAL, ""price"")"
21042,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamMinusRelTest.java,128,,"        ""SELECT order_id, site_id, price """
21043,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamSetOperatorRelBaseTest.java,56,,"            + "" order_id, site_id, count(*) as cnt """
21044,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamSetOperatorRelBaseTest.java,57,,"            + ""FROM ORDER_DETAILS GROUP BY order_id, site_id"""
21045,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamSideInputJoinRelTest.java,54,,"                Schema.FieldType.INT32, ""order_id"","
21046,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamSideInputJoinRelTest.java,55,,"                Schema.FieldType.STRING, ""buyer"")"
21047,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamSideInputJoinRelTest.java,57,,"                1, ""james"","
21048,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamSideInputJoinRelTest.java,58,,"                2, ""bond""));"
21049,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamSideInputJoinRelTest.java,102,,"        ""SELECT o1.order_id, o1.sum_site_id, o2.buyer FROM """
21050,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamSideInputJoinRelTest.java,103,,"            + ""(select order_id, sum(site_id) as sum_site_id FROM ORDER_DETAILS """
21051,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamSideInputJoinRelTest.java,104,,"            + ""          GROUP BY order_id, TUMBLE(order_time, INTERVAL '1' HOUR)) o1 """
21052,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamSideInputJoinRelTest.java,106,,"            + "" ORDER_DETAILS1 o2 """
21053,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamSideInputJoinRelTest.java,107,,"            + "" on """
21054,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamSideInputJoinRelTest.java,108,,"            + "" o1.order_id=o2.order_id"";"
21055,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamSideInputJoinRelTest.java,115,,"                    Schema.FieldType.INT32, ""sum_site_id"","
21056,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamSideInputLookupJoinRelTest.java,75,,"        return Arrays.asList(Row.withSchema(getSchema()).addValues(2, ""SITE1"").build());"
21057,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamSideInputLookupJoinRelTest.java,98,,"                ""site_name"","
21058,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamSideInputLookupJoinRelTest.java,105,,"        ""SELECT o1.order_id, o2.site_name FROM """
21059,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamSideInputLookupJoinRelTest.java,108,,"            + "" on """
21060,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamSideInputLookupJoinRelTest.java,109,,"            + "" o1.site_id=o2.site_id """
21061,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamSideInputLookupJoinRelTest.java,110,,"            + "" WHERE o1.site_id=2 "";"
21062,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamSideInputLookupJoinRelTest.java,115,,"                    Schema.FieldType.INT32, ""order_id"","
21063,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamSideInputLookupJoinRelTest.java,126,,"            + "" SITE_LKP o2 """
21064,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamSideInputLookupJoinRelTest.java,146,,"            + ""(select order_id, site_id FROM ORDER_DETAILS """
21065,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamSideInputLookupJoinRelTest.java,147,,"            + ""          GROUP BY order_id, site_id, TUMBLE(order_time, INTERVAL '1' HOUR)) o1 """
21066,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamSideInputLookupJoinRelTest.java,151,,"            + "" o1.site_id=o2.site_id"""
21067,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamSortRelTest.java,47,,"                Schema.FieldType.INT64, ""order_id"","
21068,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamSortRelTest.java,48,,"                Schema.FieldType.INT32, ""site_id"","
21069,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamSortRelTest.java,49,,"                Schema.FieldType.DOUBLE, ""price"","
21070,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamSortRelTest.java,110,,"        ""INSERT INTO SUB_ORDER_RAM(order_id, site_id, price)  SELECT """
21071,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamSortRelTest.java,111,,"            + "" order_id, site_id, price """
21072,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamSortRelTest.java,112,,"            + ""FROM ORDER_DETAILS """
21073,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamUnionRelTest.java,53,,"        ""SELECT """
21074,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamUnionRelTest.java,54,,"            + "" order_id, site_id, price """
21075,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamUnionRelTest.java,55,,"            + ""FROM ORDER_DETAILS """
21076,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rule/BeamAggregateProjectMergeRuleTest.java,47,,"          .addInt32Field(""unused1"")"
21077,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rule/BeamAggregateProjectMergeRuleTest.java,49,,"          .addStringField(""name"")"
21078,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rule/JoinReorderingTest.java,89,,"            .buildBeamSqlTable(tableProvider.getTable(""small_table""))"
21079,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rule/JoinReorderingTest.java,97,,"            .buildBeamSqlTable(tableProvider.getTable(""medium_table""))"
21080,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rule/JoinReorderingTest.java,105,,"            .buildBeamSqlTable(tableProvider.getTable(""large_table""))"
21081,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rule/JoinReorderingTest.java,210,,"                + "" JOIN small_table on medium_table.small_key = small_table.medium_key "");"
21082,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/rule/JoinReorderingTest.java,225,,"                + "" JOIN large_table on large_table.medium_key = medium_table.large_key """
21083,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/udf/BeamSalUhfSpecialTypeAndValueTest.java,52,,"    PCollection<Row> result = boundedInputFloatDouble.apply(""testUdf"", SqlTransform.query(sql));"
21084,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/udf/BeamSalUhfSpecialTypeAndValueTest.java,77,,"    Schema resultType = Schema.builder().addInt64Field(""field"").build();"
21085,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/udf/BeamSalUhfSpecialTypeAndValueTest.java,176,,"        Row.withSchema(resultType).addValues(DigestUtils.md5(""foobar"".getBytes(UTF_8))).build();"
21086,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/udf/BeamSalUhfSpecialTypeAndValueTest.java,181,,"            .addValues(DigestUtils.md5(""abcABCжщфЖЩФ"".getBytes(UTF_8)))"
21087,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/udf/BeamSqlUdfExpressionTest.java,128,,"            .addExpr(""FROM_HEX('666f6f626172')"", ""foobar"".getBytes(UTF_8))"
21088,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/utils/CalciteUtilsTest.java,75,,"            .addField(""f10"", Schema.FieldType.STRING)"
21089,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/CustomTableResolverTest.java,112,,"        Table.builder().name(""testtable"").schema(BASIC_SCHEMA).type(""test"").build());"
21090,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/CustomTableResolverTest.java,112,,"        Table.builder().name(""testtable"").schema(BASIC_SCHEMA).type(""test"").build());"
21091,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/CustomTableResolverTest.java,113,,"    tableProvider.addRows(""testtable"", row(1, ""one""), row(2, ""two""));"
21092,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/CustomTableResolverTest.java,113,,"    tableProvider.addRows(""testtable"", row(1, ""one""), row(2, ""two""));"
21093,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/CustomTableResolverTest.java,118,,"                .withDefaultTableProvider(""testprovider"", tableProvider));"
21094,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/CustomTableResolverTest.java,197,,"        Table.builder().name(""testtable2"").schema(BASIC_SCHEMA).type(""test"").build());"
21095,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/CustomTableResolverTest.java,198,,"    tableProvider2.addRows(""testtable2"", row(3, ""three""), row(4, ""four""));"
21096,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/CustomTableResolverTest.java,198,,"    tableProvider2.addRows(""testtable2"", row(3, ""three""), row(4, ""four""));"
21097,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/CustomTableResolverTest.java,203,,"                .withTableProvider(""testprovider2"", tableProvider2)"
21098,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/CustomTableResolverTest.java,238,,"        Table.builder().name(""testtable_blah"").schema(BASIC_SCHEMA).type(""test"").build());"
21099,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/CustomTableResolverTest.java,272,,"        Table.builder().name(""testtable_blah_foo_bar"").schema(BASIC_SCHEMA).type(""test"").build());"
21100,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/CustomTableResolverTest.java,380,,"    tableProvider.addRows(""testtable_blah_foo_bar"", row(3, ""customer""), row(2, ""nobody""));"
21101,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/CustomTableResolverTest.java,380,,"    tableProvider.addRows(""testtable_blah_foo_bar"", row(3, ""customer""), row(2, ""nobody""));"
21102,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/CustomTableResolverTest.java,384,,"        Table.builder().name(""testtable_blah_foo_bar2"").schema(BASIC_SCHEMA).type(""test"").build());"
21103,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/CustomTableResolverTest.java,391,,"                        + ""FROM \n"""
21104,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BigQueryReadWriteIT.java,85,,"          .addNullableField(""c_integer"", INT32)"
21105,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BigQueryReadWriteIT.java,90,,"          .addNullableField(""c_varchar"", STRING)"
21106,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BigQueryReadWriteIT.java,105,,"        ""CREATE EXTERNAL TABLE TEST( \n"""
21107,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BigQueryReadWriteIT.java,106,,"            + ""   c_bigint BIGINT, \n"""
21108,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BigQueryReadWriteIT.java,107,,"            + ""   c_tinyint TINYINT, \n"""
21109,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BigQueryReadWriteIT.java,108,,"            + ""   c_smallint SMALLINT, \n"""
21110,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BigQueryReadWriteIT.java,109,,"            + ""   c_integer INTEGER, \n"""
21111,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BigQueryReadWriteIT.java,110,,"            + ""   c_float FLOAT, \n"""
21112,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BigQueryReadWriteIT.java,111,,"            + ""   c_double DOUBLE, \n"""
21113,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BigQueryReadWriteIT.java,112,,"            + ""   c_boolean BOOLEAN, \n"""
21114,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BigQueryReadWriteIT.java,113,,"            + ""   c_timestamp TIMESTAMP, \n"""
21115,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BigQueryReadWriteIT.java,114,,"            + ""   c_varchar VARCHAR, \n """
21116,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BigQueryReadWriteIT.java,115,,"            + ""   c_char CHAR, \n"""
21117,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BigQueryReadWriteIT.java,116,,"            + ""   c_arr ARRAY<VARCHAR> \n"""
21118,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BigQueryReadWriteIT.java,117,,"            + "") \n"""
21119,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BigQueryReadWriteIT.java,118,,"            + ""TYPE 'bigquery' \n"""
21120,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BigQueryReadWriteIT.java,119,,"            + ""LOCATION '"""
21121,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BigQueryReadWriteIT.java,125,,"        ""INSERT INTO TEST VALUES ("""
21122,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BigQueryReadWriteIT.java,126,,"            + ""9223372036854775807, """
21123,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BigQueryReadWriteIT.java,127,,"            + ""127, """
21124,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BigQueryReadWriteIT.java,128,,"            + ""32767, """
21125,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BigQueryReadWriteIT.java,129,,"            + ""2147483647, """
21126,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BigQueryReadWriteIT.java,130,,"            + ""1.0, """
21127,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BigQueryReadWriteIT.java,132,,"            + ""TRUE, """
21128,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BigQueryReadWriteIT.java,133,,"            + ""TIMESTAMP '2018-05-28 20:17:40.123', """
21129,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BigQueryReadWriteIT.java,134,,"            + ""'varchar', """
21130,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BigQueryReadWriteIT.java,135,,"            + ""'char', """
21131,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BigQueryReadWriteIT.java,136,,"            + ""ARRAY['123', '456']"""
21132,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BigQueryReadWriteIT.java,156,,"                    parseTimestampWithUTCTimeZone(""2018-05-28 20:17:40.123""),"
21133,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BigQueryReadWriteIT.java,157,,"                    ""varchar"","
21134,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BigQueryReadWriteIT.java,158,,"                    ""char"","
21135,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BigQueryReadWriteIT.java,159,,"                    Arrays.asList(""123"", ""456""))));"
21136,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BigQueryReadWriteIT.java,159,,"                    Arrays.asList(""123"", ""456""))));"
21137,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BigQueryReadWriteIT.java,200,,"            + ""TBLPROPERTIES """
21138,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BigQueryReadWriteIT.java,201,,"            + ""'{ """
21139,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BigQueryReadWriteIT.java,203,,"            + "": \"""""
21140,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BigQueryReadWriteIT.java,205,,"            + ""\"" }'"";"
21141,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BigQueryReadWriteIT.java,208,,"    String selectTableStatement = ""SELECT * FROM TEST"";"
21142,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BigQueryReadWriteIT.java,486,,"            + ""' \n"""
21143,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BigQueryRowCountIT.java,51,,"      Schema.builder().addNullableField(""id"", INT64).addNullableField(""name"", STRING).build();"
21144,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BigQueryRowCountIT.java,61,,"    Table table = getTable(""testTable"", bigQuery.tableSpec());"
21145,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BigQueryTableProviderTest.java,48,,"    Table table = fakeTable(""hello"");"
21146,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BigQueryTableProviderTest.java,70,,"            ""hello"", ""{ "" + METHOD_PROPERTY + "": "" + ""\"""" + Method.DEFAULT.toString() + ""\"" }"");"
21147,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigtable/BigtableTableCreationFailuresTest.java,54,,"        ""CREATE EXTERNAL TABLE fail(key VARCHAR, something VARCHAR) \n"" + ""TYPE bigtable \n"";"
21148,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigtable/BigtableTableCreationFailuresTest.java,56,,"    Table table = metaStore.getTables().get(""fail"");"
21149,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigtable/BigtableTableCreationFailuresTest.java,68,,"            + ""LOCATION '"""
21150,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/datastore/DataStoreReadWriteIT.java,66,,"          .addNullableField(""__key__"", VARBINARY)"
21151,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/kafka/KafkaTableProviderTest.java,47,,"    Table table = mockTable(""hello"");"
21152,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/kafka/NestedPayloadKafkaTableTest.java,96,,"                        Schemas.PAYLOAD_FIELD, Schema.builder().addStringField(""abc"").build())"
21153,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/kafka/NestedPayloadKafkaTableTest.java,244,,"                            ""key1"","
21154,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/kafka/NestedPayloadKafkaTableTest.java,247,,"                        .attachValues(""key2"", ImmutableList.of(""attr3"".getBytes(UTF_8)))))"
21155,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/kafka/NestedPayloadKafkaTableTest.java,247,,"                        .attachValues(""key2"", ImmutableList.of(""attr3"".getBytes(UTF_8)))))"
21156,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/mongodb/MongoDbReadWriteIT.java,87,,"          .addNullableField(""c_integer"", INT32)"
21157,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/mongodb/MongoDbReadWriteIT.java,90,,"          .addNullableField(""c_boolean"", BOOLEAN)"
21158,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/mongodb/MongoDbReadWriteIT.java,91,,"          .addNullableField(""c_varchar"", STRING)"
21159,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/mongodb/MongoDbReadWriteIT.java,169,,"            ""varchar"","
21160,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/mongodb/MongoDbReadWriteIT.java,196,,"            + ""1.0, """
21161,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/mongodb/MongoDbTableProviderTest.java,46,,"    Table table = fakeTable(""TEST"", ""mongodb://localhost:27017/database/collection"");"
21162,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/mongodb/MongoDbTableTest.java,52,,"          .addNullableField(""int32"", INT32)"
21163,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/parquet/ParquetTableProviderTest.java,77,,"            Row.withSchema(TABLE_SCHEMA).addValues(""John"", 42L, ""USA"").build());"
21164,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/pubsub/PubsubTableProviderIT.java,99,,"          .addNullableField(""name"", Schema.FieldType.STRING)"
21165,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/pubsub/PubsubTableProviderIT.java,138,,"            ""CREATE EXTERNAL TABLE message (\n"""
21166,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/pubsub/PubsubTableProviderIT.java,139,,"                + ""event_timestamp TIMESTAMP, \n"""
21167,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/pubsub/PubsubTableProviderIT.java,140,,"                + ""attributes MAP<VARCHAR, VARCHAR>, \n"""
21168,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/pubsub/PubsubTableProviderIT.java,141,,"                + ""payload ROW< \n"""
21169,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/pubsub/PubsubTableProviderIT.java,142,,"                + ""             id INTEGER, \n"""
21170,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/pubsub/PubsubTableProviderIT.java,143,,"                + ""             name VARCHAR \n"""
21171,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/pubsub/PubsubTableProviderIT.java,144,,"                + ""           > \n"""
21172,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/pubsub/PubsubTableProviderIT.java,145,,"                + "") \n"""
21173,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/pubsub/PubsubTableProviderIT.java,146,,"                + ""TYPE '%s' \n"""
21174,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/pubsub/PubsubTableProviderIT.java,147,,"                + ""LOCATION '%s' \n"""
21175,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/pubsub/PubsubTableProviderIT.java,168,,"        ""waitForSuccess"","
21176,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/pubsub/PubsubTableProviderIT.java,174,,"                        row(PAYLOAD_SCHEMA, 3, ""foo""),"
21177,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/pubsub/PubsubTableProviderIT.java,175,,"                        row(PAYLOAD_SCHEMA, 5, ""bar""),"
21178,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/pubsub/PubsubTableProviderIT.java,176,,"                        row(PAYLOAD_SCHEMA, 7, ""baz"")))));"
21179,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/pubsub/PubsubTableProviderIT.java,330,,"  @SuppressWarnings(""unchecked"")"
21180,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/pubsub/PubsubTableProviderIT.java,345,,"                + ""TBLPROPERTIES """
21181,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/pubsub/PubsubTableProviderIT.java,346,,"                + ""    '{ """
21182,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/pubsub/PubsubTableProviderIT.java,347,,"                + ""       %s"""
21183,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/pubsub/PubsubTableProviderIT.java,351,,"                + ""     }'"","
21184,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/pubsub/PubsubTableProviderIT.java,813,,"        hasProperty(""payload"", equalTo(payload.getBytes(StandardCharsets.US_ASCII))),"
21185,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/pubsublite/PubsubLiteTableProviderTest.java,157,,"                ImmutableMap.of(""format"", ""json"")));"
21186,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/pubsublite/PubsubLiteTableProviderTest.java,157,,"                ImmutableMap.of(""format"", ""json"")));"
21187,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/pubsublite/PubsubLiteTableProviderTest.java,182,,"                    RowHandler.PAYLOAD_FIELD, Schema.builder().addStringField(""abc"").build())"
21188,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/pubsublite/RowHandlerTest.java,81,,"                        RowHandler.PAYLOAD_FIELD, Schema.builder().addStringField(""abc"").build())"
21189,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/pubsublite/RowHandlerTest.java,94,,"      Schema payloadSchema = Schema.builder().addStringField(""def"").build();"
21190,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/pubsublite/RowHandlerTest.java,163,,"            .withFieldValue(RowHandler.MESSAGE_KEY_FIELD, ""val1"".getBytes(UTF_8))"
21191,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/pubsublite/RowHandlerTest.java,164,,"            .withFieldValue(RowHandler.PAYLOAD_FIELD, ""val2"".getBytes(UTF_8))"
21192,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/pubsublite/RowHandlerTest.java,171,,"                            ""key1"","
21193,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/pubsublite/RowHandlerTest.java,172,,"                            ImmutableList.of(""attr1"".getBytes(UTF_8), ""attr2"".getBytes(UTF_8))),"
21194,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/pubsublite/RowHandlerTest.java,172,,"                            ImmutableList.of(""attr1"".getBytes(UTF_8), ""attr2"".getBytes(UTF_8))),"
21195,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/pubsublite/RowHandlerTest.java,174,,"                        .attachValues(""key2"", ImmutableList.of(""attr3"".getBytes(UTF_8)))))"
21196,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/pubsublite/RowHandlerTest.java,174,,"                        .attachValues(""key2"", ImmutableList.of(""attr3"".getBytes(UTF_8)))))"
21197,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/test/TestTableProviderTest.java,42,,"      Schema.builder().addInt32Field(""id"").addStringField(""name"").build();"
21198,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/test/TestTableProviderTest.java,53,,"        table.getName(), row(BASIC_SCHEMA, 1, ""one""), row(BASIC_SCHEMA, 2, ""two""));"
21199,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/test/TestTableProviderTest.java,53,,"        table.getName(), row(BASIC_SCHEMA, 1, ""one""), row(BASIC_SCHEMA, 2, ""two""));"
21200,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/test/TestTableProviderWithFilterAndProjectPushDown.java,63,,"          .addInt32Field(""unused1"")"
21201,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/test/TestTableProviderWithFilterAndProjectPushDown.java,65,,"          .addStringField(""name"")"
21202,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/test/TestTableProviderWithFilterAndProjectPushDown.java,89,,"        row(BASIC_SCHEMA, 100, 1, ""one"", (short) 100, true),"
21203,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/test/TestTableProviderWithFilterAndProjectPushDown.java,90,,"        row(BASIC_SCHEMA, 200, 2, ""two"", (short) 200, false));"
21204,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/test/TestTableProviderWithFilterAndProjectPushDown.java,155,,"        Schema.builder().addStringField(""new_name"").addInt32Field(""new_id"").build(),"
21205,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/test/TestTableProviderWithFilterAndProjectPushDown.java,155,,"        Schema.builder().addStringField(""new_name"").addInt32Field(""new_id"").build(),"
21206,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/test/TestTableProviderWithFilterAndProjectPushDown.java,173,,"    assertThat(a, containsInAnyOrder(""new_name"", ""new_id"", ""new_unused1""));"
21207,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/test/TestTableProviderWithFilterPushDown.java,66,,"          .addInt32Field(""unused1"")"
21208,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/test/TestTableProviderWithFilterPushDown.java,68,,"          .addStringField(""name"")"
21209,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/test/TestTableProviderWithFilterPushDown.java,69,,"          .addInt16Field(""unused2"")"
21210,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/test/TestTableProviderWithFilterPushDown.java,93,,"        row(BASIC_SCHEMA, 200, 2, ""two"", (short) 200, false));"
21211,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/test/TestTableProviderWithProjectPushDown.java,65,,"          .addStringField(""name"")"
21212,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/test/TestTableProviderWithProjectPushDown.java,88,,"        row(BASIC_SCHEMA, 100, 1, ""one"", 100),"
21213,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/test/TestTableProviderWithProjectPushDown.java,89,,"        row(BASIC_SCHEMA, 200, 2, ""two"", 200));"
21214,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/test/TestTableProviderWithProjectPushDown.java,125,,"        Schema.builder().addInt32Field(""new_id"").addStringField(""new_name"").build());"
21215,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/text/TextTableProviderTest.java,83,,"        tempFolder.newFile(""test.csv"").toPath(),"
21216,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/text/TextTableProviderTest.java,85,,"    String query = ""SELECT * FROM test"";"
21217,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/text/TextTableProviderTest.java,95,,"            Row.withSchema(CSV_SCHEMA).addValues(""hello"", 13).build(),"
21218,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/text/TextTableProviderTest.java,96,,"            Row.withSchema(CSV_SCHEMA).addValues(""goodbye"", 42).build());"
21219,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/store/InMemoryMetaStoreTest.java,50,,"    Table table = mockTable(""person"");"
21220,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/store/InMemoryMetaStoreTest.java,72,,"    store.createTable(mockTable(""hello""));"
21221,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/store/InMemoryMetaStoreTest.java,73,,"    store.createTable(mockTable(""world""));"
21222,./TargetProjects/beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/store/InMemoryMetaStoreTest.java,96,,"    store.registerProvider(new MockTableProvider(""mock"", ""hello"", ""world""));"
21223,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/DateTimeUtils.java,43,,"  @SuppressWarnings(""unchecked"")"
21224,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/DateTimeUtils.java,101,,"  @SuppressWarnings(""GoodTime"")"
21225,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/StreamingSqlTest.java,70,,"            .addDateTimeField(""field1"")"
21226,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/StreamingSqlTest.java,71,,"            .addDateTimeField(""field2"")"
21227,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/StreamingSqlTest.java,222,,"        Schema.builder().addInt64Field(""field_count"").addDateTimeField(""window_start"").build();"
21228,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/StreamingSqlTest.java,301,,"            .addInt64Field(""f_long"")"
21229,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/StreamingSqlTest.java,302,,"            .addInt64Field(""size"")"
21230,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/StreamingSqlTest.java,304,,"            .addDateTimeField(""window_end"")"
21231,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/StreamingSqlTest.java,314,,"                    parseTimestampWithUTCTimeZone(""2017-01-01 02:00:00""))"
21232,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/TableResolutionTest.java,54,,"    String tableName = ""fake_table"";"
21233,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/TestInput.java,42,,"                  .addStringField(""Value"")"
21234,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/TestInput.java,51,,"              parseTimestampWithUTCTimeZone(""2018-07-01 21:26:07""));"
21235,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/TestInput.java,178,,"                  .addField(""struct_col"", FieldType.row(TABLE_WITH_STRUCT_ROW_SCHEMA))"
21236,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/TestInput.java,209,,"      TestBoundedTable.of(Schema.builder().addArrayField(""array_col"", FieldType.STRING).build())"
21237,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/TestInput.java,215,,"                  .addInt64Field(""int_col"")"
21238,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/TestInput.java,329,,"          .addStringField(""str_field"")"
21239,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlDialectSpecTest.java,98,,"        ""SELECT CAST (1243 as INT64), """
21240,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlDialectSpecTest.java,99,,"            + ""CAST ('2018-09-15 12:59:59.000000+00' as TIMESTAMP), """
21241,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlDialectSpecTest.java,100,,"            + ""CAST ('string' as STRING);"";"
21242,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlDialectSpecTest.java,105,,"            .addInt64Field(""field1"")"
21243,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlDialectSpecTest.java,106,,"            .addDateTimeField(""field2"")"
21244,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlDialectSpecTest.java,107,,"            .addStringField(""field3"")"
21245,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlDialectSpecTest.java,116,,"                    ""string"")"
21246,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlDialectSpecTest.java,192,,"    final Schema schema = Schema.builder().addNullableField(""ColA"", FieldType.BYTES).build();"
21247,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlDialectSpecTest.java,247,,"    String sql = ""SELECT @p0 = @p1 AS ColA"";"
21248,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlDialectSpecTest.java,470,,"            Value.createStringValue(""yay""),"
21249,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlDialectSpecTest.java,596,,"            Row.withSchema(schema).addValue(ImmutableList.of(""baz"", ""foo"", ""bar"")).build());"
21250,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlDialectSpecTest.java,596,,"            Row.withSchema(schema).addValue(ImmutableList.of(""baz"", ""foo"", ""bar"")).build());"
21251,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlDialectSpecTest.java,862,,"            + ""FROM KeyValue AS t1"""
21252,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlDialectSpecTest.java,864,,"            + "" on """
21253,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlDialectSpecTest.java,915,,"        ""SELECT * """
21254,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlDialectSpecTest.java,919,,"            + "" t1.Key = t2.RowKey"";"
21255,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlDialectSpecTest.java,928,,"            .addNullableField(""field4"", FieldType.INT64)"
21256,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlDialectSpecTest.java,929,,"            .addNullableField(""field5"", FieldType.STRING)"
21257,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlDialectSpecTest.java,930,,"            .addNullableField(""field6"", DATETIME)"
21258,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlDialectSpecTest.java,948,,"                    ""KeyValue234"","
21259,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlDialectSpecTest.java,957,,"                    ""KeyValue235"","
21260,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlDialectSpecTest.java,960,,"                    ""BigTable235"","
21261,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlDialectSpecTest.java,1309,,"    final Schema schema = Schema.builder().addStringField(""field"").build();"
21262,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlDialectSpecTest.java,1415,,"    allowedTuples.put(1L, Arrays.asList(""data1""));"
21263,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlDialectSpecTest.java,1416,,"    allowedTuples.put(2L, Arrays.asList(""data2""));"
21264,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlDialectSpecTest.java,2239,,"    Schema schema = Schema.builder().addStringField(""str_field"").build();"
21265,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlDialectSpecTest.java,2616,,"                .addValue(""seems right"")"
21266,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlDialectSpecTest.java,2848,,"    String sql = ""SELECT STARTS_WITH(@p0, @p1)"";"
21267,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlDialectSpecTest.java,2933,,"    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(""abc"").build());"
21268,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlDialectSpecTest.java,3135,,"    String sql = ""SELECT REPLACE(@p0, @p1, @p2) AS ColA"";"
21269,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlJavaUdfTest.java,97,,"                + ""OPTIONS (path='%s'); """
21270,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlJavaUdfTest.java,104,,"    Schema singleField = Schema.builder().addStringField(""field1"").build();"
21271,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlJavaUdfTest.java,115,,"            ""CREATE FUNCTION increment(i INT64) RETURNS INT64 LANGUAGE java """
21272,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlJavaUdfTest.java,292,,"                ""message"","
21273,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlJavaUdfTypeTest.java,136,,"        ScalarFunctionImpl.create(BooleanIdentityFn.class.getMethod(""eval"", Boolean.class)));"
21274,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlMathFunctionsTest.java,64,,"                        .addInt64Field(""f_int64_1"")"
21275,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlMathFunctionsTest.java,65,,"                        .addInt64Field(""f_int64_2"")"
21276,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlMathFunctionsTest.java,68,,"                        .addDoubleField(""f_double"")"
21277,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlMathFunctionsTest.java,191,,"                        .addDoubleField(""f_double1"")"
21278,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlMathFunctionsTest.java,192,,"                        .addDoubleField(""f_double2"")"
21279,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlMathFunctionsTest.java,193,,"                        .addDoubleField(""f_double3"")"
21280,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlMathFunctionsTest.java,194,,"                        .addDoubleField(""f_double4"")"
21281,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlMathFunctionsTest.java,624,,"                        .addDecimalField(""f_numeric1"")"
21282,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlMathFunctionsTest.java,625,,"                        .addDecimalField(""f_numeric2"")"
21283,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlMathFunctionsTest.java,626,,"                        .addDecimalField(""f_numeric3"")"
21284,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlMathFunctionsTest.java,654,,"    final Schema schema = Schema.builder().addDecimalField(""f_numeric"").build();"
21285,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlNativeUdfTest.java,170,,"            + ""  AS\n"""
21286,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlNativeUdfTest.java,171,,"            + ""    SELECT *\n"""
21287,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlTimeFunctionsTest.java,76,,"            Row.withSchema(Schema.builder().addLogicalTypeField(""f_date"", SqlTypes.DATE).build())"
21288,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlTimeFunctionsTest.java,146,,"            + "")\n"""
21289,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlTimeFunctionsTest.java,147,,"            + ""SELECT\n"""
21290,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlTimeFunctionsTest.java,173,,"            .addInt64Field(""day"")"
21291,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlTimeFunctionsTest.java,240,,"        ""SELECT """
21292,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlTimeFunctionsTest.java,471,,"                        .addLogicalTypeField(""f_time1"", SqlTypes.TIME)"
21293,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlTimeFunctionsTest.java,472,,"                        .addLogicalTypeField(""f_time2"", SqlTypes.TIME)"
21294,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlTimeFunctionsTest.java,576,,"            Row.withSchema(Schema.builder().addLogicalTypeField(""f_time"", SqlTypes.TIME).build())"
21295,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlTimeFunctionsTest.java,634,,"                        .addLogicalTypeField(""f_time3"", SqlTypes.TIME)"
21296,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlTimeFunctionsTest.java,635,,"                        .addLogicalTypeField(""f_time4"", SqlTypes.TIME)"
21297,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlTimeFunctionsTest.java,636,,"                        .addLogicalTypeField(""f_time5"", SqlTypes.TIME)"
21298,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlTimeFunctionsTest.java,798,,"                    Schema.builder().addLogicalTypeField(""f_datetime"", SqlTypes.DATETIME).build())"
21299,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlTimeFunctionsTest.java,1235,,"            Row.withSchema(Schema.builder().addDateTimeField(""field1"").build())"
21300,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlTimeFunctionsTest.java,1439,,"            Row.withSchema(Schema.builder().addDateTimeField(""f_timestamp"").build())"
21301,./TargetProjects/beam/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlTimeFunctionsTest.java,1467,,"    zetaSQLQueryPlanner.setDefaultTimezone(""Asia/Shanghai"");"
21302,./TargetProjects/beam/sdks/java/extensions/zetasketch/src/test/java/org/apache/beam/sdk/extensions/zetasketch/ApproximateCountDistinctTest.java,110,,"        p.apply(""Int"", Create.of(INTS1)).apply(""IntHLL"", ApproximateCountDistinct.globally());"
21303,./TargetProjects/beam/sdks/java/extensions/zetasketch/src/test/java/org/apache/beam/sdk/extensions/zetasketch/ApproximateCountDistinctTest.java,110,,"        p.apply(""Int"", Create.of(INTS1)).apply(""IntHLL"", ApproximateCountDistinct.globally());"
21304,./TargetProjects/beam/sdks/java/fn-execution/src/test/java/org/apache/beam/sdk/fn/channel/ManagedChannelFactoryTest.java,41,,"        Endpoints.ApiServiceDescriptor.newBuilder().setUrl(""localhost:123"").build();"
21305,./TargetProjects/beam/sdks/java/fn-execution/src/test/java/org/apache/beam/sdk/fn/data/CompletableFutureInboundDataClientTest.java,77,,"    client.fail(new UnsupportedOperationException(""message""));"
21306,./TargetProjects/beam/sdks/java/fn-execution/src/test/java/org/apache/beam/sdk/fn/splittabledofn/RestrictionTrackersTest.java,48,,"            return ""goodClaim"".equals(position);"
21307,./TargetProjects/beam/sdks/java/harness/src/main/java/org/apache/beam/fn/harness/CombineRunners.java,172,,"                  combinePayload.getCombineFn().getPayload().toByteArray(), ""CombineFn"");"
21308,./TargetProjects/beam/sdks/java/harness/src/main/java/org/apache/beam/fn/harness/state/BagUserState.java,86,,"        ""Bag user state is no longer usable because it is closed for %s"","
21309,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/AssignWindowsRunnerTest.java,182,,"    pCollectionConsumerRegistry.register(""output"", ""ptransform"", outputs::add, VarIntCoder.of());"
21310,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/AssignWindowsRunnerTest.java,186,,"        RunnerApi.PCollection.newBuilder().setUniqueName(""input"").setCoderId(""coder-id"").build();"
21311,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/CombineRunnersTest.java,142,,"            mock(MetricsContainerStepMap.class), mock(ExecutionStateTracker.class), ""start"");"
21312,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/CombineRunnersTest.java,145,,"            mock(MetricsContainerStepMap.class), mock(ExecutionStateTracker.class), ""finish"");"
21313,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/CombineRunnersTest.java,229,,"            .setCoderId(""coder-id"")"
21314,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/CombineRunnersTest.java,239,,"            .addComponentCoderIds(""StringUtf8Coder"")"
21315,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/CombineRunnersTest.java,240,,"            .addComponentCoderIds(""coder-id-iterable"")"
21316,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/FlattenRunnerTest.java,69,,"            .putInputs(""inputA"", ""inputATarget"")"
21317,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/FlattenRunnerTest.java,70,,"            .putInputs(""inputB"", ""inputBTarget"")"
21318,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/FlattenRunnerTest.java,71,,"            .putInputs(""inputC"", ""inputCTarget"")"
21319,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/FlattenRunnerTest.java,72,,"            .putOutputs(mainOutputId, ""mainOutputTarget"")"
21320,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/FlattenRunnerTest.java,90,,"            .setCoderId(""coder-id"")"
21321,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/FnApiDoFnRunnerTest.java,205,,"      private static final TupleTag<String> additionalOutput = new TupleTag<>(""output"");"
21322,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/FnApiDoFnRunnerTest.java,207,,"      @StateId(""value"")"
21323,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/FnApiDoFnRunnerTest.java,211,,"      @StateId(""bag"")"
21324,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/FnApiDoFnRunnerTest.java,214,,"      @StateId(""combine"")"
21325,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/FnApiDoFnRunnerTest.java,239,,"          p.apply(Create.of(KV.of(""unused"", ""unused"")));"
21326,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/FnApiDoFnRunnerTest.java,276,,"              mock(MetricsContainerStepMap.class), mock(ExecutionStateTracker.class), ""start"");"
21327,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/FnApiDoFnRunnerTest.java,279,,"              mock(MetricsContainerStepMap.class), mock(ExecutionStateTracker.class), ""finish"");"
21328,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/FnApiDoFnRunnerTest.java,290,,"              Suppliers.ofInstance(""57L"")::get,"
21329,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/FnApiDoFnRunnerTest.java,397,,"      addExperiment(p.getOptions().as(ExperimentalOptions.class), ""beam_fn_api"");"
21330,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/FnApiDoFnRunnerTest.java,399,,"      addExperiment(p.getOptions().as(ExperimentalOptions.class), ""use_runner_v2"");"
21331,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/FnApiDoFnRunnerTest.java,1139,,"                  ""X"", ""event-timer1"", new Instant(1000L), new Instant(1003L)),"
21332,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/FnApiDoFnRunnerTest.java,1166,,"                  ""X"", ""processing-timer1"", new Instant(1000L), new Instant(10004L)),"
21333,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/FnApiDoFnRunnerTest.java,1213,,"              .put(bagUserStateKey(""bag"", ""X""), encode(""X0"", ""X1"", ""X2"", ""processing""))"
21334,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/FnApiDoFnRunnerTest.java,1214,,"              .put(bagUserStateKey(""bag"", ""Y""), encode(""Y1"", ""Y2"", ""processing-family""))"
21335,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/FnApiDoFnRunnerTest.java,1215,,"              .put(bagUserStateKey(""bag"", ""A""), encode(""A0"", ""event"", ""event""))"
21336,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/FnApiDoFnRunnerTest.java,1216,,"              .put(bagUserStateKey(""bag"", ""B""), encode(""event"", ""processing"", ""event-family""))"
21337,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/MapFnRunnersTest.java,62,,"          .putInputs(""input"", ""inputPC"")"
21338,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/MapFnRunnersTest.java,63,,"          .putOutputs(""output"", ""outputPC"")"
21339,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/MapFnRunnersTest.java,66,,"      RunnerApi.PCollection.newBuilder().setUniqueName(""inputPC"").setCoderId(""coder-id"").build();"
21340,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/MapFnRunnersTest.java,124,,"    assertThat(outputConsumer, contains(valueInGlobalWindow(""ABC"")));"
21341,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/ToStringFnRunnerTest.java,45,,"    KV<String, Integer> input = KV.of(""key"", 12345);"
21342,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/control/FinalizeBundleHandlerTest.java,63,,"    handler.registerCallbacks(""test"", callbacks);"
21343,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/control/ProcessBundleHandlerTest.java,148,,"      checkState(TestDoFn.State.NOT_SET_UP.equals(state), ""Unexpected state: %s"", state);"
21344,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/control/ProcessBundleHandlerTest.java,290,,"                    .setInstructionId(""999L"")"
21345,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/control/ProcessBundleHandlerTest.java,342,,"                    .putOutputs(""2L-output"", ""2L-output-pc"")"
21346,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/control/ProcessBundleHandlerTest.java,632,,"    when(bundleProcessor.getInstructionId()).thenReturn(""known"");"
21347,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/control/ProcessBundleHandlerTest.java,737,,"                  throw new IllegalStateException(""TestException"");"
21348,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/data/BeamFnDataInboundObserverTest.java,65,,"    observer.accept(dataWith(""ABC"", ""DEF"", ""GHI""), false);"
21349,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/data/BeamFnDataInboundObserverTest.java,65,,"    observer.accept(dataWith(""ABC"", ""DEF"", ""GHI""), false);"
21350,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/data/BeamFnDataInboundObserverTest.java,65,,"    observer.accept(dataWith(""ABC"", ""DEF"", ""GHI""), false);"
21351,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/data/PCollectionConsumerRegistryTest.java,79,,"    final String pCollectionA = ""pCollectionA"";"
21352,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/data/PCollectionConsumerRegistryTest.java,80,,"    final String pTransformIdA = ""pTransformIdA"";"
21353,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/data/PCollectionConsumerRegistryTest.java,93,,"    String elementValue = ""elem"";"
21354,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/data/QueueingBeamFnDataClientTest.java,95,,"                          ByteString.copyFrom(encodeToByteArray(CODER, valueInGlobalWindow(""ABC"")))"
21355,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/logging/BeamFnLoggingClientTest.java,69,,"    TEST_RECORD.setLoggerName(""LoggerName"");"
21356,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/logging/BeamFnLoggingClientTest.java,82,,"          .setInstructionId(""instruction-1"")"
21357,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/state/BagUserStateTest.java,50,,"            ""ptransformId"","
21358,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/state/BagUserStateTest.java,51,,"            ""stateId"","
21359,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/state/BagUserStateTest.java,52,,"            ByteString.copyFromUtf8(""encodedWindow""),"
21360,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/state/StateBackedIterableTest.java,58,,"          .add(new Object[] {Collections.emptyList(), ""emptySuffix"", ImmutableList.of()})"
21361,./TargetProjects/beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/state/StateBackedIterableTest.java,63,,"                ""nonEmptySuffix"","
21362,./TargetProjects/beam/sdks/java/io/amazon-web-services/src/test/java/org/apache/beam/sdk/io/aws/s3/S3FileSystemTest.java,117,,"    s3FileSystem = new S3FileSystem(s3Config(""other""));"
21363,./TargetProjects/beam/sdks/java/io/amazon-web-services/src/test/java/org/apache/beam/sdk/io/aws/s3/S3FileSystemTest.java,412,,"    S3FileSystem s3FileSystem = buildMockedS3FileSystem(s3Config(""mys3""));"
21364,./TargetProjects/beam/sdks/java/io/amazon-web-services/src/test/java/org/apache/beam/sdk/io/aws/s3/S3FileSystemTest.java,445,,"    S3ResourceId path = S3ResourceId.fromUri(""s3://testbucket/testdirectory/filethatexists"");"
21365,./TargetProjects/beam/sdks/java/io/amazon-web-services/src/test/java/org/apache/beam/sdk/io/aws/s3/S3FileSystemTest.java,601,,"    AmazonS3Exception exception = new AmazonS3Exception(""mock exception"");"
21366,./TargetProjects/beam/sdks/java/io/amazon-web-services/src/test/java/org/apache/beam/sdk/io/aws/s3/S3FileSystemTest.java,728,,"    firstResult.setNextContinuationToken(""token"");"
21367,./TargetProjects/beam/sdks/java/io/amazon-web-services/src/test/java/org/apache/beam/sdk/io/aws/s3/S3FileSystemTest.java,1027,,"    foundListObject.setKey(""path/part-0"");"
21368,./TargetProjects/beam/sdks/java/io/amazon-web-services/src/test/java/org/apache/beam/sdk/io/aws/s3/S3ResourceIdTest.java,77,,"          new TestCase(""s3://bucket/"", """", RESOLVE_DIRECTORY, ""s3://bucket/""),"
21369,./TargetProjects/beam/sdks/java/io/amazon-web-services/src/test/java/org/apache/beam/sdk/io/aws/s3/S3ResourceIdTest.java,78,,"          new TestCase(""s3://bucket"", """", RESOLVE_DIRECTORY, ""s3://bucket/""),"
21370,./TargetProjects/beam/sdks/java/io/amazon-web-services/src/test/java/org/apache/beam/sdk/io/aws/s3/S3ResourceIdTest.java,110,,"    S3ResourceId r1 = S3ResourceId.fromComponents(""s3"", ""bucket"", ""a/b/c"");"
21371,./TargetProjects/beam/sdks/java/io/amazon-web-services/src/test/java/org/apache/beam/sdk/io/aws/s3/S3ResourceIdTest.java,110,,"    S3ResourceId r1 = S3ResourceId.fromComponents(""s3"", ""bucket"", ""a/b/c"");"
21372,./TargetProjects/beam/sdks/java/io/amazon-web-services/src/test/java/org/apache/beam/sdk/io/aws/s3/S3ResourceIdTest.java,179,,"    S3ResourceId.fromUri(""s3://my_bucket/"").resolve(""tmp/"", RESOLVE_FILE);"
21373,./TargetProjects/beam/sdks/java/io/amazon-web-services/src/test/java/org/apache/beam/sdk/io/aws/s3/S3ResourceIdTest.java,210,,"        S3ResourceId.fromUri(""s3://my_bucket/tmp dir/""),"
21374,./TargetProjects/beam/sdks/java/io/amazon-web-services/src/test/java/org/apache/beam/sdk/io/aws/s3/S3TestUtils.java,83,,"        .setSSECustomerKey(new SSECustomerKey(""86glyTlCNZgccSxW8JxMa6ZdjdK3N141glAysPUZ3AA=""))"
21375,./TargetProjects/beam/sdks/java/io/amazon-web-services2/src/test/java/org/apache/beam/sdk/io/aws2/dynamodb/DynamoDBIOTest.java,258,,"                                      ""hashKey1"","
21376,./TargetProjects/beam/sdks/java/io/amazon-web-services2/src/test/java/org/apache/beam/sdk/io/aws2/dynamodb/DynamoDBIOTest.java,260,,"                                      ""rangeKey2"","
21377,./TargetProjects/beam/sdks/java/io/amazon-web-services2/src/test/java/org/apache/beam/sdk/io/aws2/kinesis/AmazonKinesisMock.java,239,,"      throw new RuntimeException(""Not implemented"");"
21378,./TargetProjects/beam/sdks/java/io/amazon-web-services2/src/test/java/org/apache/beam/sdk/io/aws2/kinesis/DynamicCheckpointGeneratorTest.java,50,,"            kinesisClient, ""stream"", startingPoint))"
21379,./TargetProjects/beam/sdks/java/io/amazon-web-services2/src/test/java/org/apache/beam/sdk/io/aws2/kinesis/KinesisReaderTest.java,141,,"    when(kinesisSource.getStreamName()).thenReturn(""stream1"");"
21380,./TargetProjects/beam/sdks/java/io/amazon-web-services2/src/test/java/org/apache/beam/sdk/io/aws2/kinesis/ShardCheckpointTest.java,73,,"    assertThat(checkpoint(AT_SEQUENCE_NUMBER, ""100"", null).getShardIterator(client))"
21381,./TargetProjects/beam/sdks/java/io/amazon-web-services2/src/test/java/org/apache/beam/sdk/io/aws2/kinesis/ShardReadersPoolTest.java,67,,"    when(a.getShardId()).thenReturn(""shard1"");"
21382,./TargetProjects/beam/sdks/java/io/amazon-web-services2/src/test/java/org/apache/beam/sdk/io/aws2/kinesis/ShardReadersPoolTest.java,69,,"    when(c.getShardId()).thenReturn(""shard2"");"
21383,./TargetProjects/beam/sdks/java/io/amazon-web-services2/src/test/java/org/apache/beam/sdk/io/aws2/kinesis/SimplifiedKinesisClientTest.java,245,,"    Instant countSince = new Instant(""2017-04-06T10:00:00.000Z"");"
21384,./TargetProjects/beam/sdks/java/io/amazon-web-services2/src/test/java/org/apache/beam/sdk/io/aws2/s3/S3FileSystemTest.java,328,,"    S3ResourceId path = S3ResourceId.fromUri(""s3://testbucket/testdirectory/filethatexists"");"
21385,./TargetProjects/beam/sdks/java/io/amazon-web-services2/src/test/java/org/apache/beam/sdk/io/aws2/s3/S3FileSystemTest.java,438,,"        S3Exception.builder().message(""mock exception"").statusCode(404).build();"
21386,./TargetProjects/beam/sdks/java/io/amazon-web-services2/src/test/java/org/apache/beam/sdk/io/aws2/s3/S3ResourceIdTest.java,71,,"          new TestCase(""s3://bucket/"", """", RESOLVE_DIRECTORY, ""s3://bucket/""),"
21387,./TargetProjects/beam/sdks/java/io/amazon-web-services2/src/test/java/org/apache/beam/sdk/io/aws2/s3/S3ResourceIdTest.java,72,,"          new TestCase(""s3://bucket"", """", RESOLVE_DIRECTORY, ""s3://bucket/""),"
21388,./TargetProjects/beam/sdks/java/io/amazon-web-services2/src/test/java/org/apache/beam/sdk/io/aws2/s3/S3ResourceIdTest.java,118,,"        () -> S3ResourceId.fromUri(""s3://my_bucket/"").resolve(""tmp/"", RESOLVE_FILE));"
21389,./TargetProjects/beam/sdks/java/io/amazon-web-services2/src/test/java/org/apache/beam/sdk/io/aws2/s3/S3ResourceIdTest.java,151,,"        S3ResourceId.fromUri(""s3://my_bucket/tmp dir/""),"
21390,./TargetProjects/beam/sdks/java/io/amazon-web-services2/src/test/java/org/apache/beam/sdk/io/aws2/s3/S3ResourceIdTest.java,214,,"    assertEquals(""bucket"", path.getBucket());"
21391,./TargetProjects/beam/sdks/java/io/amazon-web-services2/src/test/java/org/apache/beam/sdk/io/aws2/sns/SnsIOWriteTest.java,52,,"    String testMessage1 = ""test1"";"
21392,./TargetProjects/beam/sdks/java/io/amqp/src/test/java/org/apache/beam/sdk/io/amqp/AmqpMessageCoderTest.java,44,,"    message.setAddress(""address"");"
21393,./TargetProjects/beam/sdks/java/io/azure/src/test/java/org/apache/beam/sdk/io/azure/blobstore/AzfsResourceIdTest.java,64,,"            {""azfs://account/container/"", """", RESOLVE_DIRECTORY, ""azfs://account/container/""},"
21394,./TargetProjects/beam/sdks/java/io/azure/src/test/java/org/apache/beam/sdk/io/azure/blobstore/AzfsResourceIdTest.java,65,,"            {""azfs://account/container"", """", RESOLVE_DIRECTORY, ""azfs://account/container/""},"
21395,./TargetProjects/beam/sdks/java/io/azure/src/test/java/org/apache/beam/sdk/io/azure/blobstore/AzfsResourceIdTest.java,162,,"      AzfsResourceId a = AzfsResourceId.fromComponents(""account"", ""container"", ""a/b/c"");"
21396,./TargetProjects/beam/sdks/java/io/azure/src/test/java/org/apache/beam/sdk/io/azure/blobstore/AzfsResourceIdTest.java,162,,"      AzfsResourceId a = AzfsResourceId.fromComponents(""account"", ""container"", ""a/b/c"");"
21397,./TargetProjects/beam/sdks/java/io/azure/src/test/java/org/apache/beam/sdk/io/azure/blobstore/AzfsResourceIdTest.java,180,,"      AzfsResourceId resourceId = AzfsResourceId.fromComponents(""account"", ""container"", ""blob"");"
21398,./TargetProjects/beam/sdks/java/io/azure/src/test/java/org/apache/beam/sdk/io/azure/blobstore/AzfsResourceIdTest.java,181,,"      assertEquals(""azfs"", resourceId.getScheme());"
21399,./TargetProjects/beam/sdks/java/io/azure/src/test/java/org/apache/beam/sdk/io/azure/blobstore/AzfsResourceIdTest.java,208,,"      assertTrue(AzfsResourceId.fromUri(""azfs://account/container/virtualDir/"").isDirectory());"
21400,./TargetProjects/beam/sdks/java/io/azure/src/test/java/org/apache/beam/sdk/io/azure/blobstore/AzureBlobStoreFileSystemTest.java,194,,"          AzfsResourceId.fromUri(""azfs://account/"" + container + ""/testdirectory/file*"");"
21401,./TargetProjects/beam/sdks/java/io/azure/src/test/java/org/apache/beam/sdk/io/azure/blobstore/AzureBlobStoreFileSystemTest.java,197,,"              ""azfs://account/"" + container + ""/testdirectory/file1name"","
21402,./TargetProjects/beam/sdks/java/io/azure/src/test/java/org/apache/beam/sdk/io/azure/blobstore/AzureBlobStoreFileSystemTest.java,198,,"              ""azfs://account/"" + container + ""/testdirectory/file2name"","
21403,./TargetProjects/beam/sdks/java/io/azure/src/test/java/org/apache/beam/sdk/io/azure/blobstore/AzureBlobStoreFileSystemTest.java,199,,"              ""azfs://account/"" + container + ""/testdirectory/file3name"");"
21404,./TargetProjects/beam/sdks/java/io/cassandra/src/main/java/org/apache/beam/sdk/io/cassandra/CassandraIO.java,865,,"          ""CassandraIO."" + getMutationTypeName() + ""().withHosts(hosts) called with null hosts"");"
21405,./TargetProjects/beam/sdks/java/io/cassandra/src/test/java/org/apache/beam/sdk/io/cassandra/SplitGeneratorTest.java,38,,"                ""56713727820156410577229101238628035242"","
21406,./TargetProjects/beam/sdks/java/io/cassandra/src/test/java/org/apache/beam/sdk/io/cassandra/SplitGeneratorTest.java,39,,"                ""56713727820156410577229101238628035243"","
21407,./TargetProjects/beam/sdks/java/io/cassandra/src/test/java/org/apache/beam/sdk/io/cassandra/SplitGeneratorTest.java,40,,"                ""113427455640312821154458202477256070484"","
21408,./TargetProjects/beam/sdks/java/io/cassandra/src/test/java/org/apache/beam/sdk/io/cassandra/SplitGeneratorTest.java,41,,"                ""113427455640312821154458202477256070485"")"
21409,./TargetProjects/beam/sdks/java/io/cassandra/src/test/java/org/apache/beam/sdk/io/cassandra/SplitGeneratorTest.java,45,,"    SplitGenerator generator = new SplitGenerator(""foo.bar.RandomPartitioner"");"
21410,./TargetProjects/beam/sdks/java/io/clickhouse/src/test/java/org/apache/beam/sdk/io/clickhouse/ClickHouseIOTest.java,155,,"            Schema.Field.of(""f10"", FieldType.INT32),"
21411,./TargetProjects/beam/sdks/java/io/clickhouse/src/test/java/org/apache/beam/sdk/io/clickhouse/ClickHouseIOTest.java,156,,"            Schema.Field.of(""f11"", FieldType.INT64),"
21412,./TargetProjects/beam/sdks/java/io/clickhouse/src/test/java/org/apache/beam/sdk/io/clickhouse/ClickHouseIOTest.java,157,,"            Schema.Field.of(""f12"", FieldType.INT64),"
21413,./TargetProjects/beam/sdks/java/io/clickhouse/src/test/java/org/apache/beam/sdk/io/clickhouse/ClickHouseIOTest.java,158,,"            Schema.Field.of(""f13"", FieldType.STRING),"
21414,./TargetProjects/beam/sdks/java/io/clickhouse/src/test/java/org/apache/beam/sdk/io/clickhouse/ClickHouseIOTest.java,159,,"            Schema.Field.of(""f14"", FieldType.STRING),"
21415,./TargetProjects/beam/sdks/java/io/clickhouse/src/test/java/org/apache/beam/sdk/io/clickhouse/ClickHouseIOTest.java,178,,"            .addValue(""abc"")"
21416,./TargetProjects/beam/sdks/java/io/clickhouse/src/test/java/org/apache/beam/sdk/io/clickhouse/ClickHouseIOTest.java,179,,"            .addValue(""cde"")"
21417,./TargetProjects/beam/sdks/java/io/common/src/test/java/org/apache/beam/sdk/io/common/IOITHelperTest.java,55,,"    exceptionRule.expectMessage(""Problem with connection"");"
21418,./TargetProjects/beam/sdks/java/io/contextualtextio/src/main/java/org/apache/beam/sdk/io/contextualtextio/RecordWithMetadata.java,87,,"        Schema.builder().addStringField(""resource"").addBooleanField(""is_directory"").build();"
21419,./TargetProjects/beam/sdks/java/io/contextualtextio/src/main/java/org/apache/beam/sdk/io/contextualtextio/RecordWithMetadata.java,87,,"        Schema.builder().addStringField(""resource"").addBooleanField(""is_directory"").build();"
21420,./TargetProjects/beam/sdks/java/io/contextualtextio/src/test/java/org/apache/beam/sdk/io/contextualtextio/ContextualTextIOTest.java,224,,"            p.apply(""Read_"" + file + ""_"" + compression.toString(), read)"
21421,./TargetProjects/beam/sdks/java/io/debezium/src/test/java/org/apache/beam/io/debezium/KafkaSourceConsumerFnTest.java,55,,"            ""from"", ""1"","
21422,./TargetProjects/beam/sdks/java/io/debezium/src/test/java/org/apache/beam/io/debezium/KafkaSourceConsumerFnTest.java,57,,"            ""delay"", ""0.4"","
21423,./TargetProjects/beam/sdks/java/io/debezium/src/test/java/org/apache/beam/io/debezium/KafkaSourceConsumerFnTest.java,58,,"            ""topic"", ""any"");"
21424,./TargetProjects/beam/sdks/java/io/debezium/src/test/java/org/apache/beam/io/debezium/KafkaSourceConsumerFnTest.java,203,,"      this.start = (Long) offset.get(""start"");"
21425,./TargetProjects/beam/sdks/java/io/debezium/src/test/java/org/apache/beam/io/debezium/SourceRecordJsonTest.java,72,,"    return SchemaBuilder.struct().field(""column1"", Schema.STRING_SCHEMA).build();"
21426,./TargetProjects/beam/sdks/java/io/elasticsearch-tests/elasticsearch-tests-common/src/test/java/org/apache/beam/sdk/io/elasticsearch/ElasticsearchIOTestCommon.java,492,,"                .withIdFn(new ExtractValueFn(""scientist"")));"
21427,./TargetProjects/beam/sdks/java/io/elasticsearch-tests/elasticsearch-tests-common/src/test/java/org/apache/beam/sdk/io/elasticsearch/ElasticsearchIOTestCommon.java,498,,"    int count = countByScientistName(connectionConfiguration, restClient, ""Einstein"", null);"
21428,./TargetProjects/beam/sdks/java/io/elasticsearch-tests/elasticsearch-tests-common/src/test/java/org/apache/beam/sdk/io/elasticsearch/ElasticsearchIOTestCommon.java,694,,"        numDocs / 2, countByMatch(connectionConfiguration, restClient, ""group"", ""0"", null, null));"
21429,./TargetProjects/beam/sdks/java/io/elasticsearch-tests/elasticsearch-tests-common/src/test/java/org/apache/beam/sdk/io/elasticsearch/ElasticsearchIOTestCommon.java,706,,"      doc.put(""my_version"", ""1"");"
21430,./TargetProjects/beam/sdks/java/io/elasticsearch-tests/elasticsearch-tests-common/src/test/java/org/apache/beam/sdk/io/elasticsearch/ElasticsearchIOTestUtils.java,85,,"    Request request = new Request(""POST"", String.format(""/%s/_close"", index));"
21431,./TargetProjects/beam/sdks/java/io/elasticsearch-tests/elasticsearch-tests-common/src/test/java/org/apache/beam/sdk/io/elasticsearch/ElasticsearchIOTestUtils.java,259,,"        result = searchResult.path(""hits"").path(""total"").path(""value"").asLong();"
21432,./TargetProjects/beam/sdks/java/io/elasticsearch-tests/elasticsearch-tests-common/src/test/java/org/apache/beam/sdk/io/elasticsearch/ElasticsearchIOTestUtils.java,259,,"        result = searchResult.path(""hits"").path(""total"").path(""value"").asLong();"
21433,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryUtils.java,849,,"          ""Does not support converting avro format: "" + value.getClass().getName());"
21434,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/CivilTimeEncoder.java,91,,"  @SuppressWarnings(""GoodTime"") // should accept a java.time.LocalTime"
21435,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/CivilTimeEncoder.java,114,,"  @SuppressWarnings(""GoodTime-ApiWithNumericTimeUnit"")"
21436,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/DynamicDestinationsHelpers.java,202,,"      return MoreObjects.toStringHelper(this).add(""inner"", inner).toString();"
21437,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigtable/BigtableIO.java,494,,"          MoreObjects.toStringHelper(Read.class).add(""config"", getBigtableConfig());"
21438,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/datastore/DatastoreV1.java,522,,"      checkArgument(projectId != null, ""projectId can not be null"");"
21439,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/datastore/DatastoreV1.java,692,,"          .addIfNotNull(DisplayData.item(""projectId"", getProjectId()).withLabel(""ProjectId""))"
21440,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubIO.java,273,,"        return ""projects/"" + project + ""/subscriptions/"" + subscription;"
21441,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubTestClient.java,437,,"            ""No message with ACK id %s is waiting for an ACK"","
21442,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/OrderedCode.java,383,,"      throw new IllegalArgumentException(""Invalid encoded byte array"");"
21443,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/testing/FakeDatasetService.java,439,,"            throw new RuntimeException(""No such stream: "" + streamName);"
21444,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/testing/FakeJobService.java,158,,"      job.setKind("" bigquery#job"");"
21445,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/testing/FakeJobService.java,159,,"      job.setStatus(new JobStatus().setState(""PENDING""));"
21446,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/testing/FakeJobService.java,246,,"              && (""DONE"".equals(status.getState()) || ""FAILED"".equals(status.getState()))) {"
21447,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/testing/FakeJobService.java,246,,"              && (""DONE"".equals(status.getState()) || ""FAILED"".equals(status.getState()))) {"
21448,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BeamRowToStorageApiProtoTest.java,226,,"          .withFieldValue(""arrayValue"", ImmutableList.of(""one"", ""two"", ""red"", ""blue""))"
21449,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BeamRowToStorageApiProtoTest.java,226,,"          .withFieldValue(""arrayValue"", ImmutableList.of(""one"", ""two"", ""red"", ""blue""))"
21450,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BeamRowToStorageApiProtoTest.java,226,,"          .withFieldValue(""arrayValue"", ImmutableList.of(""one"", ""two"", ""red"", ""blue""))"
21451,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BeamRowToStorageApiProtoTest.java,226,,"          .withFieldValue(""arrayValue"", ImmutableList.of(""one"", ""two"", ""red"", ""blue""))"
21452,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BeamRowToStorageApiProtoTest.java,273,,"          .addField(""nested"", FieldType.row(BASE_SCHEMA).withNullable(true))"
21453,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryAvroUtilsTest.java,57,,"          new TableFieldSchema().setName(""species"").setType(""STRING"").setMode(""NULLABLE""));"
21454,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryAvroUtilsTest.java,57,,"          new TableFieldSchema().setName(""species"").setType(""STRING"").setMode(""NULLABLE""));"
21455,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryAvroUtilsTest.java,68,,"          new TableFieldSchema().setName(""number"").setType(""INTEGER"").setMode(""REQUIRED""),"
21456,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryAvroUtilsTest.java,70,,"          new TableFieldSchema().setName(""quality"").setType(""FLOAT"") /* default to NULLABLE */,"
21457,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryAvroUtilsTest.java,72,,"          new TableFieldSchema().setName(""birthday"").setType(""TIMESTAMP"").setMode(""NULLABLE""),"
21458,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryAvroUtilsTest.java,73,,"          new TableFieldSchema().setName(""birthdayMoney"").setType(""NUMERIC"").setMode(""NULLABLE""),"
21459,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryAvroUtilsTest.java,75,,"              .setName(""lotteryWinnings"")"
21460,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryAvroUtilsTest.java,78,,"          new TableFieldSchema().setName(""flighted"").setType(""BOOLEAN"").setMode(""NULLABLE""),"
21461,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryAvroUtilsTest.java,79,,"          new TableFieldSchema().setName(""sound"").setType(""BYTES"").setMode(""NULLABLE""),"
21462,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryAvroUtilsTest.java,80,,"          new TableFieldSchema().setName(""anniversaryDate"").setType(""DATE"").setMode(""NULLABLE""),"
21463,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryAvroUtilsTest.java,82,,"              .setName(""anniversaryDatetime"")"
21464,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryAvroUtilsTest.java,85,,"          new TableFieldSchema().setName(""anniversaryTime"").setType(""TIME"").setMode(""NULLABLE""),"
21465,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryAvroUtilsTest.java,92,,"              .setName(""associates"")"
21466,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryAvroUtilsTest.java,96,,"          new TableFieldSchema().setName(""geoPositions"").setType(""GEOGRAPHY"").setMode(""NULLABLE""));"
21467,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOReadTest.java,133,,"    fakeDatasetService.createDataset(projectId, ""dataset-id"", """", """", null);"
21468,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOReadTest.java,134,,"    String tableId = ""sometable"";"
21469,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOReadTest.java,145,,"                            new TableFieldSchema().setName(""name"").setType(""STRING""),"
21470,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOReadTest.java,145,,"                            new TableFieldSchema().setName(""name"").setType(""STRING""),"
21471,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOReadTest.java,146,,"                            new TableFieldSchema().setName(""number"").setType(""INTEGER"")))));"
21472,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOReadTest.java,146,,"                            new TableFieldSchema().setName(""number"").setType(""INTEGER"")))));"
21473,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOReadTest.java,242,,"    BigQueryIO.Read read = BigQueryIO.read().from(""foo.com:project:somedataset.sometable"");"
21474,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOReadTest.java,243,,"    checkReadTableObject(read, ""foo.com:project"", ""somedataset"", ""sometable"");"
21475,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOReadTest.java,243,,"    checkReadTableObject(read, ""foo.com:project"", ""somedataset"", ""sometable"");"
21476,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOReadTest.java,248,,"    BigQueryIO.Read read = BigQueryIO.read().fromQuery(""foo_query"");"
21477,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOReadTest.java,378,,"            .setProjectId(""non-executing-project"")"
21478,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOReadTest.java,545,,"    fakeDatasetService.createDataset(""project"", ""data_set"", """", """", null);"
21479,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOReadTest.java,557,,"    String stepUuid = ""testStepUuid"";"
21480,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOStorageQueryTest.java,335,,"        ""asia-northeast1"","
21481,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOStorageQueryTest.java,336,,"        ""Fake plastic tree^H^H^H^Htables"","
21482,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOStorageQueryTest.java,348,,"                            new TableFieldSchema().setName(""name"").setType(""STRING""),"
21483,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOStorageQueryTest.java,349,,"                            new TableFieldSchema().setName(""number"").setType(""INTEGER""))))"
21484,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOStorageQueryTest.java,363,,"    String stepUuid = ""testStepUuid"";"
21485,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOStorageQueryTest.java,373,,"            .setParent(""projects/"" + options.getProject())"
21486,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOStorageReadTest.java,182,,"            .from(""foo.com:project:dataset.table"");"
21487,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOStorageReadTest.java,183,,"    checkTypedReadTableObject(typedRead, ""foo.com:project"", ""dataset"", ""table"");"
21488,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOStorageReadTest.java,183,,"    checkTypedReadTableObject(typedRead, ""foo.com:project"", ""dataset"", ""table"");"
21489,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOStorageReadTest.java,183,,"    checkTypedReadTableObject(typedRead, ""foo.com:project"", ""dataset"", ""table"");"
21490,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOStorageReadTest.java,418,,"                  new TableFieldSchema().setName(""name"").setType(""STRING"").setMode(""REQUIRED""),"
21491,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOStorageReadTest.java,419,,"                  new TableFieldSchema().setName(""number"").setType(""INTEGER"").setMode(""REQUIRED"")));"
21492,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOStorageReadTest.java,437,,"            .setParent(""projects/project-id"")"
21493,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOStorageReadTest.java,440,,"                    .setTable(""projects/foo.com:project/datasets/dataset/tables/table""))"
21494,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOStorageReadTest.java,758,,"            .setName(""readSession"")"
21495,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOStorageReadTest.java,763,,"        ReadRowsRequest.newBuilder().setReadStream(""readStream"").build();"
21496,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOStorageReadTest.java,883,,"        ReadRowsRequest.newBuilder().setReadStream(""parentStream"").build();"
21497,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOStorageReadTest.java,909,,"                .setPrimaryStream(ReadStream.newBuilder().setName(""primaryStream""))"
21498,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOStorageReadTest.java,910,,"                .setRemainderStream(ReadStream.newBuilder().setName(""remainderStream""))"
21499,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOStorageReadTest.java,1086,,"                .setRemainderStream(ReadStream.newBuilder().setName(""ignored""))"
21500,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOStorageReadTest.java,1354,,"            .addStreams(ReadStream.newBuilder().setName(""streamName""))"
21501,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOWriteTest.java,184,,"                  bqOptions.setProject(""project-id"");"
21502,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOWriteTest.java,219,,"    fakeDatasetService.createDataset(""bigquery-project-id"", ""dataset-id"", """", """", null);"
21503,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOWriteTest.java,239,,"                ImmutableList.of(new TableFieldSchema().setName(""number"").setType(""INTEGER"")));"
21504,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOWriteTest.java,239,,"                ImmutableList.of(new TableFieldSchema().setName(""number"").setType(""INTEGER"")));"
21505,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOWriteTest.java,244,,"                .to(""project-id:dataset-id.table-id"")"
21506,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOWriteTest.java,280,,"        Schema.builder().addField(""name"", FieldType.STRING).addField(""id"", FieldType.INT32).build();"
21507,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOWriteTest.java,364,,"                                new TableFieldSchema().setName(""name"").setType(""STRING""),"
21508,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOWriteTest.java,421,,"    TableRow row1 = new TableRow().set(""date"", ""2018-01-01"").set(""number"", ""1"");"
21509,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOWriteTest.java,592,,"        fakeDatasetService.getAllRows(""project-id"", ""dataset-id"", ""table-id""),"
21510,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOWriteTest.java,658,,"    testTriggeredFileLoadsWithTempTables(""dataset-id.table-id"");"
21511,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOWriteTest.java,919,,"                                new TableFieldSchema().setName(""strVal"").setType(""STRING""),"
21512,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOWriteTest.java,920,,"                                new TableFieldSchema().setName(""longVal"").setType(""INTEGER""),"
21513,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOWriteTest.java,921,,"                                new TableFieldSchema().setName(""doubleVal"").setType(""FLOAT""),"
21514,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOWriteTest.java,922,,"                                new TableFieldSchema().setName(""instantVal"").setType(""TIMESTAMP""))))"
21515,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOWriteTest.java,1428,,"    assertEquals(""somedataset"", write.getTable().get().getDatasetId());"
21516,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOWriteTest.java,1429,,"    assertEquals(""sometable"", write.getTable().get().getTableId());"
21517,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOWriteTest.java,1586,,"                .to(""dataset.table"")"
21518,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOWriteTest.java,2028,,"                String.format(""%s:%s.%s"", projectId, datasetId, ""table1"")),"
21519,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryResourceNamingTest.java,39,,"        BigQueryResourceNaming.createJobIdPrefix(""beamapp-job-test"", ""abcd"", JobType.EXPORT));"
21520,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryResourceNamingTest.java,39,,"        BigQueryResourceNaming.createJobIdPrefix(""beamapp-job-test"", ""abcd"", JobType.EXPORT));"
21521,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQuerySchemaUpdateOptionsIT.java,72,,"                  new TableFieldSchema().setName(""optional_field"").setType(""STRING""),"
21522,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQuerySchemaUpdateOptionsIT.java,72,,"                  new TableFieldSchema().setName(""optional_field"").setType(""STRING""),"
21523,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryServicesImplTest.java,211,,"    jobRef.setJobId(""jobId"");"
21524,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryServicesImplTest.java,212,,"    jobRef.setProjectId(""projectId"");"
21525,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryServicesImplTest.java,278,,"              .thenReturn(toStream(errorWithReasonAndStatus(""rateLimitExceeded"", 403)));"
21526,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryServicesImplTest.java,423,,"            .setDatasetId(""datasetId"")"
21527,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryServicesImplTest.java,424,,"            .setTableId(""tableId"");"
21528,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryServicesImplTest.java,626,,"        new TableReference().setProjectId(""project"").setDatasetId(""dataset"").setTableId(""table"");"
21529,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryServicesImplTest.java,626,,"        new TableReference().setProjectId(""project"").setDatasetId(""dataset"").setTableId(""table"");"
21530,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryServicesImplTest.java,626,,"        new TableReference().setProjectId(""project"").setDatasetId(""dataset"").setTableId(""table"");"
21531,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryServicesImplTest.java,923,,"              .thenReturn(toStream(errorWithReasonAndStatus(""actually forbidden"", 403)));"
21532,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryServicesImplTest.java,981,,"                        .setErrors(ImmutableList.of(new ErrorProto().setReason(""timeout""))),"
21533,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryTimePartitioningClusteringIT.java,56,,"      new Clustering().setFields(Arrays.asList(""station_number""));"
21534,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryTimePartitioningClusteringIT.java,114,,"          String.format(""%s.%s"", DATASET_NAME, tableName), null, TIME_PARTITIONING, CLUSTERING);"
21535,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryToTableIT.java,84,,"                  new TableFieldSchema().setName(""bytes"").setType(""BYTES""),"
21536,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryToTableIT.java,85,,"                  new TableFieldSchema().setName(""date"").setType(""DATE""),"
21537,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryToTableIT.java,86,,"                  new TableFieldSchema().setName(""time"").setType(""TIME"")));"
21538,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryUtilsTest.java,71,,"          .addNullableField(""value"", Schema.FieldType.DOUBLE)"
21539,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryUtilsTest.java,72,,"          .addNullableField(""name"", Schema.FieldType.STRING)"
21540,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryUtilsTest.java,73,,"          .addNullableField(""timestamp_variant1"", Schema.FieldType.DATETIME)"
21541,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryUtilsTest.java,74,,"          .addNullableField(""timestamp_variant2"", Schema.FieldType.DATETIME)"
21542,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryUtilsTest.java,75,,"          .addNullableField(""timestamp_variant3"", Schema.FieldType.DATETIME)"
21543,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryUtilsTest.java,76,,"          .addNullableField(""timestamp_variant4"", Schema.FieldType.DATETIME)"
21544,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryUtilsTest.java,77,,"          .addNullableField(""datetime"", Schema.FieldType.logicalType(SqlTypes.DATETIME))"
21545,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryUtilsTest.java,78,,"          .addNullableField(""datetime0ms"", Schema.FieldType.logicalType(SqlTypes.DATETIME))"
21546,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryUtilsTest.java,79,,"          .addNullableField(""datetime0s_ns"", Schema.FieldType.logicalType(SqlTypes.DATETIME))"
21547,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryUtilsTest.java,80,,"          .addNullableField(""datetime0s_0ns"", Schema.FieldType.logicalType(SqlTypes.DATETIME))"
21548,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryUtilsTest.java,81,,"          .addNullableField(""date"", Schema.FieldType.logicalType(SqlTypes.DATE))"
21549,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryUtilsTest.java,82,,"          .addNullableField(""time"", Schema.FieldType.logicalType(SqlTypes.TIME))"
21550,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryUtilsTest.java,83,,"          .addNullableField(""time0ms"", Schema.FieldType.logicalType(SqlTypes.TIME))"
21551,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryUtilsTest.java,84,,"          .addNullableField(""time0s_ns"", Schema.FieldType.logicalType(SqlTypes.TIME))"
21552,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryUtilsTest.java,85,,"          .addNullableField(""time0s_0ns"", Schema.FieldType.logicalType(SqlTypes.TIME))"
21553,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryUtilsTest.java,86,,"          .addNullableField(""valid"", Schema.FieldType.BOOLEAN)"
21554,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryUtilsTest.java,87,,"          .addNullableField(""binary"", Schema.FieldType.BYTES)"
21555,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryUtilsTest.java,88,,"          .addNullableField(""numeric"", Schema.FieldType.DECIMAL)"
21556,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryUtilsTest.java,94,,"              ""color"", Schema.FieldType.logicalType(EnumerationType.create(""RED"", ""GREEN"", ""BLUE"")))"
21557,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryUtilsTest.java,94,,"              ""color"", Schema.FieldType.logicalType(EnumerationType.create(""RED"", ""GREEN"", ""BLUE"")))"
21558,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryUtilsTest.java,104,,"      Schema.builder().addArrayField(""ids"", Schema.FieldType.INT64).build();"
21559,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryUtilsTest.java,107,,"      Schema.builder().addNullableField(""row"", Schema.FieldType.row(FLAT_TYPE)).build();"
21560,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryUtilsTest.java,110,,"      Schema.builder().addArrayField(""rows"", Schema.FieldType.row(FLAT_TYPE)).build();"
21561,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryUtilsTest.java,113,,"      Schema.builder().addArrayField(""map"", Schema.FieldType.row(MAP_TYPE)).build();"
21562,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryUtilsTest.java,274,,"              ""test"","
21563,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryUtilsTest.java,285,,"              LocalDateTime.parse(""2020-11-02T12:34:56.789876""),"
21564,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryUtilsTest.java,286,,"              LocalDateTime.parse(""2020-11-02T12:34:56""),"
21565,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryUtilsTest.java,287,,"              LocalDateTime.parse(""2020-11-02T12:34:00.789876""),"
21566,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryUtilsTest.java,289,,"              LocalDate.parse(""2020-11-02""),"
21567,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryUtilsTest.java,290,,"              LocalTime.parse(""12:34:56.789876""),"
21568,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryUtilsTest.java,291,,"              LocalTime.parse(""12:34:56""),"
21569,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryUtilsTest.java,292,,"              LocalTime.parse(""12:34:00.789876""),"
21570,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryUtilsTest.java,295,,"              Base64.getDecoder().decode(""ABCD1234""),"
21571,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryUtilsTest.java,301,,"          .set(""id"", ""123"")"
21572,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryUtilsTest.java,302,,"          .set(""value"", ""123.456"")"
21573,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryUtilsTest.java,315,,"          .set(""datetime0s_0ns"", ""2020-11-02T12:34:00"")"
21574,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryUtilsTest.java,320,,"          .set(""time0s_0ns"", ""12:34:00"")"
21575,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryUtilsTest.java,321,,"          .set(""valid"", ""false"")"
21576,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/InsertRetryPolicyTest.java,54,,"        policy.shouldRetry(new Context(generateErrorAmongMany(5, ""timeout"", ""unavailable""))));"
21577,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/TableRowToStorageApiProtoTest.java,255,,"          .set(""stringValue"", ""string"")"
21578,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigtable/BigtableIOTest.java,176,,"      BigtableIO.read().withInstanceId(""instance"").withProjectId(""project"");"
21579,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigtable/BigtableIOTest.java,176,,"      BigtableIO.read().withInstanceId(""instance"").withProjectId(""project"");"
21580,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigtable/BigtableIOTest.java,208,,"            .withTableId(""table"")"
21581,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigtable/BigtableIOTest.java,394,,"            .withTableId(""TEST-TABLE"")"
21582,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigtable/BigtableIOTest.java,493,,"      verifyNotNull(input, ""input"");"
21583,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigtable/BigtableIOTest.java,534,,"    ByteKey startKey = ByteKey.copyFrom(""key000000100"".getBytes(StandardCharsets.UTF_8));"
21584,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigtable/BigtableIOTest.java,725,,"    final String table = ""TEST-MANY-ROWS-SPLITS-TABLE"";"
21585,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigtable/BigtableIOTest.java,1101,,"            .withTableId(""fooTable"")"
21586,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigtable/BigtableIOTest.java,1186,,"    final String key = ""key"";"
21587,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigtable/BigtableIOTest.java,1187,,"    final String value = ""value"";"
21588,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigtable/BigtableIOTest.java,1192,,"        .apply(""write"", defaultWrite.withTableId(table));"
21589,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigtable/BigtableTestUtils.java,116,,"                .addCells(createCell(ByteString.copyFrom(Longs.toByteArray(5L)), NOW, ""label1""))"
21590,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/datastore/DatastoreV1Test.java,223,,"    assertThat(displayData, hasDisplayItem(""projectId"", PROJECT_ID));"
21591,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/datastore/DatastoreV1Test.java,299,,"        DatastoreIO.v1().write().withProjectId(""myProject"").withHintNumWorkers(hintNumWorkers);"
21592,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/datastore/DatastoreV1Test.java,303,,"        ""DatastoreIO write should include the project in its primitive display data"","
21593,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/datastore/DatastoreV1Test.java,311,,"        ""DatastoreIO write should include ramp-up throttling worker count hint if enabled"","
21594,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/datastore/DatastoreV1Test.java,313,,"        hasItem(hasDisplayItem(""hintNumWorkers"", hintNumWorkers)));"
21595,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/datastore/DatastoreV1Test.java,396,,"    key = makeKey(""bird"", ""finch"").build();"
21596,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/datastore/DatastoreV1Test.java,396,,"    key = makeKey(""bird"", ""finch"").build();"
21597,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/datastore/DatastoreV1Test.java,530,,"          makeUpsert(Entity.newBuilder().setKey(makeKey(""key"" + i, i + 1)).build()).build());"
21598,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/datastore/EntityToRowRowToEntityTest.java,59,,"  static final String DEFAULT_KEY_FIELD = ""__key__"";"
21599,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/datastore/EntityToRowRowToEntityTest.java,74,,"          .addNullableField(""string"", STRING)"
21600,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/firestore/BaseFirestoreV1WriteFnTest.java,211,,"            .setDatabase(""projects/testing-project/databases/(default)"")"
21601,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/firestore/FirestoreV1FnBatchGetDocumentsTest.java,61,,"            .setDatabase(String.format(""projects/%s/databases/(default)"", projectId))"
21602,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/firestore/FirestoreV1FnListCollectionIdsTest.java,59,,"            .setParent(String.format(""projects/%s/databases/(default)/document"", projectId))"
21603,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/firestore/FirestoreV1FnListDocumentsTest.java,62,,"            .setParent(String.format(""projects/%s/databases/(default)/document"", projectId))"
21604,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/firestore/FirestoreV1FnListDocumentsTest.java,70,,"                        ImmutableMap.of(""foo"", Value.newBuilder().setStringValue(""bar"").build()))"
21605,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/firestore/FirestoreV1FnListDocumentsTest.java,70,,"                        ImmutableMap.of(""foo"", Value.newBuilder().setStringValue(""bar"").build()))"
21606,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/firestore/FirestoreV1FnPartitionQueryTest.java,62,,"            .setParent(String.format(""projects/%s/databases/(default)/document"", projectId))"
21607,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/firestore/FirestoreV1FnRunQueryTest.java,111,,"            .setParent(String.format(""projects/%s/databases/(default)/document"", projectId))"
21608,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/firestore/RpcQosSimulationTest.java,187,,"    safeToProceedAndWithBudgetAndWrite(qos, t15m00s000ms, 500, 500, ""write 500 more"");"
21609,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/firestore/it/FirestoreV1IT.java,80,,"                    .putFields(""foo"", Value.newBuilder().setStringValue(docId).build()))"
21610,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIOLROIT.java,70,,"        healthcareDataset + ""/fhirStores/"" + fhirStoreId,"
21611,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIOSearchIT.java,94,,"        client, healthcareDataset + ""/fhirStores/"" + fhirStoreId, bundles);"
21612,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIOTest.java,70,,"            .apply(FhirIO.searchResources(""bad-store""));"
21613,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/healthcare/HL7V2MessagePagesTest.java,55,,"        .makeSendTimeBoundHL7v2ListRequest(""foo"", null, null, null, null, null);"
21614,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IOReadIT.java,71,,"    client.deleteHL7v2Store(healthcareDataset + ""/hl7V2Stores/"" + HL7V2_STORE_NAME);"
21615,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IOReadWriteIT.java,76,,"    client.deleteHL7v2Store(healthcareDataset + ""/hl7V2Stores/"" + INPUT_HL7V2_STORE_NAME);"
21616,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IOWriteIT.java,68,,"    client.deleteHL7v2Store(healthcareDataset + ""/hl7V2Stores/"" + HL7V2_STORE_NAME);"
21617,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/pubsub/NestedRowToMessageTest.java,53,,"    Row row = Row.withSchema(schema).attachValues(""abc"".getBytes(UTF_8), ATTRIBUTES);"
21618,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubClientTest.java,44,,"    Map<String, String> map = ImmutableMap.of(""myAttribute"", timestamp);"
21619,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubIOExternalTest.java,67,,"                        Field.of(""topic"", FieldType.STRING),"
21620,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubIOExternalTest.java,68,,"                        Field.of(""id_label"", FieldType.STRING),"
21621,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubIOTest.java,118,,"                    ""111111111111111111111111111111111111111111111111111111111111111111111111111111111"")"
21622,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubIOTest.java,150,,"    String topic = ""projects/project/topics/topic"";"
21623,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubIOTest.java,154,,"            .withTimestampAttribute(""myTimestamp"")"
21624,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubIOTest.java,155,,"            .withIdAttribute(""myId"");"
21625,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubIOTest.java,159,,"    assertThat(displayData, hasDisplayItem(""topic"", topic));"
21626,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubIOTest.java,160,,"    assertThat(displayData, hasDisplayItem(""timestampAttribute"", ""myTimestamp""));"
21627,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubIOTest.java,161,,"    assertThat(displayData, hasDisplayItem(""idAttribute"", ""myId""));"
21628,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubIOTest.java,166,,"    String subscription = ""projects/project/subscriptions/subscription"";"
21629,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubIOTest.java,433,,"    ByteString data = ByteString.copyFrom(""Hello, World!"".getBytes(StandardCharsets.UTF_8));"
21630,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubJsonClientTest.java,64,,"  private static final ProjectPath PROJECT = PubsubClient.projectPathFromId(""testProject"");"
21631,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubMessageToRowTest.java,66,,"            .addNullableField(""name"", FieldType.STRING)"
21632,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubMessageToRowTest.java,71,,"            .addDateTimeField(""event_timestamp"")"
21633,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubMessageToRowTest.java,72,,"            .addMapField(""attributes"", FieldType.STRING, FieldType.STRING)"
21634,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubMessageToRowTest.java,73,,"            .addRowField(""payload"", payloadSchema)"
21635,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubMessageToRowTest.java,79,,"                ""create"","
21636,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubMessageToRowTest.java,81,,"                    message(1, map(""attr"", ""val""), ""{ \""id\"" : 3, \""name\"" : \""foo\"" }""),"
21637,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubMessageToRowTest.java,81,,"                    message(1, map(""attr"", ""val""), ""{ \""id\"" : 3, \""name\"" : \""foo\"" }""),"
21638,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubMessageToRowTest.java,81,,"                    message(1, map(""attr"", ""val""), ""{ \""id\"" : 3, \""name\"" : \""foo\"" }""),"
21639,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubMessageToRowTest.java,82,,"                    message(2, map(""bttr"", ""vbl""), ""{ \""name\"" : \""baz\"", \""id\"" : 5 }""),"
21640,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubMessageToRowTest.java,82,,"                    message(2, map(""bttr"", ""vbl""), ""{ \""name\"" : \""baz\"", \""id\"" : 5 }""),"
21641,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubMessageToRowTest.java,82,,"                    message(2, map(""bttr"", ""vbl""), ""{ \""name\"" : \""baz\"", \""id\"" : 5 }""),"
21642,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubMessageToRowTest.java,83,,"                    message(3, map(""cttr"", ""vcl""), ""{ \""id\"" : 7, \""name\"" : \""bar\"" }""),"
21643,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubMessageToRowTest.java,83,,"                    message(3, map(""cttr"", ""vcl""), ""{ \""id\"" : 7, \""name\"" : \""bar\"" }""),"
21644,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubMessageToRowTest.java,84,,"                    message(4, map(""dttr"", ""vdl""), ""{ \""name\"" : \""qaz\"", \""id\"" : 8 }""),"
21645,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubMessageToRowTest.java,84,,"                    message(4, map(""dttr"", ""vdl""), ""{ \""name\"" : \""qaz\"", \""id\"" : 8 }""),"
21646,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubMessageToRowTest.java,87,,"                ""convert"","
21647,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubMessageToRowTest.java,98,,"                .addValues(ts(1), map(""attr"", ""val""), row(payloadSchema, 3, ""foo""))"
21648,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubMessageToRowTest.java,101,,"                .addValues(ts(2), map(""bttr"", ""vbl""), row(payloadSchema, 5, ""baz""))"
21649,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubMessageToRowTest.java,104,,"                .addValues(ts(3), map(""cttr"", ""vcl""), row(payloadSchema, 7, ""bar""))"
21650,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubMessageToRowTest.java,107,,"                .addValues(ts(4), map(""dttr"", ""vdl""), row(payloadSchema, 8, ""qaz""))"
21651,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubMessageToRowTest.java,176,,"                    message(1, map(""attr1"", ""val1""), ""{ \""invalid1\"" : \""sdfsd\"" }""),"
21652,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubMessageToRowTest.java,176,,"                    message(1, map(""attr1"", ""val1""), ""{ \""invalid1\"" : \""sdfsd\"" }""),"
21653,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubMessageToRowTest.java,176,,"                    message(1, map(""attr1"", ""val1""), ""{ \""invalid1\"" : \""sdfsd\"" }""),"
21654,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubMessageToRowTest.java,177,,"                    message(2, map(""attr2"", ""val2""), ""{ \""invalid2""),"
21655,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubMessageToRowTest.java,177,,"                    message(2, map(""attr2"", ""val2""), ""{ \""invalid2""),"
21656,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubMessageToRowTest.java,177,,"                    message(2, map(""attr2"", ""val2""), ""{ \""invalid2""),"
21657,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubUnboundedSourceTest.java,397,,"    TopicPath topicPath = PubsubClient.topicPathFromName(""my_project"", ""my_topic"");"
21658,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/FakeServiceFactory.java,45,,"  @GuardedBy(""lock"")"
21659,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/MutationKeyEncoderTest.java,48,,"    builder.addColumn(""test1"", ""key"", ""INT64"");"
21660,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/MutationKeyEncoderTest.java,48,,"    builder.addColumn(""test1"", ""key"", ""INT64"");"
21661,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/MutationKeyEncoderTest.java,48,,"    builder.addColumn(""test1"", ""key"", ""INT64"");"
21662,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/MutationKeyEncoderTest.java,51,,"    builder.addColumn(""test2"", ""key"", ""INT64"");"
21663,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/MutationKeyEncoderTest.java,72,,"    builder.addColumn(""test"", ""key"", ""INT64"");"
21664,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/MutationKeyEncoderTest.java,75,,"    builder.addColumn(""test"", ""keydesc"", ""INT64"");"
21665,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/MutationKeyEncoderTest.java,168,,"    builder.addColumn(""test"", ""key"", ""STRING"");"
21666,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/MutationKeyEncoderTest.java,234,,"                .to(ByteArray.fromBase64(""xxx""))"
21667,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/MutationKeyEncoderTest.java,360,,"    builder.addColumn(""test"", ""boolkey"", ""BOOL"");"
21668,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/MutationKeyEncoderTest.java,363,,"    builder.addColumn(""test"", ""boolkeydesc"", ""BOOL"");"
21669,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/MutationSizeEstimatorTest.java,40,,"    Mutation int64 = Mutation.newInsertOrUpdateBuilder(""test"").set(""one"").to(1).build();"
21670,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/MutationSizeEstimatorTest.java,40,,"    Mutation int64 = Mutation.newInsertOrUpdateBuilder(""test"").set(""one"").to(1).build();"
21671,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/MutationUtilsTest.java,39,,"  private static final Schema INT64_SCHEMA = Schema.builder().addInt64Field(""int64"").build();"
21672,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/MutationUtilsTest.java,49,,"          .addNullableField(""f_int64"", Schema.FieldType.INT64)"
21673,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/MutationUtilsTest.java,50,,"          .addNullableField(""f_float64"", Schema.FieldType.DOUBLE)"
21674,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/MutationUtilsTest.java,51,,"          .addNullableField(""f_string"", Schema.FieldType.STRING)"
21675,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/MutationUtilsTest.java,52,,"          .addNullableField(""f_bytes"", Schema.FieldType.BYTES)"
21676,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/MutationUtilsTest.java,53,,"          .addNullableField(""f_date_time"", Schema.FieldType.DATETIME)"
21677,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/MutationUtilsTest.java,54,,"          .addNullableField(""f_bool"", Schema.FieldType.BOOLEAN)"
21678,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/MutationUtilsTest.java,55,,"          .addNullableField(""f_struct"", Schema.FieldType.row(EMPTY_SCHEMA))"
21679,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/MutationUtilsTest.java,56,,"          .addNullableField(""f_struct_int64"", Schema.FieldType.row(INT64_SCHEMA))"
21680,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/MutationUtilsTest.java,57,,"          .addNullableField(""f_array"", Schema.FieldType.array(Schema.FieldType.INT64))"
21681,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/MutationUtilsTest.java,59,,"              ""f_struct_array"", Schema.FieldType.array(Schema.FieldType.row(INT64_SCHEMA)))"
21682,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/MutationUtilsTest.java,66,,"          .withFieldValue(""f_string"", ""donald_duck"")"
21683,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/MutationUtilsTest.java,67,,"          .withFieldValue(""f_bytes"", ""some_bytes"".getBytes(UTF_8))"
21684,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/OrderedCodeTest.java,233,,"      fail(""Expected IllegalArgumentException."");"
21685,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/ReadSpannerSchemaTest.java,54,,"        .set(""table_name"")"
21686,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/ReadSpannerSchemaTest.java,56,,"        .set(""column_name"")"
21687,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/ReadSpannerSchemaTest.java,134,,"    preparePkMetadata(tx, Arrays.asList(pkMetadata(""test"", ""key"", ""ASC"")));"
21688,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/ReadSpannerSchemaTest.java,134,,"    preparePkMetadata(tx, Arrays.asList(pkMetadata(""test"", ""key"", ""ASC"")));"
21689,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/SpannerAccessorTest.java,48,,"            .setProjectId(StaticValueProvider.of(""project""))"
21690,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/SpannerAccessorTest.java,49,,"            .setInstanceId(StaticValueProvider.of(""test1""))"
21691,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/SpannerAccessorTest.java,80,,"            .setInstanceId(StaticValueProvider.of(""test2""))"
21692,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIOReadTest.java,70,,"          Type.StructField.of(""id"", Type.int64()), Type.StructField.of(""name"", Type.string()));"
21693,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIOReadTest.java,95,,"            .withProjectId(""test"")"
21694,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIOReadTest.java,96,,"            .withInstanceId(""123"")"
21695,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIOReadTest.java,97,,"            .withDatabaseId(""aaa"")"
21696,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIOReadTest.java,102,,"            ""read q"","
21697,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIOReadTest.java,105,,"                .withQuery(""SELECT * FROM users"")"
21698,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIOReadTest.java,117,,"        FakePartitionFactory.createFakeQueryPartition(ByteString.copyFromUtf8(""one""));"
21699,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIOReadTest.java,149,,"                .withTable(""users"")"
21700,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIOWriteTest.java,121,,"    preparePkMetadata(tx, Arrays.asList(pkMetadata(""tEsT"", ""key"", ""ASC"")));"
21701,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIOWriteTest.java,121,,"    preparePkMetadata(tx, Arrays.asList(pkMetadata(""tEsT"", ""key"", ""ASC"")));"
21702,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIOWriteTest.java,135,,"        .set(""table_name"")"
21703,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIOWriteTest.java,137,,"        .set(""column_name"")"
21704,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIOWriteTest.java,233,,"            .withProjectId(""test-project"")"
21705,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIOWriteTest.java,234,,"            .withInstanceId(""test-instance"")"
21706,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIOWriteTest.java,235,,"            .withDatabaseId(""test-database"")"
21707,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIOWriteTest.java,672,,"    assertThat(data, hasDisplayItem(""groupingFactor"", ""100""));"
21708,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIOWriteTest.java,724,,"    Mutation all = Mutation.delete(""test"", KeySet.all());"
21709,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIOWriteTest.java,1145,,"            .setProjectId(StaticValueProvider.of(""project""))"
21710,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIOWriteTest.java,1146,,"            .setInstanceId(StaticValueProvider.of(""test1""))"
21711,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIOWriteTest.java,1185,,"            .setInstanceId(StaticValueProvider.of(""test2""))"
21712,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/SpannerSchemaTest.java,34,,"            .addColumn(""test"", ""pk"", ""STRING(48)"")"
21713,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/SpannerSchemaTest.java,52,,"            .addColumn(""other"", ""pk"", ""INT64"")"
21714,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/StructUtilsTest.java,45,,"  private static final Schema INT64_SCHEMA = Schema.builder().addInt64Field(""int64"").build();"
21715,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/StructUtilsTest.java,58,,"    Schema schema = Schema.builder().addInt64Field(""f_int64"").build();"
21716,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/StructUtilsTest.java,80,,"            .addDecimalField(""f_decimal"")"
21717,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/StructUtilsTest.java,152,,"        .addNullableField(""f_float64"", Schema.FieldType.DOUBLE)"
21718,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/StructUtilsTest.java,153,,"        .addNullableField(""f_string"", Schema.FieldType.STRING)"
21719,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/StructUtilsTest.java,154,,"        .addNullableField(""f_bytes"", Schema.FieldType.BYTES)"
21720,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/StructUtilsTest.java,155,,"        .addNullableField(""f_timestamp"", Schema.FieldType.DATETIME)"
21721,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/StructUtilsTest.java,156,,"        .addNullableField(""f_bool"", Schema.FieldType.BOOLEAN)"
21722,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/StructUtilsTest.java,157,,"        .addNullableField(""f_struct"", Schema.FieldType.row(EMPTY_SCHEMA))"
21723,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/StructUtilsTest.java,158,,"        .addNullableField(""f_struct_int64"", Schema.FieldType.row(INT64_SCHEMA))"
21724,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/StructUtilsTest.java,159,,"        .addNullableField(""f_array"", Schema.FieldType.array(Schema.FieldType.INT64))"
21725,./TargetProjects/beam/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/StructUtilsTest.java,161,,"            ""f_struct_array"", Schema.FieldType.array(Schema.FieldType.row(INT64_SCHEMA)));"
21726,./TargetProjects/beam/sdks/java/io/hadoop-common/src/test/java/org/apache/beam/sdk/io/hadoop/SerializableConfigurationTest.java,43,,"    conf.set(""hadoop.silly.test"", ""test-value"");"
21727,./TargetProjects/beam/sdks/java/io/hadoop-common/src/test/java/org/apache/beam/sdk/io/hadoop/SerializableConfigurationTest.java,43,,"    conf.set(""hadoop.silly.test"", ""test-value"");"
21728,./TargetProjects/beam/sdks/java/io/hadoop-file-system/src/main/java/org/apache/beam/sdk/io/hdfs/HadoopFileSystem.java,352,,"        throw new IOException(""Channel is closed"");"
21729,./TargetProjects/beam/sdks/java/io/hadoop-file-system/src/test/java/org/apache/beam/sdk/io/hdfs/HadoopFileSystemOptionsTest.java,60,,"            new AbstractMap.SimpleEntry<>(""propertyA"", ""A"")));"
21730,./TargetProjects/beam/sdks/java/io/hadoop-file-system/src/test/java/org/apache/beam/sdk/io/hdfs/HadoopFileSystemOptionsTest.java,64,,"            new AbstractMap.SimpleEntry<>(""propertyB"", ""B"")));"
21731,./TargetProjects/beam/sdks/java/io/hadoop-file-system/src/test/java/org/apache/beam/sdk/io/hdfs/HadoopFileSystemOptionsTest.java,78,,"        createPropertyData(""A""), tmpFolder.newFile(""core-site.xml""), StandardCharsets.UTF_8);"
21732,./TargetProjects/beam/sdks/java/io/hadoop-file-system/src/test/java/org/apache/beam/sdk/io/hdfs/HadoopFileSystemOptionsTest.java,80,,"        createPropertyData(""B""), tmpFolder.newFile(""hdfs-site.xml""), StandardCharsets.UTF_8);"
21733,./TargetProjects/beam/sdks/java/io/hadoop-file-system/src/test/java/org/apache/beam/sdk/io/hdfs/HadoopFileSystemOptionsTest.java,84,,"    environment.put(""HADOOP_CONF_DIR"", tmpFolder.getRoot().getAbsolutePath());"
21734,./TargetProjects/beam/sdks/java/io/hadoop-file-system/src/test/java/org/apache/beam/sdk/io/hdfs/HadoopFileSystemOptionsTest.java,96,,"    File hadoopConfDir = tmpFolder.newFolder(""hadoop"");"
21735,./TargetProjects/beam/sdks/java/io/hadoop-file-system/src/test/java/org/apache/beam/sdk/io/hdfs/HadoopFileSystemOptionsTest.java,129,,"    environment.put(""YARN_CONF_DIR"", tmpFolder.getRoot().getAbsolutePath());"
21736,./TargetProjects/beam/sdks/java/io/hadoop-file-system/src/test/java/org/apache/beam/sdk/io/hdfs/HadoopFileSystemTest.java,98,,"    create(""testFile"", bytes);"
21737,./TargetProjects/beam/sdks/java/io/hadoop-file-system/src/test/java/org/apache/beam/sdk/io/hdfs/HadoopFileSystemTest.java,123,,"    create(""testFileA"", ""testDataA"".getBytes(StandardCharsets.UTF_8));"
21738,./TargetProjects/beam/sdks/java/io/hadoop-file-system/src/test/java/org/apache/beam/sdk/io/hdfs/HadoopFileSystemTest.java,123,,"    create(""testFileA"", ""testDataA"".getBytes(StandardCharsets.UTF_8));"
21739,./TargetProjects/beam/sdks/java/io/hadoop-file-system/src/test/java/org/apache/beam/sdk/io/hdfs/HadoopFileSystemTest.java,124,,"    create(""testFileB"", ""testDataB"".getBytes(StandardCharsets.UTF_8));"
21740,./TargetProjects/beam/sdks/java/io/hadoop-file-system/src/test/java/org/apache/beam/sdk/io/hdfs/HadoopFileSystemTest.java,124,,"    create(""testFileB"", ""testDataB"".getBytes(StandardCharsets.UTF_8));"
21741,./TargetProjects/beam/sdks/java/io/hadoop-file-system/src/test/java/org/apache/beam/sdk/io/hdfs/HadoopFileSystemTest.java,144,,"    create(""testFileC"", ""testDataC"".getBytes(StandardCharsets.UTF_8));"
21742,./TargetProjects/beam/sdks/java/io/hadoop-file-system/src/test/java/org/apache/beam/sdk/io/hdfs/HadoopFileSystemTest.java,144,,"    create(""testFileC"", ""testDataC"".getBytes(StandardCharsets.UTF_8));"
21743,./TargetProjects/beam/sdks/java/io/hadoop-file-system/src/test/java/org/apache/beam/sdk/io/hdfs/HadoopFileSystemTest.java,177,,"    create(""testFileAA"", ""testDataAA"".getBytes(StandardCharsets.UTF_8));"
21744,./TargetProjects/beam/sdks/java/io/hadoop-file-system/src/test/java/org/apache/beam/sdk/io/hdfs/HadoopFileSystemTest.java,177,,"    create(""testFileAA"", ""testDataAA"".getBytes(StandardCharsets.UTF_8));"
21745,./TargetProjects/beam/sdks/java/io/hadoop-file-system/src/test/java/org/apache/beam/sdk/io/hdfs/HadoopFileSystemTest.java,211,,"            fileSystem.match(Collections.singletonList(testPath(""dir"").toString())));"
21746,./TargetProjects/beam/sdks/java/io/hadoop-file-system/src/test/java/org/apache/beam/sdk/io/hdfs/HadoopFileSystemTest.java,229,,"    create(""testFileBB"", ""testDataBB"".getBytes(StandardCharsets.UTF_8));"
21747,./TargetProjects/beam/sdks/java/io/hadoop-file-system/src/test/java/org/apache/beam/sdk/io/hdfs/HadoopFileSystemTest.java,270,,"    create(""1/testFile1"", ""testData1"".getBytes(StandardCharsets.UTF_8));"
21748,./TargetProjects/beam/sdks/java/io/hadoop-file-system/src/test/java/org/apache/beam/sdk/io/hdfs/HadoopFileSystemTest.java,271,,"    create(""1/A/testFile1A"", ""testData1A"".getBytes(StandardCharsets.UTF_8));"
21749,./TargetProjects/beam/sdks/java/io/hadoop-file-system/src/test/java/org/apache/beam/sdk/io/hdfs/HadoopFileSystemTest.java,271,,"    create(""1/A/testFile1A"", ""testData1A"".getBytes(StandardCharsets.UTF_8));"
21750,./TargetProjects/beam/sdks/java/io/hadoop-file-system/src/test/java/org/apache/beam/sdk/io/hdfs/HadoopFileSystemTest.java,272,,"    create(""1/A/A/testFile1AA"", ""testData1AA"".getBytes(StandardCharsets.UTF_8));"
21751,./TargetProjects/beam/sdks/java/io/hadoop-file-system/src/test/java/org/apache/beam/sdk/io/hdfs/HadoopFileSystemTest.java,272,,"    create(""1/A/A/testFile1AA"", ""testData1AA"".getBytes(StandardCharsets.UTF_8));"
21752,./TargetProjects/beam/sdks/java/io/hadoop-file-system/src/test/java/org/apache/beam/sdk/io/hdfs/HadoopFileSystemTest.java,273,,"    create(""1/B/testFile1B"", ""testData1B"".getBytes(StandardCharsets.UTF_8));"
21753,./TargetProjects/beam/sdks/java/io/hadoop-file-system/src/test/java/org/apache/beam/sdk/io/hdfs/HadoopFileSystemTest.java,273,,"    create(""1/B/testFile1B"", ""testData1B"".getBytes(StandardCharsets.UTF_8));"
21754,./TargetProjects/beam/sdks/java/io/hadoop-file-system/src/test/java/org/apache/beam/sdk/io/hdfs/HadoopFileSystemTest.java,367,,"        ImmutableList.of(testPath(""renameFileA""), testPath(""renameFileB"")));"
21755,./TargetProjects/beam/sdks/java/io/hadoop-file-system/src/test/java/org/apache/beam/sdk/io/hdfs/HadoopFileSystemTest.java,367,,"        ImmutableList.of(testPath(""renameFileA""), testPath(""renameFileB"")));"
21756,./TargetProjects/beam/sdks/java/io/hadoop-file-system/src/test/java/org/apache/beam/sdk/io/hdfs/HadoopFileSystemTest.java,455,,"    assertEquals(testPath(""dir/""), fileSystem.matchNewResource(testPath(""dir"").toString(), true));"
21757,./TargetProjects/beam/sdks/java/io/hadoop-format/src/main/java/org/apache/beam/sdk/io/hadoop/format/HadoopFormatIO.java,437,,"    @SuppressWarnings(""unchecked"")"
21758,./TargetProjects/beam/sdks/java/io/hadoop-format/src/main/java/org/apache/beam/sdk/io/hadoop/format/HadoopFormatIO.java,441,,"          TypeDescriptor.of(configuration.getClass(""mapreduce.job.inputformat.class"", null));"
21759,./TargetProjects/beam/sdks/java/io/hadoop-format/src/main/java/org/apache/beam/sdk/io/hadoop/format/HadoopFormatIO.java,443,,"          TypeDescriptor.of(configuration.getClass(""key.class"", null));"
21760,./TargetProjects/beam/sdks/java/io/hadoop-format/src/main/java/org/apache/beam/sdk/io/hadoop/format/HadoopFormatIO.java,445,,"          TypeDescriptor.of(configuration.getClass(""value.class"", null));"
21761,./TargetProjects/beam/sdks/java/io/hadoop-format/src/main/java/org/apache/beam/sdk/io/hadoop/format/HadoopFormatIO.java,470,,"      checkArgument(function != null, ""function can not be null"");"
21762,./TargetProjects/beam/sdks/java/io/hadoop-format/src/main/java/org/apache/beam/sdk/io/hadoop/format/HadoopFormatIO.java,558,,"            ""Configuration must contain \"""""
21763,./TargetProjects/beam/sdks/java/io/hadoop-format/src/main/java/org/apache/beam/sdk/io/hadoop/format/HadoopFormatIO.java,595,,"    @SuppressWarnings({""unchecked"", ""WeakerAccess""})"
21764,./TargetProjects/beam/sdks/java/io/hadoop-format/src/test/java/org/apache/beam/sdk/io/hadoop/format/HadoopFormatIOReadTest.java,175,,"        diffConf.get().getClass(""value.class"", Object.class),"
21765,./TargetProjects/beam/sdks/java/io/hadoop-format/src/test/java/org/apache/beam/sdk/io/hadoop/format/HadoopFormatIOReadTest.java,203,,"        serConf.get().getClass(""key.class"", Object.class),"
21766,./TargetProjects/beam/sdks/java/io/hadoop-format/src/test/java/org/apache/beam/sdk/io/hadoop/format/HadoopFormatIOReadTest.java,412,,"        ""mapreduce.job.inputformat.class"", EmployeeInputFormat.class, InputFormat.class);"
21767,./TargetProjects/beam/sdks/java/io/hadoop-format/src/test/java/org/apache/beam/sdk/io/hadoop/format/HadoopFormatIOWriteTest.java,118,,"        .apply(""Write"", writeWithWrongConfig);"
21768,./TargetProjects/beam/sdks/java/io/hbase/src/test/java/org/apache/beam/sdk/io/hbase/HBaseIOTest.java,128,,"    HBaseIO.Read read = HBaseIO.read().withConfiguration(conf).withTableId(""table"");"
21769,./TargetProjects/beam/sdks/java/io/hbase/src/test/java/org/apache/beam/sdk/io/hbase/HBaseIOTest.java,130,,"    assertNotNull(""configuration"", read.getConfiguration());"
21770,./TargetProjects/beam/sdks/java/io/hcatalog/src/test/java/org/apache/beam/sdk/io/hcatalog/HCatalogIOTest.java,245,,"                .withTable(""myowntable""));"
21771,./TargetProjects/beam/sdks/java/io/influxdb/src/test/java/org/apache/beam/sdk/io/influxdb/InfluxDbIOIT.java,130,,"    createRetentionPolicyInDB(options.getDatabaseName(), options, ""autogen"");"
21772,./TargetProjects/beam/sdks/java/io/influxdb/src/test/java/org/apache/beam/sdk/io/influxdb/InfluxDbIOIT.java,134,,"            ""Generate data"","
21773,./TargetProjects/beam/sdks/java/io/influxdb/src/test/java/org/apache/beam/sdk/io/influxdb/InfluxDbIOIT.java,137,,"            ""Write data to InfluxDB"","
21774,./TargetProjects/beam/sdks/java/io/influxdb/src/test/java/org/apache/beam/sdk/io/influxdb/InfluxDbIOIT.java,162,,"    PAssert.thatSingleton(values.apply(""Count All"", Count.globally()))"
21775,./TargetProjects/beam/sdks/java/io/influxdb/src/test/java/org/apache/beam/sdk/io/influxdb/InfluxDbIOIT.java,299,,"    createRetentionPolicyInDB(options.getDatabaseName(), options, ""test_rp"");"
21776,./TargetProjects/beam/sdks/java/io/influxdb/src/test/java/org/apache/beam/sdk/io/influxdb/InfluxDbIOTest.java,80,,"    String userName = ""admin"";"
21777,./TargetProjects/beam/sdks/java/io/jdbc/src/main/java/org/apache/beam/sdk/io/jdbc/JdbcIO.java,594,,"      checkArgument(query != null, ""query can not be null"");"
21778,./TargetProjects/beam/sdks/java/io/jdbc/src/main/java/org/apache/beam/sdk/io/jdbc/JdbcIO.java,631,,"          ""withDataSourceConfiguration() or withDataSourceProviderFn() is required"");"
21779,./TargetProjects/beam/sdks/java/io/jdbc/src/test/java/org/apache/beam/sdk/io/jdbc/JdbcIOIT.java,162,,"          long writeStart = reader.getStartTimeMetric(""write_time"");"
21780,./TargetProjects/beam/sdks/java/io/jdbc/src/test/java/org/apache/beam/sdk/io/jdbc/JdbcIOIT.java,182,,"          long readStart = reader.getStartTimeMetric(""read_time"");"
21781,./TargetProjects/beam/sdks/java/io/jdbc/src/test/java/org/apache/beam/sdk/io/jdbc/JdbcIOTest.java,224,,"    PAssert.thatSingleton(rows.apply(""Count All"", Count.globally()))"
21782,./TargetProjects/beam/sdks/java/io/jdbc/src/test/java/org/apache/beam/sdk/io/jdbc/JdbcIOTest.java,239,,"                .withQuery(String.format(""select name,id from %s where name = ?"", READ_TABLE_NAME))"
21783,./TargetProjects/beam/sdks/java/io/jdbc/src/test/java/org/apache/beam/sdk/io/jdbc/JdbcIOTest.java,266,,"            Schema.Field.of(""NAME"", LogicalTypes.variableLengthString(JDBCType.VARCHAR, 500))"
21784,./TargetProjects/beam/sdks/java/io/jdbc/src/test/java/org/apache/beam/sdk/io/jdbc/JdbcIOTest.java,556,,"    insertStatement.setString(2, ""TEST"");"
21785,./TargetProjects/beam/sdks/java/io/jdbc/src/test/java/org/apache/beam/sdk/io/jdbc/SchemaUtilTest.java,65,,"            JdbcFieldInfo.of(""date_col"", Types.DATE),"
21786,./TargetProjects/beam/sdks/java/io/jdbc/src/test/java/org/apache/beam/sdk/io/jdbc/SchemaUtilTest.java,71,,"            JdbcFieldInfo.of(""longvarchar_col"", Types.LONGVARCHAR, 1024),"
21787,./TargetProjects/beam/sdks/java/io/jdbc/src/test/java/org/apache/beam/sdk/io/jdbc/SchemaUtilTest.java,78,,"            JdbcFieldInfo.of(""time_col"", Types.TIME),"
21788,./TargetProjects/beam/sdks/java/io/jdbc/src/test/java/org/apache/beam/sdk/io/jdbc/SchemaUtilTest.java,83,,"            JdbcFieldInfo.of(""varchar_col"", Types.VARCHAR, 255));"
21789,./TargetProjects/beam/sdks/java/io/jdbc/src/test/java/org/apache/beam/sdk/io/jdbc/SchemaUtilTest.java,161,,"    when(mockResultSet.getBytes(eq(2))).thenReturn(""binary"".getBytes(Charset.forName(""UTF-8"")));"
21790,./TargetProjects/beam/sdks/java/io/jdbc/src/test/java/org/apache/beam/sdk/io/jdbc/SchemaUtilTest.java,235,,"            + ""  \""type\"": {"""
21791,./TargetProjects/beam/sdks/java/io/jdbc/src/test/java/org/apache/beam/sdk/io/jdbc/SchemaUtilTest.java,239,,"            + ""  }"""
21792,./TargetProjects/beam/sdks/java/io/jdbc/src/test/java/org/apache/beam/sdk/io/jdbc/SchemaUtilTest.java,240,,"            + "" }, {"""
21793,./TargetProjects/beam/sdks/java/io/jdbc/src/test/java/org/apache/beam/sdk/io/jdbc/SchemaUtilTest.java,371,,"            Schema.Field.of(""name"", Schema.FieldType.STRING),"
21794,./TargetProjects/beam/sdks/java/io/kafka/src/main/java/org/apache/beam/sdk/io/kafka/KafkaIO.java,524,,"  ""rawtypes"", // TODO(https://issues.apache.org/jira/browse/BEAM-10556)"
21795,./TargetProjects/beam/sdks/java/io/kafka/src/test/java/org/apache/beam/sdk/io/kafka/KafkaIOExternalTest.java,113,,"                        Field.of(""topics"", FieldType.array(FieldType.STRING)),"
21796,./TargetProjects/beam/sdks/java/io/kafka/src/test/java/org/apache/beam/sdk/io/kafka/KafkaIOExternalTest.java,115,,"                            ""consumer_config"", FieldType.map(FieldType.STRING, FieldType.STRING)),"
21797,./TargetProjects/beam/sdks/java/io/kafka/src/test/java/org/apache/beam/sdk/io/kafka/KafkaIOExternalTest.java,116,,"                        Field.of(""key_deserializer"", FieldType.STRING),"
21798,./TargetProjects/beam/sdks/java/io/kafka/src/test/java/org/apache/beam/sdk/io/kafka/KafkaIOExternalTest.java,117,,"                        Field.of(""value_deserializer"", FieldType.STRING),"
21799,./TargetProjects/beam/sdks/java/io/kafka/src/test/java/org/apache/beam/sdk/io/kafka/KafkaIOExternalTest.java,118,,"                        Field.of(""start_read_time"", FieldType.INT64),"
21800,./TargetProjects/beam/sdks/java/io/kafka/src/test/java/org/apache/beam/sdk/io/kafka/KafkaIOExternalTest.java,119,,"                        Field.of(""commit_offset_in_finalize"", FieldType.BOOLEAN),"
21801,./TargetProjects/beam/sdks/java/io/kafka/src/test/java/org/apache/beam/sdk/io/kafka/KafkaIOExternalTest.java,120,,"                        Field.of(""timestamp_policy"", FieldType.STRING)))"
21802,./TargetProjects/beam/sdks/java/io/kafka/src/test/java/org/apache/beam/sdk/io/kafka/KafkaIOTest.java,378,,"            .withBootstrapServers(""myServer1:9092,myServer2:9092"")"
21803,./TargetProjects/beam/sdks/java/io/kafka/src/test/java/org/apache/beam/sdk/io/kafka/KafkaIOTest.java,434,,"    String topic = ""my_topic"";"
21804,./TargetProjects/beam/sdks/java/io/kafka/src/test/java/org/apache/beam/sdk/io/kafka/KafkaIOTest.java,443,,"              new AvroGeneratedUser(""KeyName"" + i, i, ""color"" + i),"
21805,./TargetProjects/beam/sdks/java/io/kafka/src/test/java/org/apache/beam/sdk/io/kafka/KafkaIOTest.java,549,,"            .withBootstrapServers(""none"")"
21806,./TargetProjects/beam/sdks/java/io/kafka/src/test/java/org/apache/beam/sdk/io/kafka/KafkaIOTest.java,593,,"                    .withTopicPartitions(ImmutableList.of(new TopicPartition(""test"", 0)))"
21807,./TargetProjects/beam/sdks/java/io/kafka/src/test/java/org/apache/beam/sdk/io/kafka/KafkaIOTest.java,738,,"            .apply(""TimestampDiff"", ParDo.of(new ElementValueDiff()))"
21808,./TargetProjects/beam/sdks/java/io/kafka/src/test/java/org/apache/beam/sdk/io/kafka/KafkaIOTest.java,739,,"            .apply(""DistinctTimestamps"", Distinct.create());"
21809,./TargetProjects/beam/sdks/java/io/kafka/src/test/java/org/apache/beam/sdk/io/kafka/WatchKafkaTopicPartitionDoFnTest.java,74,,"                ""topic1"","
21810,./TargetProjects/beam/sdks/java/io/kafka/src/test/java/org/apache/beam/sdk/io/kafka/WatchKafkaTopicPartitionDoFnTest.java,78,,"                ""topic2"","
21811,./TargetProjects/beam/sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/AmazonKinesisMock.java,199,,"      throw new RuntimeException(""Not implemented"");"
21812,./TargetProjects/beam/sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisMockWriteTest.java,65,,"    properties.setProperty(""KinesisPort"", ""4567"");"
21813,./TargetProjects/beam/sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisProducerMock.java,56,,"    throw new UnsupportedOperationException(""Not implemented"");"
21814,./TargetProjects/beam/sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisReaderTest.java,141,,"    when(kinesisSource.getStreamName()).thenReturn(""stream1"");"
21815,./TargetProjects/beam/sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/ShardCheckpointTest.java,73,,"    assertThat(checkpoint(AT_SEQUENCE_NUMBER, ""100"", null).getShardIterator(client))"
21816,./TargetProjects/beam/sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/ShardReadersPoolTest.java,67,,"    when(a.getShardId()).thenReturn(""shard1"");"
21817,./TargetProjects/beam/sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/ShardReadersPoolTest.java,69,,"    when(c.getShardId()).thenReturn(""shard2"");"
21818,./TargetProjects/beam/sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/ShardReadersPoolTest.java,72,,"    when(firstCheckpoint.getStreamName()).thenReturn(""testStream"");"
21819,./TargetProjects/beam/sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/SimplifiedKinesisClientTest.java,482,,"    Instant countSince = new Instant(""2017-04-06T10:00:00.000Z"");"
21820,./TargetProjects/beam/sdks/java/io/mongodb/src/main/java/org/apache/beam/sdk/io/mongodb/MongoDbIO.java,456,,"            splitVectorCommand.append(""keyPattern"", new BasicDBObject().append(""_id"", 1));"
21821,./TargetProjects/beam/sdks/java/io/mongodb/src/main/java/org/apache/beam/sdk/io/mongodb/MongoDbIO.java,542,,"          filters.add(String.format(""%s ]}"", rangeFilter));"
21822,./TargetProjects/beam/sdks/java/io/mongodb/src/test/java/org/apache/beam/sdk/io/mongodb/MongoDBGridFSIOTest.java,187,,"            MongoDbGridFSIO.read().withUri(""mongodb://localhost:"" + port).withDatabase(DATABASE));"
21823,./TargetProjects/beam/sdks/java/io/mongodb/src/test/java/org/apache/beam/sdk/io/mongodb/MongoDbIOTest.java,123,,"    documents.add(new Document(""_id"", 56));"
21824,./TargetProjects/beam/sdks/java/io/mongodb/src/test/java/org/apache/beam/sdk/io/mongodb/MongoDbIOTest.java,181,,"            new BsonDocument(""country"", new BsonDocument(""$eq"", new BsonString(""England"")))));"
21825,./TargetProjects/beam/sdks/java/io/mongodb/src/test/java/org/apache/beam/sdk/io/mongodb/MongoDbIOTest.java,181,,"            new BsonDocument(""country"", new BsonDocument(""$eq"", new BsonString(""England"")))));"
21826,./TargetProjects/beam/sdks/java/io/mongodb/src/test/java/org/apache/beam/sdk/io/mongodb/MongoDbIOTest.java,185,,"            .withUri(""mongodb://localhost:"" + port)"
21827,./TargetProjects/beam/sdks/java/io/mongodb/src/test/java/org/apache/beam/sdk/io/mongodb/MongoDbIOTest.java,257,,"                .withQueryFn(FindQuery.create().withFilters(Filters.eq(""scientist"", ""Einstein""))));"
21828,./TargetProjects/beam/sdks/java/io/mongodb/src/test/java/org/apache/beam/sdk/io/mongodb/MongoDbIOTest.java,259,,"    PAssert.thatSingleton(output.apply(""Count"", Count.globally())).isEqualTo(100L);"
21829,./TargetProjects/beam/sdks/java/io/mqtt/src/test/java/org/apache/beam/sdk/io/mqtt/MqttIOTest.java,89,,"                MqttIO.ConnectionConfiguration.create(""tcp://localhost:"" + port, topicName))"
21830,./TargetProjects/beam/sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java,375,,"      checkArgument(configuration != null, ""configuration can not be null"");"
21831,./TargetProjects/beam/sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java,436,,"          .add(DisplayData.item(""splittable"", isSplittable()))"
21832,./TargetProjects/beam/sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java,442,,"          if (entry.getKey().startsWith(""parquet"")) {"
21833,./TargetProjects/beam/sdks/java/io/rabbitmq/src/test/java/org/apache/beam/sdk/io/rabbitmq/RabbitMqIOTest.java,88,,"    defaultPort = System.getProperty(""qpid.amqp_port"");"
21834,./TargetProjects/beam/sdks/java/io/rabbitmq/src/test/java/org/apache/beam/sdk/io/rabbitmq/RabbitMqIOTest.java,121,,"                .withUri(""amqp://guest:guest@localhost:"" + port)"
21835,./TargetProjects/beam/sdks/java/io/rabbitmq/src/test/java/org/apache/beam/sdk/io/rabbitmq/RabbitMqIOTest.java,189,,"    String exchangeType = Optional.ofNullable(read.exchangeType()).orElse(""fanout"");"
21836,./TargetProjects/beam/sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/SnowflakeIO.java,179,,"  ""rawtypes"", // TODO(https://issues.apache.org/jira/browse/BEAM-10556)"
21837,./TargetProjects/beam/sdks/java/io/snowflake/src/test/java/org/apache/beam/sdk/io/snowflake/test/unit/DataSourceConfigurationTest.java,176,,"    assertEquals(""Missing credentials values. Please check your credentials"", ex.getMessage());"
21838,./TargetProjects/beam/sdks/java/io/snowflake/src/test/java/org/apache/beam/sdk/io/snowflake/test/unit/data/SnowflakeDataTypeValidTest.java,72,,"          {SnowflakeDateTime.of(), ""TIMESTAMP_NTZ""},"
21839,./TargetProjects/beam/sdks/java/io/snowflake/src/test/java/org/apache/beam/sdk/io/snowflake/test/unit/write/CreateDispositionTest.java,103,,"            ""Copy IO"","
21840,./TargetProjects/beam/sdks/java/io/snowflake/src/test/java/org/apache/beam/sdk/io/snowflake/test/unit/write/CreateDispositionTest.java,110,,"                .withFileNameTemplate(""output"")"
21841,./TargetProjects/beam/sdks/java/io/snowflake/src/test/java/org/apache/beam/sdk/io/snowflake/test/unit/write/CreateDispositionTest.java,134,,"                .to(""NO_EXIST_TABLE"")"
21842,./TargetProjects/beam/sdks/java/io/snowflake/src/test/java/org/apache/beam/sdk/io/snowflake/test/unit/write/SchemaDispositionTest.java,127,,"                .to(""NO_EXIST_TABLE"")"
21843,./TargetProjects/beam/sdks/java/io/snowflake/src/test/java/org/apache/beam/sdk/io/snowflake/test/unit/write/SnowflakeIOWriteTest.java,108,,"            ""Write SnowflakeIO"","
21844,./TargetProjects/beam/sdks/java/io/snowflake/src/test/java/org/apache/beam/sdk/io/snowflake/test/unit/write/StreamingWriteTest.java,111,,"            .withSchema(""PUBLIC"")"
21845,./TargetProjects/beam/sdks/java/io/snowflake/src/test/java/org/apache/beam/sdk/io/snowflake/test/unit/write/StreamingWriteTest.java,112,,"            .withDatabase(""DATABASE"")"
21846,./TargetProjects/beam/sdks/java/io/snowflake/src/test/java/org/apache/beam/sdk/io/snowflake/test/unit/write/StreamingWriteTest.java,113,,"            .withWarehouse(""WAREHOUSE"");"
21847,./TargetProjects/beam/sdks/java/io/solr/src/test/java/org/apache/beam/sdk/io/solr/SolrIOTest.java,306,,"    assertTrue(DEFAULT_RETRY_PREDICATE.test(new IOException(""test"")));"
21848,./TargetProjects/beam/sdks/java/io/splunk/src/test/java/org/apache/beam/sdk/io/splunk/HttpEventPublisherTest.java,69,,"            .withUrl(""http://example.com"")"
21849,./TargetProjects/beam/sdks/java/io/splunk/src/test/java/org/apache/beam/sdk/io/splunk/HttpEventPublisherTest.java,70,,"            .withToken(""test-token"")"
21850,./TargetProjects/beam/sdks/java/io/splunk/src/test/java/org/apache/beam/sdk/io/splunk/SplunkEventWriterTest.java,89,,"        SplunkEventWriter.newBuilder().withUrl(""test-url"").withToken(""test-token"").build();"
21851,./TargetProjects/beam/sdks/java/io/thrift/src/test/java/org/apache/beam/sdk/io/thrift/TestThriftStruct.java,1317,,"      sb.append(""null"");"
21852,./TargetProjects/beam/sdks/java/io/thrift/src/test/java/org/apache/beam/sdk/io/thrift/ThriftPayloadSerializerProviderTest.java,74,,"                ImmutableMap.of(""thriftClass"", """", ""thriftProtocolFactoryClass"", """")));"
21853,./TargetProjects/beam/sdks/java/io/thrift/src/test/java/org/apache/beam/sdk/io/thrift/ThriftPayloadSerializerProviderTest.java,74,,"                ImmutableMap.of(""thriftClass"", """", ""thriftProtocolFactoryClass"", """")));"
21854,./TargetProjects/beam/sdks/java/io/thrift/src/test/java/org/apache/beam/sdk/io/thrift/ThriftSchemaTest.java,109,,"    assertEquals(TypeName.LOGICAL_TYPE, schema.getField(""testEnum"").getType().getTypeName());"
21855,./TargetProjects/beam/sdks/java/io/tika/src/test/java/org/apache/beam/sdk/io/tika/ParseResultTest.java,35,,"    ParseResult successBase = ParseResult.success(""a.txt"", ""hello"", getMetadata());"
21856,./TargetProjects/beam/sdks/java/io/tika/src/test/java/org/apache/beam/sdk/io/tika/ParseResultTest.java,35,,"    ParseResult successBase = ParseResult.success(""a.txt"", ""hello"", getMetadata());"
21857,./TargetProjects/beam/sdks/java/io/tika/src/test/java/org/apache/beam/sdk/io/tika/ParseResultTest.java,37,,"    ParseResult successDifferentName = ParseResult.success(""b.txt"", ""hello"", getMetadata());"
21858,./TargetProjects/beam/sdks/java/io/xml/src/test/java/org/apache/beam/sdk/io/xml/JAXBCoderTest.java,103,,"    byte[] encoded = CoderUtils.encodeToByteArray(coder, new TestType(""abc"", 9999));"
21859,./TargetProjects/beam/sdks/java/io/xml/src/test/java/org/apache/beam/sdk/io/xml/XmlIOTest.java,95,,"                        .via(XmlIO.sink(Bird.class).withRootElement(""birds"").withCharset(charset))"
21860,./TargetProjects/beam/sdks/java/io/xml/src/test/java/org/apache/beam/sdk/io/xml/XmlIOTest.java,107,,"                        .withRecordElement(""bird"")"
21861,./TargetProjects/beam/sdks/java/io/xml/src/test/java/org/apache/beam/sdk/io/xml/XmlSourceTest.java,82,,"      ""<trains>"""
21862,./TargetProjects/beam/sdks/java/io/xml/src/test/java/org/apache/beam/sdk/io/xml/XmlSourceTest.java,89,,"          + ""</trains>"";"
21863,./TargetProjects/beam/sdks/java/io/xml/src/test/java/org/apache/beam/sdk/io/xml/XmlSourceTest.java,93,,"          + ""<train/>"""
21864,./TargetProjects/beam/sdks/java/io/xml/src/test/java/org/apache/beam/sdk/io/xml/XmlSourceTest.java,262,,"      ""Thomas"", ""Henry"", ""Gordon"", ""Emily"", ""Toby"", ""Percy"", ""Mavis"", ""Edward"", ""Bertie"", ""Harold"","
21865,./TargetProjects/beam/sdks/java/io/xml/src/test/java/org/apache/beam/sdk/io/xml/XmlSourceTest.java,262,,"      ""Thomas"", ""Henry"", ""Gordon"", ""Emily"", ""Toby"", ""Percy"", ""Mavis"", ""Edward"", ""Bertie"", ""Harold"","
21866,./TargetProjects/beam/sdks/java/io/xml/src/test/java/org/apache/beam/sdk/io/xml/XmlSourceTest.java,262,,"      ""Thomas"", ""Henry"", ""Gordon"", ""Emily"", ""Toby"", ""Percy"", ""Mavis"", ""Edward"", ""Bertie"", ""Harold"","
21867,./TargetProjects/beam/sdks/java/io/xml/src/test/java/org/apache/beam/sdk/io/xml/XmlSourceTest.java,262,,"      ""Thomas"", ""Henry"", ""Gordon"", ""Emily"", ""Toby"", ""Percy"", ""Mavis"", ""Edward"", ""Bertie"", ""Harold"","
21868,./TargetProjects/beam/sdks/java/io/xml/src/test/java/org/apache/beam/sdk/io/xml/XmlSourceTest.java,262,,"      ""Thomas"", ""Henry"", ""Gordon"", ""Emily"", ""Toby"", ""Percy"", ""Mavis"", ""Edward"", ""Bertie"", ""Harold"","
21869,./TargetProjects/beam/sdks/java/io/xml/src/test/java/org/apache/beam/sdk/io/xml/XmlSourceTest.java,262,,"      ""Thomas"", ""Henry"", ""Gordon"", ""Emily"", ""Toby"", ""Percy"", ""Mavis"", ""Edward"", ""Bertie"", ""Harold"","
21870,./TargetProjects/beam/sdks/java/io/xml/src/test/java/org/apache/beam/sdk/io/xml/XmlSourceTest.java,266,,"    String[] colors = {""red"", ""blue"", ""green"", ""orange"", ""brown"", ""black"", ""white""};"
21871,./TargetProjects/beam/sdks/java/io/xml/src/test/java/org/apache/beam/sdk/io/xml/XmlSourceTest.java,266,,"    String[] colors = {""red"", ""blue"", ""green"", ""orange"", ""brown"", ""black"", ""white""};"
21872,./TargetProjects/beam/sdks/java/io/xml/src/test/java/org/apache/beam/sdk/io/xml/XmlSourceTest.java,266,,"    String[] colors = {""red"", ""blue"", ""green"", ""orange"", ""brown"", ""black"", ""white""};"
21873,./TargetProjects/beam/sdks/java/io/xml/src/test/java/org/apache/beam/sdk/io/xml/XmlSourceTest.java,266,,"    String[] colors = {""red"", ""blue"", ""green"", ""orange"", ""brown"", ""black"", ""white""};"
21874,./TargetProjects/beam/sdks/java/io/xml/src/test/java/org/apache/beam/sdk/io/xml/XmlSourceTest.java,267,,"    String[] sizes = {""small"", ""medium"", ""big""};"
21875,./TargetProjects/beam/sdks/java/io/xml/src/test/java/org/apache/beam/sdk/io/xml/XmlSourceTest.java,323,,"    File file = tempFolder.newFile(""trainXMLTiny"");"
21876,./TargetProjects/beam/sdks/java/io/xml/src/test/java/org/apache/beam/sdk/io/xml/XmlSourceTest.java,329,,"            .withRootElement(""trains"")"
21877,./TargetProjects/beam/sdks/java/io/xml/src/test/java/org/apache/beam/sdk/io/xml/XmlSourceTest.java,330,,"            .withRecordElement(""train"")"
21878,./TargetProjects/beam/sdks/java/io/xml/src/test/java/org/apache/beam/sdk/io/xml/XmlSourceTest.java,452,,"    File file = tempFolder.newFile(""trainXMLSmall"");"
21879,./TargetProjects/beam/sdks/java/io/xml/src/test/java/org/apache/beam/sdk/io/xml/XmlSourceTest.java,748,,"    String fileName = ""temp.xml"";"
21880,./TargetProjects/beam/sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/NexmarkLauncher.java,280,,"    long eventStart = eventMetrics.getStartTimeMetric(eventMonitor.prefix + "".processingTime"");"
21881,./TargetProjects/beam/sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/NexmarkLauncher.java,606,,"    throw new RuntimeException(""Unrecognized enum "" + options.getResourceNameMode());"
21882,./TargetProjects/beam/sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/NexmarkLauncher.java,860,,"        AvroIO.write(Event.class).to(filename + ""/event"").withSuffix("".avro""));"
21883,./TargetProjects/beam/sdks/java/testing/nexmark/src/test/java/org/apache/beam/sdk/nexmark/queries/SqlQueryTest.java,199,,"      throw new UnsupportedOperationException(""Query7 is not implemented for ZetaSQL"");"
21884,./TargetProjects/beam/sdks/java/testing/nexmark/src/test/java/org/apache/beam/sdk/nexmark/queries/SqlQueryTest.java,204,,"    @Ignore(""Query1 is not implemented for ZetaSQL"")"
21885,./TargetProjects/beam/sdks/java/testing/test-utils/src/test/java/org/apache/beam/sdk/testutils/metrics/MetricsReaderTest.java,68,,"    assertEquals(1, reader.getStartTimeMetric(""timeDist""));"
21886,./TargetProjects/beam/sdks/java/testing/test-utils/src/test/java/org/apache/beam/sdk/testutils/publishing/BigQueryResultsPublisherTest.java,49,,"            .put(""field1"", ""string"")"
21887,./TargetProjects/beam/sdks/java/testing/tpcds/src/test/java/org/apache/beam/sdk/tpcds/QueryReaderTest.java,64,,"    String query3StringNoSpaces = query3String.replaceAll(""\\s+"", """");"
21888,./TargetProjects/bigtop/bigtop-bigpetstore/bigpetstore-mapreduce/src/integrationTest/java/org/apache/bigtop/bigpetstore/ITUtils.java,87,,"		if (conf.get(""mapreduce.jobtracker.address"") == null) {"
21889,./TargetProjects/bigtop/bigtop-bigpetstore/bigpetstore-transaction-queue/src/main/java/org/apache/bigtop/bigpetstore/qstream/LoadGenFactory.java,68,,"            System.err.println(""Unable to parse '"" + args[1] + ""' as an integer for nStores.\n"");"
21890,./TargetProjects/bigtop/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/cli/Driver.java,94,,"			System.err.println(""Unable to parse '"" + args[i] + ""' as an integer for nStores.\n"");"
21891,./TargetProjects/bigtop/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/cli/Simulation.java,80,,"		System.out.println(""Generated "" + stores.size() + "" stores"");"
21892,./TargetProjects/bigtop/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/products/ProductCategoryBuilder.java,161,,"				throw new IllegalStateException(""Product must have field "" + Constants.PRODUCT_CATEGORY);"
21893,./TargetProjects/bigtop/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/products/collections/MediumProductCollection.java,47,,"		builder.addPropertyValues(""brand"","
21894,./TargetProjects/bigtop/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/products/collections/MediumProductCollection.java,50,,"				new ProductFieldValue(""Dog Days"", 1.0, 1.0),"
21895,./TargetProjects/bigtop/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/products/collections/MediumProductCollection.java,51,,"				new ProductFieldValue(""Chef Corgi"", 0.0, 1.0));"
21896,./TargetProjects/bigtop/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/products/collections/MediumProductCollection.java,53,,"		builder.addPropertyValues(""meat"","
21897,./TargetProjects/bigtop/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/products/collections/MediumProductCollection.java,74,,"		builder.addPropertyValues(""organic"","
21898,./TargetProjects/bigtop/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/products/collections/MediumProductCollection.java,75,,"				new ProductFieldValue(""false"", 0.0, 1.0),"
21899,./TargetProjects/bigtop/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/products/collections/MediumProductCollection.java,76,,"				new ProductFieldValue(""true"", 0.0, 1.1));"
21900,./TargetProjects/bigtop/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/products/collections/MediumProductCollection.java,78,,"		builder.addPropertyValues(""quantity"","
21901,./TargetProjects/bigtop/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/products/collections/SmallProductCollection.java,43,,"		builder.addPropertyValues(""brand"","
21902,./TargetProjects/bigtop/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/products/collections/SmallProductCollection.java,54,,"		builder.addPropertyValues(""quantity"","
21903,./TargetProjects/bigtop/bigtop-data-generators/bigpetstore-data-generator/src/test/java/org/apache/bigtop/datagenerators/bigpetstore/datamodels/TestProduct.java,36,,"		fields.put(Constants.PRODUCT_CATEGORY, ""poop bags"");"
21904,./TargetProjects/bigtop/bigtop-data-generators/bigpetstore-data-generator/src/test/java/org/apache/bigtop/datagenerators/bigpetstore/datamodels/TestProduct.java,38,,"		fields.put(""price"", 12.80);"
21905,./TargetProjects/bigtop/bigtop-data-generators/bigpetstore-data-generator/src/test/java/org/apache/bigtop/datagenerators/bigpetstore/generators/products/cartesian/TestCartesianProductBase.java,31,,"		Iterator<Map<String, Double>> iter = new CartesianProductBase<Double>(""count"","
21906,./TargetProjects/bigtop/bigtop-data-generators/bigpetstore-data-generator/src/test/java/org/apache/bigtop/datagenerators/bigpetstore/generators/products/cartesian/TestCartesianProductField.java,34,,"				""children"", Arrays.asList(""1"", ""2""),"
21907,./TargetProjects/bigtop/bigtop-data-generators/bigpetstore-data-generator/src/test/java/org/apache/bigtop/datagenerators/bigpetstore/generators/products/cartesian/TestCartesianProductField.java,36,,"							""animal"", Arrays.asList(""cat"", ""dog"")));"
21908,./TargetProjects/bigtop/bigtop-data-generators/bigpetstore-data-generator/src/test/java/org/apache/bigtop/datagenerators/bigpetstore/generators/purchase/TestProductCategoryMarkovModelSampler.java,52,,"		foodBuilder.setCategory(""dogFood"");"
21909,./TargetProjects/bigtop/bigtop-data-generators/bigpetstore-data-generator/src/test/java/org/apache/bigtop/datagenerators/bigpetstore/generators/purchase/TestProductCategoryMarkovModelSampler.java,54,,"				Constants.PRODUCT_QUANTITY, (Object) 60.0, ""Flavor"", ""Fish & Potato"")));"
21910,./TargetProjects/bigtop/bigtop-data-generators/bigpetstore-data-generator/src/test/java/org/apache/bigtop/datagenerators/bigpetstore/generators/purchase/TestProductCategoryMarkovModelSampler.java,66,,"		bagBuilder.setCategory(""Poop Bags"");"
21911,./TargetProjects/bigtop/bigtop-data-generators/bigpetstore-data-generator/src/test/java/org/apache/bigtop/datagenerators/bigpetstore/generators/purchase/TestPurchasingModelSampler.java,49,,"		foodBuilder.setCategory(""dogFood"");"
21912,./TargetProjects/bigtop/bigtop-data-generators/bigpetstore-data-generator/src/test/java/org/apache/bigtop/datagenerators/bigpetstore/generators/purchase/TestPurchasingModelSampler.java,63,,"		bagBuilder.setCategory(""Poop Bags"");"
21913,./TargetProjects/bigtop/bigtop-data-generators/bigpetstore-data-generator/src/test/java/org/apache/bigtop/datagenerators/bigpetstore/generators/purchase/TestPurchasingModelSamplerBuilder.java,49,,"		foodBuilder.setCategory(""dogFood"");"
21914,./TargetProjects/bigtop/bigtop-data-generators/bigpetstore-data-generator/src/test/java/org/apache/bigtop/datagenerators/bigpetstore/generators/purchase/TestPurchasingModelSamplerBuilder.java,63,,"		bagBuilder.setCategory(""Poop Bags"");"
21915,./TargetProjects/bigtop/bigtop-data-generators/bigpetstore-data-generator/src/test/java/org/apache/bigtop/datagenerators/bigpetstore/generators/purchase/TestPurchasingProcesses.java,43,,"			fields.put(Constants.PRODUCT_CATEGORY, ""dog food"");"
21916,./TargetProjects/bigtop/bigtop-data-generators/bigpetstore-data-generator/src/test/java/org/apache/bigtop/datagenerators/bigpetstore/generators/transaction/TestCustomerInventory.java,56,,"		builder.setCategory(""dog food"");"
21917,./TargetProjects/bigtop/bigtop-data-generators/bigpetstore-data-generator/src/test/java/org/apache/bigtop/datagenerators/bigpetstore/generators/transaction/TestCustomerInventoryBuilder.java,56,,"		builder.setCategory(""dog food"");"
21918,./TargetProjects/bigtop/bigtop-data-generators/bigpetstore-data-generator/src/test/java/org/apache/bigtop/datagenerators/bigpetstore/generators/transaction/TestTransactionPurchasesHiddenMarkovModel.java,89,,"		models.put(""dog food"", dogFoodModel);"
21919,./TargetProjects/bigtop/bigtop-data-generators/bigpetstore-data-generator/src/test/java/org/apache/bigtop/datagenerators/bigpetstore/generators/transaction/TestTransactionPurchasesHiddenMarkovModel.java,90,,"		models.put(""cat food"", catFoodModel);"
21920,./TargetProjects/bookkeeper/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchReadThroughputLatency.java,152,,"        options.addOption(""ledger"", true, ""Ledger to read. If empty, read all ledgers which come available. """
21921,./TargetProjects/bookkeeper/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchReadThroughputLatency.java,154,,"        options.addOption(""listen"", true, ""Listen for creation of <arg> ledgers, and read each one fully"");"
21922,./TargetProjects/bookkeeper/bookkeeper-benchmark/src/test/java/org/apache/bookkeeper/benchmark/TestBenchmark.java,60,,"                ""--zookeeper"", zkUtil.getZooKeeperConnectString(),"
21923,./TargetProjects/bookkeeper/bookkeeper-common-allocator/src/test/java/org/apache/bookkeeper/common/allocator/impl/ByteBufAllocatorBuilderTest.java,81,,"            fail(""Should have thrown exception"");"
21924,./TargetProjects/bookkeeper/bookkeeper-common/src/test/java/org/apache/bookkeeper/common/conf/ConfigKeyTest.java,105,,"        conf.setProperty(keyName, ""test-value"");"
21925,./TargetProjects/bookkeeper/bookkeeper-common/src/test/java/org/apache/bookkeeper/common/net/ServiceURITest.java,94,,"            null, new String[0], null, new String[] { ""localhost:2181"" }, ""/path/to/namespace"");"
21926,./TargetProjects/bookkeeper/bookkeeper-common/src/test/java/org/apache/bookkeeper/common/net/ServiceURITest.java,94,,"            null, new String[0], null, new String[] { ""localhost:2181"" }, ""/path/to/namespace"");"
21927,./TargetProjects/bookkeeper/bookkeeper-common/src/test/java/org/apache/bookkeeper/common/net/ServiceURITest.java,133,,"            new String[] { ""host1:2181"", ""host2:2181"", ""host3:2181"" },"
21928,./TargetProjects/bookkeeper/bookkeeper-common/src/test/java/org/apache/bookkeeper/common/net/ServiceURITest.java,133,,"            new String[] { ""host1:2181"", ""host2:2181"", ""host3:2181"" },"
21929,./TargetProjects/bookkeeper/bookkeeper-common/src/test/java/org/apache/bookkeeper/common/util/TestOrderedExecutorDecorators.java,88,,"            .name(""test"").numThreads(20).preserveMdcForTaskExecution(true).build();"
21930,./TargetProjects/bookkeeper/bookkeeper-common/src/test/java/org/apache/bookkeeper/common/util/TestOrderedExecutorDecorators.java,91,,"            MDC.put(MDC_KEY, ""testMDCInvokeOrdered"");"
21931,./TargetProjects/bookkeeper/bookkeeper-common/src/test/java/org/apache/bookkeeper/common/util/TestOrderedExecutorDecorators.java,93,,"                    log.info(""foobar"");"
21932,./TargetProjects/bookkeeper/bookkeeper-common/src/test/java/org/apache/bookkeeper/common/util/TestWatchable.java,54,,"    @SuppressWarnings(""unchecked"")"
21933,./TargetProjects/bookkeeper/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java,262,,"            opts.addOption(""f"", ""force"", false,"
21934,./TargetProjects/bookkeeper/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java,576,,"            lOpts.addOption(""l"", ""ledgerid"", true, ""Ledger ID"");"
21935,./TargetProjects/bookkeeper/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java,576,,"            lOpts.addOption(""l"", ""ledgerid"", true, ""Ledger ID"");"
21936,./TargetProjects/bookkeeper/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java,693,,"            lOpts.addOption(""bookieid"", true, ""List ledgers residing in this bookie"");"
21937,./TargetProjects/bookkeeper/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java,788,,"            lOpts.addOption(""dumptofile"", true, ""Dump metadata for ledger, to a file"");"
21938,./TargetProjects/bookkeeper/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java,1554,,"            opts.addOption(""s"", ""updatespersec"", true, ""Number of ledgers updating per second (default: 5 per sec)"");"
21939,./TargetProjects/bookkeeper/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java,1555,,"            opts.addOption(""r"", ""maxOutstandingReads"", true, ""Max outstanding reads (default: 5 * updatespersec)"");"
21940,./TargetProjects/bookkeeper/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java,1556,,"            opts.addOption(""l"", ""limit"", true, ""Maximum number of ledgers to update (default: no limit)"");"
21941,./TargetProjects/bookkeeper/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java,1557,,"            opts.addOption(""v"", ""verbose"", true, ""Print status of the ledger updation (default: false)"");"
21942,./TargetProjects/bookkeeper/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java,1558,,"            opts.addOption(""p"", ""printprogress"", true,"
21943,./TargetProjects/bookkeeper/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java,79,,"    static final String LOG_FILE_SUFFIX = "".log"";"
21944,./TargetProjects/bookkeeper/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/storage/ldb/KeyValueStorageRocksDB.java,419,,"                throw new IOException(""Failed to flush RocksDB batch"", e);"
21945,./TargetProjects/bookkeeper/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,681,,"            LOG.error(""IncorrectParameterException on ledgerId:{} firstEntry:{} lastEntry:{}"","
21946,./TargetProjects/bookkeeper/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,986,,"        LOG.error(""To use this feature Ledger must be created with createLedgerAdv() interface."");"
21947,./TargetProjects/bookkeeper/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LongZkLedgerIdGenerator.java,103,,"                        LOG.error(""Failed to create long ledger ID path"", e);"
21948,./TargetProjects/bookkeeper/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MSLedgerManagerFactory.java,129,,"            throw new IOException(""Failed to initialize metastore "" + msName + "" : "", t);"
21949,./TargetProjects/bookkeeper/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java,237,,"        String subdir1 = String.format(""%04x"", ledgerId >> 48 & 0xffff);"
21950,./TargetProjects/bookkeeper/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java,283,,"            throw new ReplicationException.UnavailableException(""Error contacting zookeeper"", ke);"
21951,./TargetProjects/bookkeeper/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java,286,,"            throw new ReplicationException.UnavailableException(""Interrupted while connecting zookeeper"", ie);"
21952,./TargetProjects/bookkeeper/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java,423,,"            throw new ReplicationException.UnavailableException(""Interrupted while contacting zookeeper"", ie);"
21953,./TargetProjects/bookkeeper/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/zk/ZKMetadataDriverBase.java,71,,"    @SuppressWarnings(""deprecation"")"
21954,./TargetProjects/bookkeeper/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,1721,,"                logResponse(status, ""ledger"", ledgerId);"
21955,./TargetProjects/bookkeeper/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,2580,,"            throw new UnsupportedOperationException(""Not supported"");"
21956,./TargetProjects/bookkeeper/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/RequestUtils.java,62,,"            stringHelper.add(""ledgerId"", addRequest.getLedgerId());"
21957,./TargetProjects/bookkeeper/bookkeeper-server/src/main/java/org/apache/bookkeeper/sasl/SaslConstants.java,53,,"    static final String SASL_BOOKKEEPER_PROTOCOL = ""bookkeeper"";"
21958,./TargetProjects/bookkeeper/bookkeeper-server/src/main/java/org/apache/bookkeeper/server/Main.java,301,,"        log.info(""Load lifecycle component : {}"", StatsProviderService.class.getName());"
21959,./TargetProjects/bookkeeper/bookkeeper-server/src/main/java/org/apache/bookkeeper/server/http/service/ListDiskFilesService.java,78,,"                && params.containsKey(""file_type"")"
21960,./TargetProjects/bookkeeper/bookkeeper-server/src/main/java/org/apache/bookkeeper/tools/cli/commands/bookie/LedgerCommand.java,140,,"                    .println(""entry "" + currentEntry + ""\t:\t(log: "" + entryLodId + "", pos: "" + position + "")""));"
21961,./TargetProjects/bookkeeper/bookkeeper-server/src/main/java/org/apache/bookkeeper/tools/cli/commands/bookie/ReadLogCommand.java,175,,"        LOG.info(""Scan entry log "" + logId + "" ("" + Long.toHexString(logId) + "".log)"" + "" for PositionRange: """
21962,./TargetProjects/bookkeeper/bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/ZooKeeperClient.java,840,,"                return String.format(""exists (%s, watcher = %s)"", path, watcher);"
21963,./TargetProjects/bookkeeper/bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/ZooKeeperClient.java,957,,"                return String.format(""getData (%s, watcher = %s)"", path, watcher);"
21964,./TargetProjects/bookkeeper/bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/ZooKeeperClient.java,1135,,"                return String.format(""getChildren (%s, watcher = %s)"", path, watcher);"
21965,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/auth/TestAuth.java,159,,"        assertEquals(""Should have entry"", 1, entryCount(ledgerId.get(), bookieConf, clientConf));"
21966,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/auth/TestAuth.java,224,,"            fail(""Shouldn't get this far"");"
21967,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/auth/TestAuth.java,230,,"        assertEquals(""Shouldn't have entry"", 0, entryCount(ledgerId.get(), bookieConf, clientConf));"
21968,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/auth/TestAuth.java,333,,"            assertTrue(""Wrong exception thrown"","
21969,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/auth/TestAuth.java,504,,"                    addr.setAuthorizedId(new BookKeeperPrincipal(""test-principal""));"
21970,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/AdvertisedAddressTest.java,67,,"        conf.setAdvertisedAddress(""10.0.0.1"");"
21971,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieDeferredSyncTest.java,64,,"            lh.append((""entry-"" + i).getBytes(UTF_8));"
21972,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java,179,,"        File tmpLedgerDir = createTempDir(""DiskCheck"", ""test"");"
21973,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java,179,,"        File tmpLedgerDir = createTempDir(""DiskCheck"", ""test"");"
21974,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java,291,,"        File tmpDir = createTempDir(""bookie"", ""test"");"
21975,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java,335,,"                ""Bookie registration node doesn't exists!"","
21976,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java,366,,"        assertNotNull(""Bookie registration has been failed"", bkRegNode1);"
21977,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java,1448,,"        URL url = new URL(""http://localhost:"" + nextFreePort + HttpRouter.METRICS);"
21978,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java,357,,"        File journalDir = createTempDir(""bookie"", ""journal"");"
21979,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java,357,,"        File journalDir = createTempDir(""bookie"", ""journal"");"
21980,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java,360,,"        File ledgerDir = createTempDir(""bookie"", ""ledger"");"
21981,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java,364,,"        writeIndexFileForLedger(BookieImpl.getCurrentDirectory(ledgerDir), 1, ""testPasswd"".getBytes());"
21982,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java,376,,"            fail(""Shouldn't have found entry 101"");"
21983,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieShellTest.java,143,,"            .setBookieId(""127.0.0.1:3181"")"
21984,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieShellTest.java,177,,"        RecoverCmd cmd = (RecoverCmd) shell.commands.get(""recover"");"
21985,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieShellTest.java,204,,"        CommandLine cmdLine = parseCommandLine(cmd, ""-force"", ""-q"", ""127.0.0.1:3181"");"
21986,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieShellTest.java,218,,"            ""-force"", ""-l"", ""12345"", ""127.0.0.1:3181"");"
21987,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieShellTest.java,226,,"            ""-force"", ""-l"", ""12345"", ""-deleteCookie"", ""127.0.0.1:3181"");"
21988,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieShellTest.java,242,,"            ""-force"", ""-l"", ""12345"", ""-dryrun"", ""127.0.0.1:3181"");"
21989,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieShellTest.java,374,,"            ""listbookies"""
21990,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieStickyReadsTest.java,124,,"                wh.append((""entry-"" + i).getBytes());"
21991,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java,215,,"        LOG.info(""Finished deleting the ledgers contains most entries."");"
21992,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java,351,,"                        .getGauge(""bookie.gc."" + ACTIVE_ENTRY_LOG_COUNT)"
21993,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java,378,,"            assertFalse(""Found entry log file ([0,1,2].log that should have not been compacted in ledgerDirectory: """
21994,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java,1416,,"        int majorCompactions = stats.getCounter(""storage.gc."" + MAJOR_COMPACTION_COUNT).get().intValue();"
21995,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java,144,,"            fail(""Shouldn't have been able to start"");"
21996,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java,547,,"        File journalDir = initV2JournalDirectory(createTempDir(""bookie"", ""journal""));"
21997,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CreateNewLogTest.java,119,,"        String logFileName = Long.toHexString(1) + "".log"";"
21998,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CreateNewLogTest.java,121,,"        LOG.info(""Picked this directory: {}"", dir);"
21999,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CreateNewLogTest.java,629,,"        Assert.assertEquals(""NUM_OF_WRITE_ACTIVE_LEDGERS"", 0, numOfWriteActiveLedgers.get().intValue());"
