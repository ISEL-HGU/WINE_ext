69000,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetLogicalTypes.java,126,,"        .baselineValues(2, ""UTF8 string2"", ""MAX_VALUE"", 2147483647, 127, 32767, 2147483647, 255, 65535, -1,"
69001,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetLogicalTypes.java,127,,"            9223372036854775807L, 9223372036854775807L, -1L, LocalDate.parse(""1969-12-31""),"
69002,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetLogicalTypes.java,129,,"            LocalDateTime.parse(""2038-01-19T03:14:07.999""), 9223372036854775807L,"
69003,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetLogicalTypes.java,132,,"        .baselineValues(3, ""UTF8 string3"", ""MIN_VALUE"", -2147483648, -128, -32768, -2147483648, 0, 0, 0,"
69004,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetLogicalTypes.java,132,,"        .baselineValues(3, ""UTF8 string3"", ""MIN_VALUE"", -2147483648, -128, -32768, -2147483648, 0, 0, 0,"
69005,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetLogicalTypes.java,133,,"            -9223372036854775808L, -9223372036854775808L, 0L, LocalDate.parse(""1970-01-01""),"
69006,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetLogicalTypes.java,135,,"            LocalDateTime.parse(""1970-01-01T00:00:00.0""), 0L, new Period(""PT0S""), bytesZeros)"
69007,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetLogicalTypes.java,135,,"            LocalDateTime.parse(""1970-01-01T00:00:00.0""), 0L, new Period(""PT0S""), bytesZeros)"
69008,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetLogicalTypes.java,376,,"        "" rowKey, "" +"
69009,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetLogicalTypes.java,377,,"        "" _UTF8, "" +"
69010,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetLogicalTypes.java,378,,"        "" _Enum, "" +"
69011,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetLogicalTypes.java,379,,"        "" _INT32_RAW, "" +"
69012,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetLogicalTypes.java,380,,"        "" _INT_8, "" +"
69013,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetLogicalTypes.java,381,,"        "" _INT_16, "" +"
69014,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetLogicalTypes.java,382,,"        "" _INT_32, "" +"
69015,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetLogicalTypes.java,383,,"        "" _UINT_8, "" +"
69016,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetLogicalTypes.java,384,,"        "" _UINT_16, "" +"
69017,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetLogicalTypes.java,385,,"        "" _UINT_32, "" +"
69018,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetLogicalTypes.java,386,,"        "" _INT64_RAW, "" +"
69019,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetLogicalTypes.java,387,,"        "" _INT_64, "" +"
69020,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetLogicalTypes.java,388,,"        "" _UINT_64, "" +"
69021,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetLogicalTypes.java,389,,"        "" _DATE_int32, "" +"
69022,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetLogicalTypes.java,390,,"        "" _TIME_MILLIS_int32, "" +"
69023,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetLogicalTypes.java,391,,"        "" _TIMESTAMP_MILLIS_int64, "" +"
69024,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetLogicalTypes.java,392,,"        "" _TIMESTAMP_MICROS_int64, "" +"
69025,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetLogicalTypes.java,393,,"        "" _INTERVAL_fixed_len_byte_array_12, "" +"
69026,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetLogicalTypes.java,394,,"        "" _INT96_RAW "" +"
69027,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetMetadataCache.java,58,,"    dirTestWatcher.copyResourceToRoot(Paths.get(""parquet""));"
69028,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetMetadataCache.java,63,,"    test(""refresh table metadata dfs.`%s`"", TABLE_NAME_1);"
69029,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetMetadataCache.java,65,,"    String query = String.format(""select dir0, dir1, o_custkey, o_orderdate from dfs.`%s` "" +"
69030,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetMetadataCache.java,66,,"            "" where dir0=1994 and dir1 in ('Q1', 'Q2')"", TABLE_NAME_1);"
69031,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetMetadataCache.java,72,,"    String numFilesPattern = ""numFiles="" + expectedNumFiles;"
69032,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetMetadataCache.java,73,,"    String usedMetaPattern = ""usedMetadataFile=true"";"
69033,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetMetadataCache.java,95,,"        new String[] {""Filter""});"
69034,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetMetadataCache.java,102,,"    test(""use dfs"");"
69035,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetMetadataCache.java,105,,"    test(""refresh table metadata %s"", tableName);"
69036,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetMetadataCache.java,146,,"    test(""create table `%s/t1` as select * from cp.`tpch/nation.parquet`"", tableName);"
69037,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetMetadataCache.java,147,,"    test(""create table `%s/t2` as select * from cp.`tpch/nation.parquet`"", tableName);"
69038,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetMetadataCache.java,150,,"    String query = String.format(""select * from %s"", tableName);"
69039,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetMetadataCache.java,191,,"      .baselineColumns(""cnt"")"
69040,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetMetadataCache.java,201,,"        .baselineColumns(""ok"", ""summary"")"
69041,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetMetadataCache.java,311,,"    String cacheFileRootPattern = String.format(""cacheFileRoot=%s/%s"", dirTestWatcher.getRootDir().getCanonicalPath(), TABLE_NAME_2);"
69042,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetMetadataCache.java,448,,"      assertEquals(""An incorrect result was obtained while querying a table with metadata cache files"", 50, rowCount);"
69043,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetMetadataCache.java,450,,"      test(""drop table if exists %s"", newTableName);"
69044,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetMetadataCache.java,468,,"        test(""use dfs.tmp"");"
69045,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetMetadataCache.java,473,,"        String createQuery = ""create table `%s` as select * from cp.`tpch/nation.parquet`"";"
69046,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetMetadataCache.java,565,,"      String usedMetaPattern = ""usedMetadataFile=false""; // ignoring metadata cache file"
69047,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetMetadataCache.java,708,,"      assertEquals(""Row count does not match the expected value"", expectedRowCount, actualRowCount);"
69048,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetMetadataCache.java,973,,"    test(""create table `%s/t3` as select * from cp.`tpch/nation.parquet`"", tableName);"
69049,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetMetadataCache.java,974,,"    test(""create table `%s/t4` as select * from cp.`tpch/nation.parquet`"", tableName);"
69050,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetMetadataCache.java,983,,"        .sqlQuery(""select t.totalRowCount as rowCount from `%s/metadataDir/summary_meta.json` as t"", tableName)"
69051,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetMetadataCache.java,985,,"        .baselineColumns(""rowCount"")"
69052,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetMetadataCache.java,1089,,"    test(""create table `%s/t1` as select * from cp.`tpch/orders.parquet`"", tableName);"
69053,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetMetadataCache.java,1090,,"    test(""create table `%s/t2` as select * from cp.`tpch/orders.parquet`"", tableName);"
69054,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetMetadataCache.java,1091,,"    test(""create table `%s/t3` as select * from cp.`tpch/orders.parquet`"", tableName);"
69055,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetMetadataCache.java,1092,,"    test(""create table `%s/t4` as select * from cp.`tpch/orders.parquet`"", tableName);"
69056,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetMetadataCache.java,1094,,"    test(""refresh table metadata COLUMNS (o_orderdate) %s"", tableName);"
69057,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetMetadataCache.java,1132,,"    String rowCountQuery = String.format(""select t.allColumnsInteresting as allColumnsInteresting from `%s/metadataDir/summary_meta.json` as t"", tableName);"
69058,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetMetadataCache.java,1138,,"        .baselineColumns(""allColumnsInteresting"")"
69059,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetMetadataCache.java,1260,,"    String numRowGroupsPattern =""numRowGroups="" + expectedNumRowGroups;"
69060,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetMetadataVersion.java,39,,"    assertEquals(""Parquet metadata version is parsed incorrectly"", expectedVersion, versionWithFirstLetter);"
69061,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetMetadataVersion.java,50,,"      assertTrue(""Not expected exception is obtained while parsing parquet metadata version"","
69062,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetMetadataVersion.java,51,,"          e.getMessage().contains(String.format(""Could not parse metadata version '%s'"", versionWithFirstLetterInUpperCase)));"
69063,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestParquetReaderConfig.java,79,,"    checkConfigValue(newConf, ParquetReaderConfig.ENABLE_BYTES_READ_COUNTER, ""false"");"
69064,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestPushDownAndPruningForDecimal.java,119,,"    queryBuilder().sql(String.format(""create table %s partition by (part_int_32) as select * from %s"", newTable, oldTable)).run();"
69065,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestPushDownAndPruningForDecimal.java,127,,"            .include(""numRowGroups=1"", ""usedMetadataFile=false"")"
69066,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestPushDownAndPruningForDecimal.java,127,,"            .include(""numRowGroups=1"", ""usedMetadataFile=false"")"
69067,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestPushDownAndPruningForDecimal.java,128,,"            .exclude(""Filter"")"
69068,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestPushDownAndPruningForDecimal.java,134,,"          .baselineColumns(""val_int_32"", ""val_int_64"")"
69069,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestPushDownAndPruningForDecimal.java,134,,"          .baselineColumns(""val_int_32"", ""val_int_64"")"
69070,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestPushDownAndPruningForDecimal.java,135,,"          .baselineValues(new BigDecimal(""1.05""), new BigDecimal(""1.05""))"
69071,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestPushDownAndPruningForDecimal.java,136,,"          .baselineValues(new BigDecimal(""10.00""), new BigDecimal(""10.00""))"
69072,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestPushDownAndPruningForDecimal.java,137,,"          .baselineValues(new BigDecimal(""10.25""), new BigDecimal(""10.25""))"
69073,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestPushDownAndPruningForDecimal.java,156,,"      queryBuilder().sql(String.format(""refresh table metadata %s"", table)).run();"
69074,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestPushDownAndPruningForDecimal.java,163,,"            .include(""numRowGroups=1"", ""usedMetadataFile=true"")"
69075,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestPushDownAndPruningForDecimal.java,171,,"          .baselineValues(new BigDecimal(""2.05""), new BigDecimal(""2.05""))"
69076,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestPushDownAndPruningForDecimal.java,172,,"          .baselineValues(new BigDecimal(""20.00""), new BigDecimal(""20.00""))"
69077,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestPushDownAndPruningForDecimal.java,173,,"          .baselineValues(new BigDecimal(""20.25""), new BigDecimal(""20.25""))"
69078,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestPushDownAndPruningForDecimal.java,193,,"          .include(""numRowGroups=2"", ""usedMetadataFile=false"")"
69079,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestPushDownAndPruningForDecimal.java,337,,"      for (String optionValue : Arrays.asList(""true"", ""false"", """")) {"
69080,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestPushDownAndPruningForDecimal.java,337,,"      for (String optionValue : Arrays.asList(""true"", ""false"", """")) {"
69081,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestPushDownAndPruningForDecimal.java,351,,"          .baselineColumns(""part_fixed"", ""val_fixed"")"
69082,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestPushDownAndPruningForDecimal.java,351,,"          .baselineColumns(""part_fixed"", ""val_fixed"")"
69083,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestPushDownAndPruningForDecimal.java,352,,"          .baselineValues(new BigDecimal(""1.00""), new BigDecimal(""1.05""))"
69084,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestPushDownAndPruningForDecimal.java,412,,"        .baselineValues(new BigDecimal(""2.00""), new BigDecimal(""2.05""))"
69085,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestPushDownAndPruningForDecimal.java,572,,"      .baselineColumns(""part_binary"", ""val_binary"")"
69086,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestPushDownAndPruningForDecimal.java,572,,"      .baselineColumns(""part_binary"", ""val_binary"")"
69087,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestPushDownAndPruningForVarchar.java,77,,"    properties.put(tableNoMeta, ""false"");"
69088,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestPushDownAndPruningForVarchar.java,78,,"    properties.put(tableWithMeta, ""true"");"
69089,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestPushDownAndPruningForVarchar.java,84,,"          String query = String.format(""select * from %s where part = 'A'"", property.getKey());"
69090,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestPushDownAndPruningForVarchar.java,86,,"          assertTrue(plan.contains(""numRowGroups=1""));"
69091,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestPushDownAndPruningForVarchar.java,88,,"          assertFalse(plan.contains(""Filter""));"
69092,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestPushDownAndPruningForVarchar.java,93,,"            .baselineColumns(""part"", ""val"")"
69093,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestPushDownAndPruningForVarchar.java,93,,"            .baselineColumns(""part"", ""val"")"
69094,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestPushDownAndPruningForVarchar.java,103,,"        forEach(k -> client.runSqlSilently(String.format(""drop table if exists %s"", k)));"
69095,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestPushDownAndPruningForVarchar.java,114,,"        queryBuilder().sql(String.format(""refresh table metadata %s"", table)).run();"
69096,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestPushDownAndPruningForVarchar.java,118,,"        assertTrue(plan.contains(""usedMetadataFile=true""));"
69097,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestPushDownAndPruningForVarchar.java,141,,"      queryBuilder().sql(String.format(""create table %s partition by (part) as select * from %s"", newTable, oldTable)).run();"
69098,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestPushDownAndPruningForVarchar.java,148,,"        assertTrue(plan.contains(""usedMetadataFile=false""));"
69099,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestPushDownAndPruningForVarchar.java,241,,"        String query = String.format(""select * from %s where val = 'A1'"", table);"
69100,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestPushDownAndPruningWithItemStar.java,50,,"    String[] expectedPlan = {""numFiles=3"", ""numRowGroups=3"", ""usedMetadataFile=false"", ""columns=\\[`o_orderdate`\\]""};"
69101,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestPushDownAndPruningWithItemStar.java,50,,"    String[] expectedPlan = {""numFiles=3"", ""numRowGroups=3"", ""usedMetadataFile=false"", ""columns=\\[`o_orderdate`\\]""};"
69102,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestPushDownAndPruningWithItemStar.java,50,,"    String[] expectedPlan = {""numFiles=3"", ""numRowGroups=3"", ""usedMetadataFile=false"", ""columns=\\[`o_orderdate`\\]""};"
69103,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestPushDownAndPruningWithItemStar.java,100,,"    String[] expectedPlan = {""numFiles=1"", ""numRowGroups=1"", ""usedMetadataFile=false"","
69104,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestPushDownAndPruningWithItemStar.java,100,,"    String[] expectedPlan = {""numFiles=1"", ""numRowGroups=1"", ""usedMetadataFile=false"","
69105,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestPushDownAndPruningWithItemStar.java,138,,"    String[] expectedPlan = {""numFiles=3"", ""numRowGroups=3"", ""usedMetadataFile=false"", ""columns=\\[`\\*\\*`, `o_orderdate`\\]""};"
69106,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet/TestPushDownAndPruningWithItemStar.java,152,,"    String subQuery = String.format(""select * from `%s`.`%s`"", DFS_TMP_SCHEMA, TABLE_NAME);"
69107,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,144,,"        "" select "" +"
69108,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,145,,"            "" t.rowKey as rowKey, "" +"
69109,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,146,,"            "" t._UTF8 as _UTF8, "" +"
69110,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,147,,"            "" t._Enum as _Enum, "" +"
69111,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,148,,"            "" t._INT32_RAW as _INT32_RAW, "" +"
69112,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,149,,"            "" t._INT_8 as _INT_8, "" +"
69113,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,150,,"            "" t._INT_16 as _INT_16, "" +"
69114,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,151,,"            "" t._INT_32 as _INT_32, "" +"
69115,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,152,,"            "" t._UINT_8 as _UINT_8, "" +"
69116,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,153,,"            "" t._UINT_16 as _UINT_16, "" +"
69117,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,154,,"            "" t._UINT_32 as _UINT_32, "" +"
69118,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,155,,"            "" t._INT64_RAW as _INT64_RAW, "" +"
69119,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,156,,"            "" t._INT_64 as _INT_64, "" +"
69120,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,157,,"            "" t._UINT_64 as _UINT_64, "" +"
69121,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,158,,"            "" t._DATE_int32 as _DATE_int32, "" +"
69122,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,159,,"            "" t._TIME_MILLIS_int32 as _TIME_MILLIS_int32, "" +"
69123,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,160,,"            "" t._TIMESTAMP_MILLIS_int64 as _TIMESTAMP_MILLIS_int64, "" +"
69124,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,161,,"            "" t._TIMESTAMP_MICROS_int64 as _TIMESTAMP_MICROS_int64, "" +"
69125,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,162,,"            "" t._INTERVAL_fixed_len_byte_array_12 as _INTERVAL_fixed_len_byte_array_12, "" +"
69126,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,163,,"            "" t._INT96_RAW as _INT96_RAW "" +"
69127,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,164,,"            "" from "" +"
69128,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,166,,"            "" order by t.rowKey """
69129,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,169,,"        ""rowKey "","
69130,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,170,,"        ""_UTF8"","
69131,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,171,,"        ""_Enum"","
69132,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,172,,"        ""_INT32_RAW"","
69133,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,173,,"        ""_INT_8"","
69134,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,174,,"        ""_INT_16"","
69135,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,175,,"        ""_INT_32"","
69136,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,176,,"        ""_UINT_8"","
69137,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,177,,"        ""_UINT_16"","
69138,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,178,,"        ""_UINT_32"","
69139,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,179,,"        ""_INT64_RAW"","
69140,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,180,,"        ""_INT_64"","
69141,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,181,,"        ""_UINT_64"","
69142,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,182,,"        ""_DATE_int32"","
69143,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,183,,"        ""_TIME_MILLIS_int32"","
69144,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,184,,"        ""_TIMESTAMP_MILLIS_int64"","
69145,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,185,,"        ""_TIMESTAMP_MICROS_int64"","
69146,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,186,,"        ""_INTERVAL_fixed_len_byte_array_12"","
69147,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,187,,"        ""_INT96_RAW"""
69148,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,194,,"        .baselineValues(1, ""UTF8 string1"", ""RANDOM_VALUE"", 1234567, 123, 12345, 1234567, 123, 1234, 1234567,"
69149,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,194,,"        .baselineValues(1, ""UTF8 string1"", ""RANDOM_VALUE"", 1234567, 123, 12345, 1234567, 123, 1234, 1234567,"
69150,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,195,,"            1234567890123456L, 1234567890123456L, 1234567890123456L, LocalDate.parse(""5350-02-17""),"
69151,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,197,,"            LocalDateTime.parse(""1973-11-29T21:33:09.012""), 123456789012L,"
69152,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,200,,"        .baselineValues(2, ""UTF8 string2"", ""MAX_VALUE"", 2147483647, 127, 32767, 2147483647, 255, 65535, -1,"
69153,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,200,,"        .baselineValues(2, ""UTF8 string2"", ""MAX_VALUE"", 2147483647, 127, 32767, 2147483647, 255, 65535, -1,"
69154,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,201,,"            9223372036854775807L, 9223372036854775807L, -1L, LocalDate.parse(""1969-12-31""),"
69155,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,203,,"            LocalDateTime.parse(""2038-01-19T03:14:07.999""), 9223372036854775807L,"
69156,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,206,,"        .baselineValues(3, ""UTF8 string3"", ""MIN_VALUE"", -2147483648, -128, -32768, -2147483648, 0, 0, 0,"
69157,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,206,,"        .baselineValues(3, ""UTF8 string3"", ""MIN_VALUE"", -2147483648, -128, -32768, -2147483648, 0, 0, 0,"
69158,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,207,,"            -9223372036854775808L, -9223372036854775808L, 0L, LocalDate.parse(""1970-01-01""),"
69159,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,209,,"            LocalDateTime.parse(""1970-01-01T00:00:00.0""), 0L, new Period(""PT0S""), bytesZeros)"
69160,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/parquet2/TestDrillParquetReader.java,209,,"            LocalDateTime.parse(""1970-01-01T00:00:00.0""), 0L, new Period(""PT0S""), bytesZeros)"
69161,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/sys/TestLocalPersistentStore.java,75,,"      assertNull(store.get(""abc""));"
69162,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/store/sys/TestLocalPersistentStore.java,87,,"      store.put(""abc"", ""desc"");"
69163,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/testing/ControlsInjectionUtil.java,98,,"      + ""\""siteClass\"":\"""" + siteClassName + ""\"","""
69164,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/testing/ControlsInjectionUtil.java,102,,"      + ""\""exceptionClass\"":\"""" + exceptionClassName + ""\""}"";"
69165,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/testing/ControlsInjectionUtil.java,129,,"    return ""{ \""type\"" : \""pause\"","" +"
69166,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/testing/ControlsInjectionUtil.java,130,,"      ""\""siteClass\"" : \"""" + siteClass.getName() + ""\"","""
69167,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/testing/ControlsInjectionUtil.java,131,,"      + ""\""desc\"" : \"""" + desc + ""\"","""
69168,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/testing/ControlsInjectionUtil.java,132,,"      + ""\""nSkip\"" : "" + nSkip + ""}"";"
69169,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/testing/TestExceptionInjection.java,92,,"  @SuppressWarnings(""static-method"")"
69170,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/testing/TestPauseInjection.java,139,,"    assertTrue(String.format(""Test should stop for at least %d milliseconds."", expectedDuration),"
69171,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/testing/TestPauseInjection.java,141,,"    assertNull(""No exception should be thrown."", ex.value);"
69172,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/testing/TestPauseInjection.java,145,,"      fail(""Failed to close query context: "" + e);"
69173,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/udf/dynamic/TestDynamicUDFSupport.java,125,,"      test(""alter system reset `exec.udf.enable_dynamic_support`"");"
69174,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/udf/dynamic/TestDynamicUDFSupport.java,163,,"        .sqlQuery(""create function using jar '%s'"", defaultBinaryJar)"
69175,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/udf/dynamic/TestDynamicUDFSupport.java,165,,"        .baselineColumns(""ok"", ""summary"")"
69176,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/udf/dynamic/TestDynamicUDFSupport.java,221,,"    String summary = ""The following UDFs in jar %s have been registered:\n"" +"
69177,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/udf/dynamic/TestDynamicUDFSupport.java,222,,"        ""[custom_lower(VARCHAR-REQUIRED)]"";"
69178,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/udf/dynamic/TestDynamicUDFSupport.java,235,,"    assertFalse(""Temporary area should be empty"", fs.listFiles(remoteFunctionRegistry.getTmpArea(), false).hasNext());"
69179,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/udf/dynamic/TestDynamicUDFSupport.java,239,,"    assertTrue(""Binary should be present in registry area"","
69180,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/udf/dynamic/TestDynamicUDFSupport.java,241,,"    assertTrue(""Source should be present in registry area"","
69181,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/udf/dynamic/TestDynamicUDFSupport.java,327,,"    doThrow(new VersionMismatchException(""Version mismatch detected"", 1))"
69182,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/udf/dynamic/TestDynamicUDFSupport.java,374,,"            .sqlQuery(""drop function using jar '%s'"", defaultBinaryJar)"
69183,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/udf/dynamic/TestDynamicUDFSupport.java,464,,"    test(""select custom_lower('A') from (values(1))"");"
69184,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/udf/dynamic/TestDynamicUDFSupport.java,469,,"        .sqlQuery(""select custom_lower('A') as res from (values(1))"")"
69185,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/udf/dynamic/TestDynamicUDFSupport.java,471,,"        .baselineColumns(""res"")"
69186,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/util/DrillFileSystemUtilTest.java,37,,"    assertEquals(""Directory count should match"", 2, statuses.size());"
69187,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/util/DrillFileSystemUtilTest.java,45,,"    assertEquals(""Directory name should match"", ""a"", statuses.get(0).getPath().getName());"
69188,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/util/DrillFileSystemUtilTest.java,68,,"    assertEquals(""File count should match"", 1, statuses.size());"
69189,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/util/DrillFileSystemUtilTest.java,69,,"    assertEquals(""File name should match"", ""f.txt"", statuses.get(0).getPath().getName());"
69190,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/util/DrillFileSystemUtilTest.java,69,,"    assertEquals(""File name should match"", ""f.txt"", statuses.get(0).getPath().getName());"
69191,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/util/DrillFileSystemUtilTest.java,75,,"      (PathFilter) path -> path.getName().endsWith("".txt""));"
69192,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/util/FileSystemUtilTest.java,38,,"    assertEquals(""Directory count should match"", 4, statuses.size());"
69193,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/util/FileSystemUtilTest.java,48,,"    assertEquals(""Directory name should match"", "".a"", statuses.get(0).getPath().getName());"
69194,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/util/FileSystemUtilTest.java,82,,"    assertEquals(""File count should match"", 3, statuses.size());"
69195,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/util/FileSystemUtilTest.java,88,,"      (PathFilter) path -> path.getName().endsWith("".txt""));"
69196,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/util/FileSystemUtilTest.java,120,,"    assertEquals(""Directory and file count should match"", 4, statuses.size());"
69197,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/util/MiniZooKeeperCluster.java,194,,"      ""on client port: {}"", clientPort);"
69198,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/util/TestValueVectorElementFormatter.java,60,,"    when(options.getString(ExecConstants.WEB_DISPLAY_FORMAT_TIMESTAMP)).thenReturn(""yyyy-MM-dd HH:mm:ss.SS"");"
69199,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/vector/complex/TestEmptyPopulation.java,68,,"    Assert.assertEquals(""offset must have valid size"", 2, accessor.getValueCount());"
69200,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/vector/complex/writer/TestComplexTypeReader.java,258,,"        .baselineValues(listOf(mapOf(""key"", ""obj"", ""value"", 1L), mapOf(""key"", ""bar"", ""value"", 10L)))"
69201,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/vector/complex/writer/TestComplexTypeReader.java,258,,"        .baselineValues(listOf(mapOf(""key"", ""obj"", ""value"", 1L), mapOf(""key"", ""bar"", ""value"", 10L)))"
69202,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/vector/complex/writer/TestJsonNanInf.java,47,,"    String table = ""nan_test.json"";"
69203,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/vector/complex/writer/TestJsonNanInf.java,56,,"        .baselineColumns(""nan_col"", ""inf_col"")"
69204,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/vector/complex/writer/TestJsonNanInf.java,56,,"        .baselineColumns(""nan_col"", ""inf_col"")"
69205,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/vector/complex/writer/TestJsonNanInf.java,71,,"        ""{\""nan_col\"":5.0, \""inf_col\"":5.0}]"";"
69206,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/vector/complex/writer/TestJsonNanInf.java,178,,"    test(""alter session set `%s` = false"", ExecConstants.JSON_READER_NAN_INF_NUMBERS);"
69207,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/vector/complex/writer/TestJsonNanInf.java,206,,"      int nanIndex = resultJson.indexOf(""NaN"");"
69208,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/vector/complex/writer/TestJsonNanInf.java,207,,"      assertFalse(""`NaN` must not be enclosed with \""\"" "", resultJson.charAt(nanIndex - 1) == '""');"
69209,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/vector/complex/writer/TestJsonNanInf.java,303,,"      test(""alter session set `%s` = true"", ExecConstants.JSON_READ_NUMBERS_AS_DOUBLE);"
69210,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/vector/complex/writer/TestJsonNanInf.java,307,,"          .baselineColumns(""name"", ""attr4"")"
69211,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/vector/complex/writer/TestJsonNanInf.java,308,,"          .baselineValues(""obj1"", Double.POSITIVE_INFINITY)"
69212,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/vector/complex/writer/TestJsonNanInf.java,310,,"          .baselineValues(""obj2"", Double.NEGATIVE_INFINITY)"
69213,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/vector/complex/writer/TestJsonNanInf.java,323,,"    String json = ""{\""name\"":\""object1\"", \""attr1\"":1, \""attr2\"":2, \""attr3\"":3, \""attr4\"":NaN}\n"" +"
69214,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/vector/complex/writer/TestJsonReader.java,96,,"          .optionSettingQueriesForTestQuery(""alter session set `store.json.all_text_mode` = true"")"
69215,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/vector/complex/writer/TestJsonReader.java,101,,"                  ""inner_1"", listOf(),"
69216,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/vector/complex/writer/TestJsonReader.java,137,,"        .baselineValues(mapOf(""repeated_varchar"", listOf()))"
69217,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/vector/complex/writer/TestJsonReader.java,436,,"              .optionSettingQueriesForTestQuery(""alter session set `exec.enable_union_type` = true"")"
69218,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/vector/complex/writer/TestJsonReader.java,825,,"                    ""data"", mapOf()"
69219,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/vector/complex/writer/TestPromotableWriter.java,43,,"      writer.map(""map"").bigInt(""a"").writeBigInt(1);"
69220,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/work/fragment/TestFragmentExecutorCancel.java,42,,"      + ""\""address\"":\"""" + endpoint.getAddress() + ""\"","""
69221,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/work/metadata/TestMetadataProvider.java,108,,"    verifySchema(""information_schema"", schemas);"
69222,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/work/metadata/TestMetadataProvider.java,113,,"    verifySchema(""sys"", schemas);"
69223,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/work/metadata/TestMetadataProvider.java,260,,"    verifyColumn(""sys"", SystemTable.DRILLBITS.getTableName(), ""user_port"", columns);"
69224,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/work/prepare/TestLimit0VsRegularQueriesMetadata.java,32,,"    String query = ""select\n"" +"
69225,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/work/prepare/TestLimit0VsRegularQueriesMetadata.java,44,,"        new ExpectedColumnResult(""col_int"", ""CHARACTER VARYING"", true, 30, 30, 0, false, String.class.getName()),"
69226,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/work/prepare/TestLimit0VsRegularQueriesMetadata.java,126,,"        ""from cp.`region.json`"";"
69227,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/work/prepare/TestPreparedStatementProvider.java,46,,"        new ExpectedColumnResult(""sales_city"", ""CHARACTER VARYING"", true, Types.MAX_VARCHAR_LENGTH, Types.MAX_VARCHAR_LENGTH, 0, false, String.class.getName()),"
69228,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/exec/work/prepare/TestPreparedStatementProvider.java,46,,"        new ExpectedColumnResult(""sales_city"", ""CHARACTER VARYING"", true, Types.MAX_VARCHAR_LENGTH, Types.MAX_VARCHAR_LENGTH, 0, false, String.class.getName()),"
69229,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/storage/CredentialsProviderSerDeTest.java,74,,"        ""{\n"" +"
69230,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/storage/CredentialsProviderSerDeTest.java,79,,"        ""  }\n"" +"
69231,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/test/ConfigBuilder.java,54,,"      throw new IllegalArgumentException( ""Cannot provide both a config resource and config properties."");"
69232,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/test/ConfigBuilder.java,129,,"    properties.put(ExecConstants.CAST_EMPTY_STRING_TO_NULL, ""false"");"
69233,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/test/DrillTestWrapper.java,778,,"      throw new Exception(""at position "" + counter + "" column '"" + column + ""' mismatched values, expected: null "" +"
69234,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/test/DrillTestWrapper.java,778,,"      throw new Exception(""at position "" + counter + "" column '"" + column + ""' mismatched values, expected: null "" +"
69235,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/test/ProfileParser.java,646,,"      logger.info(""{}{}"", indentString(indent), node.toString());"
69236,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/test/QueryBuilder.java,323,,"    Preconditions.checkNotNull(queryType, ""Query not provided."");"
69237,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/test/TestGracefulShutdown.java,87,,"    String[] drillbits = {""db1"", ""db2"", ""db3""};"
69238,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/test/TestGracefulShutdown.java,87,,"    String[] drillbits = {""db1"", ""db2"", ""db3""};"
69239,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/test/rowSet/test/TestRowSetComparison.java,110,,"      .addRow(""bbb"")"
69240,./TargetProjects/drill/exec/java-exec/src/test/java/org/apache/drill/test/rowSet/test/TestRowSetComparison.java,111,,"      .addRow(""ccc"")"
69241,./TargetProjects/drill/exec/jdbc-all/src/test/java/org/apache/drill/jdbc/ITTestShadedJar.java,67,,"        Class<?> clazz = drillbitLoader.loadClass(""org.apache.drill.test.BaseTestQuery"");"
69242,./TargetProjects/drill/exec/jdbc/src/main/java/org/apache/drill/jdbc/impl/DrillConnectionImpl.java,267,,"        ""Savepoints are not supported. (Drill is not transactional.)"" );"
69243,./TargetProjects/drill/exec/jdbc/src/main/java/org/apache/drill/jdbc/impl/DrillDatabaseMetaDataImpl.java,1283,,"      if (""todo: implement this method"".equals(e.getMessage())) {"
69244,./TargetProjects/drill/exec/jdbc/src/main/java/org/apache/drill/jdbc/impl/DrillMetaImpl.java,120,,"        .put(Byte.TYPE, of(Types.TINYINT, ""TINYINT""))"
69245,./TargetProjects/drill/exec/jdbc/src/main/java/org/apache/drill/jdbc/impl/DrillMetaImpl.java,122,,"        .put(Short.TYPE, of(Types.SMALLINT, ""SMALLINT""))"
69246,./TargetProjects/drill/exec/jdbc/src/main/java/org/apache/drill/jdbc/impl/DrillMetaImpl.java,124,,"        .put(Integer.TYPE, of(Types.INTEGER, ""INTEGER""))"
69247,./TargetProjects/drill/exec/jdbc/src/main/java/org/apache/drill/jdbc/impl/DrillMetaImpl.java,126,,"        .put(Long.TYPE,  of(Types.BIGINT, ""BIGINT""))"
69248,./TargetProjects/drill/exec/jdbc/src/main/java/org/apache/drill/jdbc/impl/DrillMetaImpl.java,128,,"        .put(Float.TYPE, of(Types.FLOAT, ""FLOAT""))"
69249,./TargetProjects/drill/exec/jdbc/src/main/java/org/apache/drill/jdbc/impl/DrillMetaImpl.java,130,,"        .put(Double.TYPE,  of(Types.DOUBLE, ""DOUBLE""))"
69250,./TargetProjects/drill/exec/jdbc/src/main/java/org/apache/drill/jdbc/impl/DrillMetaImpl.java,133,,"        .put(BigDecimal.class, of(Types.DECIMAL, ""DECIMAL""))"
69251,./TargetProjects/drill/exec/jdbc/src/main/java/org/apache/drill/jdbc/impl/DrillMetaImpl.java,134,,"        .put(java.sql.Date.class, of(Types.DATE, ""DATE""))"
69252,./TargetProjects/drill/exec/jdbc/src/main/java/org/apache/drill/jdbc/impl/DrillMetaImpl.java,135,,"        .put(Time.class, of(Types.TIME, ""TIME""))"
69253,./TargetProjects/drill/exec/jdbc/src/main/java/org/apache/drill/jdbc/impl/DrillMetaImpl.java,136,,"        .put(Timestamp.class, of(Types.TIMESTAMP, ""TIMESTAMP""))"
69254,./TargetProjects/drill/exec/jdbc/src/main/java/org/apache/drill/jdbc/impl/TypeConvertingSqlAccessor.java,297,,"                                      ""Java float / SQL REAL/FLOAT"" );"
69255,./TargetProjects/drill/exec/jdbc/src/main/java/org/apache/drill/jdbc/impl/TypeConvertingSqlAccessor.java,301,,"                                      ""Java double / SQL DOUBLE PRECISION"" );"
69256,./TargetProjects/drill/exec/jdbc/src/main/java/org/apache/drill/jdbc/impl/TypeConvertingSqlAccessor.java,306,,"            ""Java BigDecimal / SQL DECIMAL PRECISION"");"
69257,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/ConnectionTest.java,94,,"    ResultSet rs = stmt.executeQuery( ""VALUES 1"" );"
69258,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/ConnectionTest.java,114,,"          ""Note: Still throwing UnsupportedOperationException "", e );"
69259,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/ConnectionTest.java,128,,"  @Ignore( ""until unsupported characteristics are rejected"" )"
69260,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/DatabaseMetaDataGetColumnsTest.java,232,,"        + ""\n  """
69261,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/DatabaseMetaDataGetColumnsTest.java,399,,"                equalTo( ""CHARACTER VARYING"" ) );"
69262,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/DatabaseMetaDataGetColumnsTest.java,413,,"  @Ignore( ""until resolved:  any requirement on nullability (DRILL-2420?)"" )"
69263,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/DatabaseMetaDataGetColumnsTest.java,416,,"    assertThat( ""ResultSetMetaData.column...Null... nullability code:"","
69264,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/DatabaseMetaDataGetColumnsTest.java,429,,"    assertThat( rowsMetadata.getColumnLabel( 2 ), equalTo( ""TABLE_SCHEM"" ) );"
69265,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/DatabaseMetaDataGetColumnsTest.java,440,,"  @Ignore( ""TODO(DRILL-3253): unignore when we have all-types test storage plugin"" )"
69266,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/DatabaseMetaDataGetColumnsTest.java,536,,"    assertThat( rowsMetadata.getColumnLabel( 4 ), equalTo( ""COLUMN_NAME"" ) );"
69267,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/DatabaseMetaDataGetColumnsTest.java,593,,"    assertThat( rowsMetadata.getColumnLabel( 5 ), equalTo( ""DATA_TYPE"" ) );"
69268,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/DatabaseMetaDataGetColumnsTest.java,601,,"  @Ignore( ""TODO(DRILL-2470): unignore when TINYINT is implemented"" )"
69269,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/DatabaseMetaDataGetColumnsTest.java,607,,"  @Ignore( ""TODO(DRILL-2470): unignore when SMALLINT is implemented"" )"
69270,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/DatabaseMetaDataGetColumnsTest.java,623,,"  @Ignore( ""TODO(DRILL-2683): unignore when REAL is implemented"" )"
69271,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/DatabaseMetaDataGetColumnsTest.java,708,,"    assertThat( ""java.sql.Types.* type code"","
69272,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/DatabaseMetaDataGetColumnsTest.java,738,,"    assertThat( rowsMetadata.getColumnTypeName( 5 ), equalTo( ""INTEGER"" ) );"
69273,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/DatabaseMetaDataGetColumnsTest.java,768,,"    assertThat( rowsMetadata.getColumnLabel( 6 ), equalTo( ""TYPE_NAME"" ) );"
69274,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/DatabaseMetaDataGetColumnsTest.java,954,,"    assertThat( rowsMetadata.getColumnLabel( 7 ), equalTo( ""COLUMN_SIZE"" ) );"
69275,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/DatabaseMetaDataGetColumnsTest.java,1112,,"  @Ignore( ""Ignored after Calcite update"" )"
69276,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/DatabaseMetaDataGetColumnsTest.java,1115,,"    assertThat( ""When DRILL-3244 fixed, un-ignore above method and purge this."","
69277,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/DatabaseMetaDataGetColumnsTest.java,1271,,"    assertThat( rowsMetadata.getColumnLabel( 9 ), equalTo( ""DECIMAL_DIGITS"" ) );"
69278,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/DatabaseMetaDataGetColumnsTest.java,1573,,"    assertThat( rowsMetadata.getColumnLabel( 10 ), equalTo( ""NUM_PREC_RADIX"" ) );"
69279,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/DatabaseMetaDataGetColumnsTest.java,1742,,"    assertThat( rowsMetadata.getColumnLabel( 11 ), equalTo( ""NULLABLE"" ) );"
69280,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/DatabaseMetaDataGetColumnsTest.java,2118,,"    assertThat( rowsMetadata.getColumnLabel( 16 ), equalTo( ""CHAR_OCTET_LENGTH"" ) );"
69281,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/DatabaseMetaDataGetColumnsTest.java,2285,,"    assertThat( rowsMetadata.getColumnLabel( 17 ), equalTo( ""ORDINAL_POSITION"" ) );"
69282,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/DatabaseMetaDataGetColumnsTest.java,2376,,"    assertThat( rowsMetadata.getColumnLabel( 18 ), equalTo( ""IS_NULLABLE"" ) );"
69283,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/DatabaseMetaDataGetColumnsTest.java,2381,,"    assertThat( mdrOptBOOLEAN.getString( ""IS_NULLABLE"" ), equalTo( ""YES"" ) );"
69284,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/DatabaseMetaDataGetColumnsTest.java,2567,,"      final String value = mdrOptBOOLEAN.getString( ""SCOPE_SCHEMA"" );"
69285,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/DriverTest.java,119,,"    fail( ""Not implemented yet"" );"
69286,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/DriverTest.java,201,,"  @Ignore( ""Deferred pending need."" )"
69287,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/ResultSetGetMethodConversionsTest.java,149,,"  @Ignore( ""TODO(DRILL-2470): unignore when TINYINT is implemented"" )"
69288,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/ResultSetGetMethodConversionsTest.java,152,,"    assertThat( testDataRow.getByte( ""C_TINYINT_1"" ), equalTo( (byte) 1 ) );"
69289,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/ResultSetGetMethodConversionsTest.java,155,,"  @Ignore( ""TODO(DRILL-2470): unignore when SMALLINT is implemented"" )"
69290,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/ResultSetGetMethodConversionsTest.java,158,,"    assertThat( testDataRow.getByte( ""C_SMALLINT_2"" ), equalTo( (byte) 2 ) );"
69291,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/ResultSetGetMethodConversionsTest.java,163,,"    assertThat( testDataRow.getByte( ""C_INTEGER_3"" ), equalTo( (byte) 3 ) );"
69292,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/ResultSetGetMethodConversionsTest.java,168,,"    assertThat( testDataRow.getByte( ""C_BIGINT_4"" ), equalTo( (byte) 4 ) );"
69293,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/ResultSetGetMethodConversionsTest.java,171,,"  @Ignore( ""TODO(DRILL-2683): unignore when REAL is implemented"" )"
69294,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/ResultSetGetMethodConversionsTest.java,174,,"    assertThat( testDataRow.getByte( ""C_REAL_5.5"" ), equalTo( (byte) 5 ) );"
69295,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/ResultSetGetMethodConversionsTest.java,179,,"    assertThat( testDataRow.getByte( ""C_DOUBLE_PREC._6.6"" ), equalTo( (byte) 6 ) );"
69296,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/ResultSetGetMethodConversionsTest.java,184,,"    assertThat( testDataRow.getByte( ""C_FLOAT_7.7"" ), equalTo( (byte) 7 ) );"
69297,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/ResultSetGetMethodConversionsTest.java,189,,"    assertThat( testDataRow.getByte( ""C_DECIMAL_10.10"" ), equalTo( (byte) 10 ) );"
69298,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/ResultSetMetaDataTest.java,483,,"  @Ignore( ""TODO(DRILL-3367): unignore when DECIMAL is no longer DOUBLE"" )"
69299,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/ResultSetMetaDataTest.java,565,,"  @Ignore( ""TODO(DRILL-2470): unignore when SMALLINT is implemented"" )"
69300,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/ResultSetMetaDataTest.java,584,,"  @Ignore( ""TODO(DRILL-2683): unignore when REAL is implemented"" )"
69301,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/ResultSetMetaDataTest.java,979,,"    assertTrue( ""actual class "" + actualClass.getName()"
69302,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/ResultSetMetaDataTest.java,980,,"                + "" is not assignable to required class "" + requiredClass,"
69303,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/impl/TypeConvertingSqlAccessorTest.java,198,,"      assertThat( e.getMessage(), containsString( ""getByte"" ) );"
69304,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/impl/TypeConvertingSqlAccessorTest.java,276,,"      assertThat( e.getMessage(), allOf( containsString( ""float"" ),"
69305,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/impl/TypeConvertingSqlAccessorTest.java,277,,"                                         anyOf( containsString( ""REAL"" ),"
69306,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/impl/TypeConvertingSqlAccessorTest.java,278,,"                                                containsString( ""FLOAT"" ) ) ) );"
69307,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/impl/TypeConvertingSqlAccessorTest.java,302,,"      assertThat( e.getMessage(), allOf( containsString( ""double"" ),"
69308,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/impl/TypeConvertingSqlAccessorTest.java,303,,"                                         anyOf( containsString( ""DOUBLE PRECISION"" ),"
69309,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/impl/TypeConvertingSqlAccessorTest.java,356,,"      assertThat( e.getMessage(), containsString( ""getShort"" ) );"
69310,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/proxy/TracingProxyDriverClassLoadingTest.java,65,,"      assertThat( ""Not expected messsage.  (Did JDK change?)"","
69311,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/proxy/TracingProxyDriverClassLoadingTest.java,82,,"      DriverManager.getDriver( ""jdbc:proxy::jdbc:drill:zk=local"" );"
69312,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/Drill2288GetColumnsMetadataWhenNoRowsTest.java,74,,"    assertThat( ""ResultSetMetaData.getColumnCount() should have been > 0"","
69313,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/Drill2288GetColumnsMetadataWhenNoRowsTest.java,77,,"    assertThat( ""Unexpected non-empty results.  Test rot?"","
69314,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/Drill2463GetNullsFailedWithAssertionsBugTest.java,62,,"        ""SELECT CAST( NULL AS INTEGER ) FROM INFORMATION_SCHEMA.CATALOGS"" );"
69315,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/Drill2463GetNullsFailedWithAssertionsBugTest.java,65,,"    assertThat( ""wasNull"", rs.wasNull(), equalTo( true ) );"
69316,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/Drill2489CallsAfterCloseThrowExceptionsTest.java,140,,"    assertTrue(""Test setup error"", closedConn.isClosed());"
69317,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/Drill2489CallsAfterCloseThrowExceptionsTest.java,459,,"      fail(""Already-closed exception error(s): \n"" + checker.getReport());"
69318,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/Drill2769UnsupportedReportsUseSqlExceptionTest.java,109,,"    assertFalse(""Test setup error"", connection.isClosed());"
69319,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/Drill2769UnsupportedReportsUseSqlExceptionTest.java,354,,"      fail(""Non-SQLException exception error(s): \n"" + checker.getReport());"
69320,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcDataTest.java,114,,"    withModel(MODEL, ""DONUTS"").withConnection(new Function<Connection, Void>() {"
69321,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcDataTest.java,151,,"            ""DEPTID=31; LASTNAME=Rafferty\n"" + ""DEPTID=33; LASTNAME=Jones\n"" + ""DEPTID=33; LASTNAME=Steinberg\n"""
69322,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcDataTest.java,151,,"            ""DEPTID=31; LASTNAME=Rafferty\n"" + ""DEPTID=33; LASTNAME=Jones\n"" + ""DEPTID=33; LASTNAME=Steinberg\n"""
69323,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcDataTest.java,151,,"            ""DEPTID=31; LASTNAME=Rafferty\n"" + ""DEPTID=33; LASTNAME=Jones\n"" + ""DEPTID=33; LASTNAME=Steinberg\n"""
69324,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcDataTest.java,152,,"                + ""DEPTID=34; LASTNAME=Robinson\n"" + ""DEPTID=34; LASTNAME=Smith\n"" + ""DEPTID=null; LASTNAME=John\n"");"
69325,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcDataTest.java,152,,"                + ""DEPTID=34; LASTNAME=Robinson\n"" + ""DEPTID=34; LASTNAME=Smith\n"" + ""DEPTID=null; LASTNAME=John\n"");"
69326,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcDataTest.java,152,,"                + ""DEPTID=34; LASTNAME=Robinson\n"" + ""DEPTID=34; LASTNAME=Smith\n"" + ""DEPTID=null; LASTNAME=John\n"");"
69327,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcDataTest.java,169,,"        .returns(""C=4\n"" + ""C=4\n"" + ""C=4\n"" + ""C=4\n"" + ""C=4\n"");"
69328,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcDataTest.java,176,,"        .returns(""PPU=0.55\n"" + ""PPU=0.69\n"" + ""PPU=0.55\n"" + ""PPU=0.69\n"" + ""PPU=1.0\n"");"
69329,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcDataTest.java,176,,"        .returns(""PPU=0.55\n"" + ""PPU=0.69\n"" + ""PPU=0.55\n"" + ""PPU=0.69\n"" + ""PPU=1.0\n"");"
69330,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcDataTest.java,199,,"    StoragePluginConfig config = seConfigs.get(""donuts-json"");"
69331,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcDataTest.java,201,,"    config = seConfigs.get(""queue"");"
69332,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,53,,"        .sql( ""SELECT tbl.id, tbl.topping[3].type AS topping3 \n"" +"
69333,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,54,,"              ""FROM cp.`donuts.json` AS tbl \n"" +"
69334,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,56,,"        .returns( ""id=0005; topping3=null\n"" +"
69335,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,57,,"                  ""id=0002; topping3=Chocolate\n"" +"
69336,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,58,,"                  ""id=0003; topping3=Maple\n"" +"
69337,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,59,,"                  ""id=0001; topping3=Powdered Sugar\n"" +"
69338,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,72,,"                   ""id=0004; topping3=Powdered Sugar\n"" +"
69339,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,73,,"                   ""id=0005; topping3=null"""
69340,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,175,,"        .sql( ""SELECT tbl.id, \n"" +"
69341,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,176,,"              ""       CAST( tbl.for_VarChar AS VARCHAR ) AS as_VARCHAR \n"" +"
69342,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,177,,"              ""FROM cp.`null_ordering_and_grouping_data.json` AS tbl \n"" +"
69343,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,179,,"        .returns( ""id=2; as_VARCHAR=null\n"" +"
69344,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,180,,"                  ""id=3; as_VARCHAR=A\n"" +"
69345,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,192,,"                   ""id=1; as_VARCHAR=B\n"" +  // TODO: Revisit VARCHAR's acting as VARCHAR(1)"
69346,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,193,,"                   ""id=2; as_VARCHAR=null"""
69347,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,289,,"              ""       CAST( tbl.for_Int AS INT ) AS as_INT \n"" +"
69348,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,292,,"        .returns( ""id=2; as_INT=null\n"" +"
69349,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,293,,"                  ""id=3; as_INT=19\n"" +"
69350,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,305,,"                   ""id=1; as_INT=180\n"" +"
69351,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,306,,"                   ""id=2; as_INT=null"""
69352,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,402,,"              ""       CAST( tbl.for_Float AS FLOAT ) AS as_FLOAT \n"" +"
69353,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,405,,"        .returns( ""id=2; as_FLOAT=null\n"" +"
69354,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,406,,"                  ""id=3; as_FLOAT=19.0\n"" +"
69355,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,418,,"                   ""id=1; as_FLOAT=180.0\n"" +"
69356,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,419,,"                   ""id=2; as_FLOAT=null"""
69357,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,515,,"              ""       CAST( tbl.for_BigInt AS BIGINT ) AS as_BIGINT \n"" +"
69358,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,518,,"        .returns( ""id=2; as_BIGINT=null\n"" +"
69359,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,519,,"                  ""id=3; as_BIGINT=19\n"" +"
69360,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,531,,"                   ""id=1; as_BIGINT=180\n"" +"
69361,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,532,,"                   ""id=2; as_BIGINT=null"""
69362,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,628,,"              ""       CAST( tbl.for_Date AS DATE ) AS as_DATE \n"" +"
69363,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,631,,"        .returns( ""id=2; as_DATE=null\n"" +"
69364,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,632,,"                  ""id=3; as_DATE=2014-01-01\n"" +"
69365,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,644,,"                   ""id=1; as_DATE=2014-12-31\n"" +"
69366,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,645,,"                   ""id=2; as_DATE=null"""
69367,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,741,,"              ""       CAST( tbl.for_Interval AS INTERVAL HOUR ) AS as_INTERVAL \n"" +"
69368,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,744,,"        .returns( ""id=2; as_INTERVAL=null\n"" +"
69369,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,745,,"                  ""id=3; as_INTERVAL=PT3600S\n"" +"
69370,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,757,,"                   ""id=1; as_INTERVAL=PT7200S\n"" +"
69371,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,758,,"                   ""id=2; as_INTERVAL=null"""
69372,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,854,,"              ""       CAST( tbl.for_Decimal AS DECIMAL ) AS as_DECIMAL \n"" +"
69373,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,857,,"        .returns( ""id=2; as_DECIMAL=null\n"" +"
69374,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,858,,"                  ""id=3; as_DECIMAL=19\n"" +"
69375,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,870,,"                   ""id=1; as_DECIMAL=180\n"" +"
69376,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,871,,"                   ""id=2; as_DECIMAL=null"""
69377,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,969,,"              ""       CAST( tbl.for_Decimal5 AS DECIMAL(5) ) AS as_DECIMAL5 \n"" +"
69378,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,972,,"        .returns( ""id=2; as_DECIMAL5=null\n"" +"
69379,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,973,,"                  ""id=3; as_DECIMAL5=1235\n"" +"
69380,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,985,,"                   ""id=1; as_DECIMAL5=9877\n"" +"
69381,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,986,,"                   ""id=2; as_DECIMAL5=null"""
69382,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,1084,,"              ""       CAST( tbl.for_Decimal35 AS DECIMAL(35) ) AS as_DECIMAL35 \n"" +"
69383,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,1087,,"        .returns( ""id=2; as_DECIMAL35=null\n"" +"
69384,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,1088,,"                  ""id=3; as_DECIMAL35=12345678901234567890123456789012345\n"" +"
69385,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,1100,,"                   ""id=1; as_DECIMAL35=43210987654321098765432109876543210\n"" +"
69386,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/JdbcNullOrderingAndGroupingTest.java,1101,,"                   ""id=2; as_DECIMAL35=null"""
69387,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/TestBugFixes.java,31,,"        + ""    WHEN 'y' = 'x' THEN 0 """
69388,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/TestExecutionExceptionsToClient.java,62,,"      assertThat(""Null getCause(); missing expected wrapped exception"","
69389,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/TestExecutionExceptionsToClient.java,65,,"      assertThat(""Unexpectedly wrapped another SQLException"","
69390,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/TestExecutionExceptionsToClient.java,68,,"      assertThat(""getCause() not UserRemoteException as expected"","
69391,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/TestExecutionExceptionsToClient.java,71,,"      assertThat(""No expected current \""SYSTEM ERROR\""/eventual \""PARSE ERROR\"""","
69392,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/TestExecutionExceptionsToClient.java,72,,"        e.getMessage(), anyOf(startsWith(""SYSTEM ERROR""), startsWith(""PARSE ERROR"")));"
69393,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/TestExecutionExceptionsToClient.java,72,,"        e.getMessage(), anyOf(startsWith(""SYSTEM ERROR""), startsWith(""PARSE ERROR"")));"
69394,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/TestInformationSchemaColumns.java,213,,"        + ""\n  """
69395,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/TestInformationSchemaColumns.java,439,,"                equalTo( ""CHARACTER VARYING"" ) );"
69396,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/TestInformationSchemaColumns.java,447,,"  @Ignore( ""until resolved:  any requirement on nullability (DRILL-2420?)"" )"
69397,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/TestInformationSchemaColumns.java,450,,"    assertThat( ""ResultSetMetaData.column...Null... nullability code:"","
69398,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/TestInformationSchemaColumns.java,463,,"    assertThat( rowsMetadata.getColumnLabel( 2 ), equalTo( ""TABLE_SCHEMA"" ) );"
69399,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/TestInformationSchemaColumns.java,474,,"  @Ignore( ""TODO(DRILL-3253): unignore when we have all-types test storage plugin"" )"
69400,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/TestInformationSchemaColumns.java,555,,"    assertThat( rowsMetadata.getColumnLabel( 4 ), equalTo( ""COLUMN_NAME"" ) );"
69401,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/TestInformationSchemaColumns.java,605,,"    assertThat( rowsMetadata.getColumnLabel( 5 ), equalTo( ""ORDINAL_POSITION"" ) );"
69402,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/TestInformationSchemaColumns.java,613,,"  @Ignore( ""TODO(DRILL-2470): unignore when TINYINT is implemented"" )"
69403,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/TestInformationSchemaColumns.java,619,,"  @Ignore( ""TODO(DRILL-2470): unignore when SMALLINT is implemented"" )"
69404,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/TestInformationSchemaColumns.java,635,,"  @Ignore( ""TODO(DRILL-2683): unignore when REAL is implemented"" )"
69405,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/TestInformationSchemaColumns.java,664,,"    assertThat( rowsMetadata.getColumnTypeName( 5 ), equalTo( ""INTEGER"" ) );"
69406,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/TestInformationSchemaColumns.java,687,,"    assertThat( rowsMetadata.getColumnLabel( 6 ), equalTo( ""COLUMN_DEFAULT"" ) );"
69407,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/TestInformationSchemaColumns.java,738,,"    assertThat( rowsMetadata.getColumnLabel( 7 ), equalTo( ""IS_NULLABLE"" ) );"
69408,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/TestInformationSchemaColumns.java,744,,"                mdrOptBOOLEAN.getString( ""IS_NULLABLE"" ), equalTo( ""YES"" ) );"
69409,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/TestInformationSchemaColumns.java,928,,"    assertThat( rowsMetadata.getColumnLabel( 8 ), equalTo( ""DATA_TYPE"" ) );"
69410,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/TestInformationSchemaColumns.java,1095,,"    assertThat( rowsMetadata.getColumnLabel( 9 ), equalTo( ""CHARACTER_MAXIMUM_LENGTH"" ) );"
69411,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/TestInformationSchemaColumns.java,1255,,"    assertThat( rowsMetadata.getColumnLabel( 10 ), equalTo( ""CHARACTER_OCTET_LENGTH"" ) );"
69412,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/TestInformationSchemaColumns.java,1422,,"    assertThat( rowsMetadata.getColumnLabel( 11 ), equalTo( ""NUMERIC_PRECISION"" ) );"
69413,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/TestInformationSchemaColumns.java,1582,,"    assertThat( rowsMetadata.getColumnLabel( 12 ), equalTo( ""NUMERIC_PRECISION_RADIX"" ) );"
69414,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/TestInformationSchemaColumns.java,1742,,"    assertThat( rowsMetadata.getColumnLabel( 13 ), equalTo( ""NUMERIC_SCALE"" ) );"
69415,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/TestInformationSchemaColumns.java,1902,,"    assertThat( rowsMetadata.getColumnLabel( 14 ), equalTo( ""DATETIME_PRECISION"" ) );"
69416,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/TestInformationSchemaColumns.java,2187,,"    assertThat( rowsMetadata.getColumnLabel( 15 ), equalTo( ""INTERVAL_TYPE"" ) );"
69417,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/TestInformationSchemaColumns.java,2420,,"    assertThat( rowsMetadata.getColumnLabel( 16 ), equalTo( ""INTERVAL_PRECISION"" ) );"
69418,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/TestJdbcDistQuery.java,106,,"        + ""from dfs.`sample-data/regionsMF/` """
69419,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/TestJdbcQuery.java,69,,"      s.executeQuery(String.format(""CREATE TABLE %s AS SELECT * FROM cp.`employee.json`"", tableName));"
69420,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/TestJdbcQuery.java,189,,"            ""data=not set"""
69421,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/TestJdbcQuery.java,298,,"            ""employee_id=99; EXPR$1=Elizabeth\n"" +"
69422,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/TestJdbcQuery.java,416,,"      s.execute(String.format(""SET `%s` = false"", ExecConstants.RETURN_RESULT_SET_FOR_DDL));"
69423,./TargetProjects/drill/exec/jdbc/src/test/java/org/apache/drill/jdbc/test/TestJdbcQuery.java,420,,"      assertNull(""No result"", s.getResultSet());"
69424,./TargetProjects/drill/exec/memory/base/src/main/java/org/apache/drill/exec/memory/AllocationManager.java,112,,"    try (@SuppressWarnings(""unused"") Closeable read = readLock.open()) {"
69425,./TargetProjects/drill/exec/memory/base/src/test/java/org/apache/drill/exec/memory/TestBaseAllocator.java,69,,"      assertNotNull(""allocation failed"", drillBuf1);"
69426,./TargetProjects/drill/exec/vector/src/main/java/org/apache/drill/exec/vector/ObjectVector.java,57,,"    throw new UnsupportedOperationException(""ObjectVector does not support this"");"
69427,./TargetProjects/drill/exec/vector/src/main/java/org/apache/drill/exec/vector/accessor/reader/VectorAccessors.java,122,,"    @SuppressWarnings(""unchecked"")"
69428,./TargetProjects/drill/exec/vector/src/test/java/org/apache/drill/exec/record/TestMaterializedField.java,31,,"    MaterializedField field = MaterializedField.create(new String(""field""), Types.OPTIONAL_INT);"
69429,./TargetProjects/drill/exec/vector/src/test/java/org/apache/drill/exec/record/metadata/TestMetadataProperties.java,53,,"    assertNull(props.property(""foo""));"
69430,./TargetProjects/drill/exec/vector/src/test/java/org/apache/drill/exec/record/metadata/TestMetadataProperties.java,71,,"    props.setProperty(""foo"", ""bar"");"
69431,./TargetProjects/drill/exec/vector/src/test/java/org/apache/drill/exec/record/metadata/TestTupleSchema.java,532,,"    MaterializedField fieldB = SchemaBuilder.columnSchema(""b.x"", MinorType.MAP, DataMode.REQUIRED);"
69432,./TargetProjects/drill/exec/vector/src/test/java/org/apache/drill/exec/record/metadata/TestTupleSchema.java,536,,"    MaterializedField fieldC = SchemaBuilder.columnSchema(""c.y"", MinorType.MAP, DataMode.REQUIRED);"
69433,./TargetProjects/drill/exec/vector/src/test/java/org/apache/drill/exec/record/metadata/TestTupleSchema.java,822,,"    schema.setIntProperty(""int_prop"", 1);"
69434,./TargetProjects/drill/exec/vector/src/test/java/org/apache/drill/exec/record/metadata/TestTupleSchema.java,823,,"    schema.setProperty(""string_prop"", ""A"");"
69435,./TargetProjects/drill/exec/vector/src/test/java/org/apache/drill/exec/record/metadata/schema/parser/TestSchemaParser.java,98,,"      .addNullable(""col"", TypeProtos.MinorType.VARDECIMAL)"
69436,./TargetProjects/drill/exec/vector/src/test/java/org/apache/drill/exec/vector/VariableLengthVectorTest.java,39,,"      MaterializedField field = MaterializedField.create(""stringCol"", Types.required(TypeProtos.MinorType.VARCHAR));"
69437,./TargetProjects/drill/exec/vector/src/test/java/org/apache/drill/exec/vector/VariableLengthVectorTest.java,40,,"      @SuppressWarnings(""resource"")"
69438,./TargetProjects/drill/logical/src/main/java/org/apache/drill/common/expression/visitors/ConditionalExprOptimizer.java,82,,"        + ""It should have been converted to FunctionHolderExpression in materialization"");"
69439,./TargetProjects/drill/logical/src/test/java/org/apache/drill/common/expression/SchemaPathTest.java,30,,"    assertEquals(oneElementSchema, oneElementSchema.getUnIndexed(), ""Schema path should match"");"
69440,./TargetProjects/drill/logical/src/test/java/org/apache/drill/common/expression/fn/JodaDateValidatorTest.java,44,,"    TEST_CASES.put(""yyyy-Mon-dd"", ""yyyy-MMM-d"");"
69441,./TargetProjects/drill/logical/src/test/java/org/apache/drill/common/expression/fn/JodaDateValidatorTest.java,63,,"    TEST_CASES.put(""hhmissmsam"", ""hmssSSSaa"");"
69442,./TargetProjects/drill/metastore/iceberg-metastore/src/test/java/org/apache/drill/metastore/iceberg/components/tables/TestTableKey.java,37,,"      .storagePlugin(""dfs"")"
69443,./TargetProjects/drill/metastore/iceberg-metastore/src/test/java/org/apache/drill/metastore/iceberg/components/tables/TestTableKey.java,38,,"      .workspace(""tmp"")"
69444,./TargetProjects/drill/metastore/iceberg-metastore/src/test/java/org/apache/drill/metastore/iceberg/components/tables/TestTableKey.java,39,,"      .tableName(""nation"")"
69445,./TargetProjects/drill/metastore/iceberg-metastore/src/test/java/org/apache/drill/metastore/iceberg/components/tables/TestTablesInputDataTransformer.java,74,,"      .storagePlugin(""dfs"")"
69446,./TargetProjects/drill/metastore/iceberg-metastore/src/test/java/org/apache/drill/metastore/iceberg/components/tables/TestTablesInputDataTransformer.java,75,,"      .workspace(""tmp"")"
69447,./TargetProjects/drill/metastore/iceberg-metastore/src/test/java/org/apache/drill/metastore/iceberg/components/tables/TestTablesInputDataTransformer.java,76,,"      .tableName(""nation"")"
69448,./TargetProjects/drill/metastore/iceberg-metastore/src/test/java/org/apache/drill/metastore/iceberg/components/tables/TestTablesInputDataTransformer.java,88,,"    tableRecord.setField(""storagePlugin"", ""dfs"");"
69449,./TargetProjects/drill/metastore/iceberg-metastore/src/test/java/org/apache/drill/metastore/iceberg/components/tables/TestTablesInputDataTransformer.java,89,,"    tableRecord.setField(""workspace"", ""tmp"");"
69450,./TargetProjects/drill/metastore/iceberg-metastore/src/test/java/org/apache/drill/metastore/iceberg/components/tables/TestTablesInputDataTransformer.java,90,,"    tableRecord.setField(""tableName"", ""nation"");"
69451,./TargetProjects/drill/metastore/iceberg-metastore/src/test/java/org/apache/drill/metastore/iceberg/components/tables/TestTablesInputDataTransformer.java,91,,"    tableRecord.setField(""metadataKey"", MetadataInfo.GENERAL_INFO_KEY);"
69452,./TargetProjects/drill/metastore/iceberg-metastore/src/test/java/org/apache/drill/metastore/iceberg/components/tables/TestTablesOperationTransformer.java,62,,"      .storagePlugin(""dfs"").workspace(""tmp"").tableName(""nation"").metadataKey(""dir0"").build();"
69453,./TargetProjects/drill/metastore/iceberg-metastore/src/test/java/org/apache/drill/metastore/iceberg/components/tables/TestTablesOperationTransformer.java,62,,"      .storagePlugin(""dfs"").workspace(""tmp"").tableName(""nation"").metadataKey(""dir0"").build();"
69454,./TargetProjects/drill/metastore/iceberg-metastore/src/test/java/org/apache/drill/metastore/iceberg/components/tables/TestTablesOperationTransformer.java,62,,"      .storagePlugin(""dfs"").workspace(""tmp"").tableName(""nation"").metadataKey(""dir0"").build();"
69455,./TargetProjects/drill/metastore/iceberg-metastore/src/test/java/org/apache/drill/metastore/iceberg/components/tables/TestTablesOperationTransformer.java,62,,"      .storagePlugin(""dfs"").workspace(""tmp"").tableName(""nation"").metadataKey(""dir0"").build();"
69456,./TargetProjects/drill/metastore/iceberg-metastore/src/test/java/org/apache/drill/metastore/iceberg/components/tables/TestTablesOutputDataTransformer.java,51,,"      .columns(""storagePlugin"", ""workspace"", ""tableName"")"
69457,./TargetProjects/drill/metastore/iceberg-metastore/src/test/java/org/apache/drill/metastore/iceberg/transform/TestFilterTransformer.java,144,,"      Expressions.equal(MetastoreColumn.STORAGE_PLUGIN.columnName(), ""dfs""),"
69458,./TargetProjects/drill/metastore/iceberg-metastore/src/test/java/org/apache/drill/metastore/iceberg/transform/TestFilterTransformer.java,145,,"      Expressions.equal(MetastoreColumn.WORKSPACE.columnName(), ""tmp""),"
69459,./TargetProjects/drill/metastore/iceberg-metastore/src/test/java/org/apache/drill/metastore/iceberg/transform/TestFilterTransformer.java,146,,"      Expressions.equal(MetastoreColumn.TABLE_NAME.columnName(), ""nation""),"
69460,./TargetProjects/drill/metastore/iceberg-metastore/src/test/java/org/apache/drill/metastore/iceberg/write/TestParquetFileWriter.java,65,,"      Types.NestedField.optional(1, ""int_field"", Types.IntegerType.get()),"
69461,./TargetProjects/drill/metastore/iceberg-metastore/src/test/java/org/apache/drill/metastore/iceberg/write/TestParquetFileWriter.java,87,,"    record.setField(""string_field"", ""abc"");"
69462,./TargetProjects/drill/metastore/metastore-api/src/test/java/org/apache/drill/metastore/components/tables/AbstractBasicTablesRequestsTest.java,79,,"    TableInfo tableInfo = TableInfo.builder().storagePlugin(""dfs"").workspace(""tmp"").name(""absent"").build();"
69463,./TargetProjects/drill/metastore/metastore-api/src/test/java/org/apache/drill/metastore/components/tables/AbstractBasicTablesRequestsTest.java,150,,"      ""part_int=3"");"
69464,./TargetProjects/drill/metastore/metastore-api/src/test/java/org/apache/drill/metastore/components/tables/AbstractBasicTablesRequestsTest.java,158,,"      Arrays.asList(""/tmp/nation/part_int=3/d3"", ""/tmp/nation/part_int=3/d4""),"
69465,./TargetProjects/drill/metastore/metastore-api/src/test/java/org/apache/drill/metastore/components/tables/AbstractBasicTablesRequestsTest.java,158,,"      Arrays.asList(""/tmp/nation/part_int=3/d3"", ""/tmp/nation/part_int=3/d4""),"
69466,./TargetProjects/drill/metastore/metastore-api/src/test/java/org/apache/drill/metastore/components/tables/AbstractBasicTablesRequestsTest.java,177,,"      ""n_nation"");"
69467,./TargetProjects/drill/metastore/metastore-api/src/test/java/org/apache/drill/metastore/components/tables/AbstractBasicTablesRequestsTest.java,187,,"        .key(""part_int=4"")"
69468,./TargetProjects/drill/metastore/metastore-api/src/test/java/org/apache/drill/metastore/components/tables/AbstractBasicTablesRequestsTest.java,296,,"        ""/tmp/nation/part_int=4/part_varchar=g/0_0_0.parquet"","
69469,./TargetProjects/drill/metastore/metastore-api/src/test/java/org/apache/drill/metastore/components/tables/AbstractBasicTablesRequestsTest.java,297,,"        ""/tmp/nation/part_int=3/part_varchar=g/0_0_1.parquet"")"
69470,./TargetProjects/drill/metastore/metastore-api/src/test/java/org/apache/drill/metastore/components/tables/AbstractBasicTablesRequestsTest.java,365,,"      Arrays.asList(""/tmp/nation/part_int=3/part_varchar=g/0_0_0.parquet"","
69471,./TargetProjects/drill/metastore/metastore-api/src/test/java/org/apache/drill/metastore/components/tables/AbstractBasicTablesRequestsTest.java,411,,"      Arrays.asList(""/tmp/nation/part_int=4/d5"", ""/tmp/nation/part_int=4/part_varchar=g""));"
69472,./TargetProjects/drill/metastore/metastore-api/src/test/java/org/apache/drill/metastore/components/tables/AbstractBasicTablesRequestsTest.java,411,,"      Arrays.asList(""/tmp/nation/part_int=4/d5"", ""/tmp/nation/part_int=4/part_varchar=g""));"
69473,./TargetProjects/drill/metastore/metastore-api/src/test/java/org/apache/drill/metastore/components/tables/AbstractBasicTablesRequestsTest.java,424,,"      Collections.singletonList(""/tmp/nation/part_int=3/part_varchar=g""));"
69474,./TargetProjects/drill/metastore/metastore-api/src/test/java/org/apache/drill/metastore/components/tables/AbstractTablesMetastoreTest.java,73,,"      .storagePlugin(""dfs"")"
69475,./TargetProjects/drill/metastore/metastore-api/src/test/java/org/apache/drill/metastore/components/tables/AbstractTablesMetastoreTest.java,74,,"      .workspace(""tmp"")"
69476,./TargetProjects/drill/metastore/metastore-api/src/test/java/org/apache/drill/metastore/components/tables/AbstractTablesMetastoreTest.java,75,,"      .name(""nation"")"
69477,./TargetProjects/drill/metastore/metastore-api/src/test/java/org/apache/drill/metastore/components/tables/AbstractTablesMetastoreTest.java,96,,"      .metadataKey(""1994"")"
69478,./TargetProjects/drill/metastore/metastore-api/src/test/java/org/apache/drill/metastore/components/tables/AbstractTablesMetastoreTest.java,330,,"      .location(""/tmp/nation/1994"")"
69479,./TargetProjects/drill/metastore/metastore-api/src/test/java/org/apache/drill/metastore/components/tables/AbstractTablesMetastoreTest.java,408,,"      .metadataKey(""1995"")"
69480,./TargetProjects/drill/metastore/metastore-api/src/test/java/org/apache/drill/metastore/components/tables/TestBasicTablesRequestsRequestMetadata.java,42,,"      .column(""col"")"
69481,./TargetProjects/drill/metastore/metastore-api/src/test/java/org/apache/drill/metastore/components/tables/TestBasicTablesTransformer.java,45,,"      .storagePlugin(""dfs"")"
69482,./TargetProjects/drill/metastore/metastore-api/src/test/java/org/apache/drill/metastore/components/tables/TestBasicTablesTransformer.java,46,,"      .workspace(""tmp"")"
69483,./TargetProjects/drill/metastore/metastore-api/src/test/java/org/apache/drill/metastore/components/tables/TestBasicTablesTransformer.java,47,,"      .tableName(""nation"")"
69484,./TargetProjects/drill/metastore/metastore-api/src/test/java/org/apache/drill/metastore/components/tables/TestBasicTablesTransformer.java,119,,"      .path(""/tmp/nation/0_0_0.parquet"")"
69485,./TargetProjects/drill/metastore/metastore-api/src/test/java/org/apache/drill/metastore/components/tables/TestBasicTablesTransformer.java,179,,"      .column(""dir0"")"
69486,./TargetProjects/drill/metastore/metastore-api/src/test/java/org/apache/drill/metastore/components/tables/TestTableMetadataUnitConversion.java,156,,"      .key(""part_int=3"")"
69487,./TargetProjects/drill/metastore/metastore-api/src/test/java/org/apache/drill/metastore/components/tables/TestTableMetadataUnitConversion.java,164,,"    locations.add(new Path(""part_int=3/part_varchar=g/0_0_0.parquet""));"
69488,./TargetProjects/drill/metastore/rdbms-metastore/src/test/java/org/apache/drill/metastore/rdbms/components/tables/TestTablesMetadataMapper.java,122,,"    FilterExpression filterExpression = FilterExpression.equal(MetastoreColumn.STORAGE_PLUGIN, ""dfs"");"
69489,./TargetProjects/drill/metastore/rdbms-metastore/src/test/java/org/apache/drill/metastore/rdbms/components/tables/TestTablesMetadataMapper.java,165,,"        .workspace(""tmp"")"
69490,./TargetProjects/drill/metastore/rdbms-metastore/src/test/java/org/apache/drill/metastore/rdbms/components/tables/TestTablesMetadataMapper.java,171,,"        .tableName(""nation"")"
69491,./TargetProjects/drill/metastore/rdbms-metastore/src/test/java/org/apache/drill/metastore/rdbms/components/tables/TestTablesMetadataMapper.java,200,,"        .metadataKey(""2008"")"
69492,./TargetProjects/drill/metastore/rdbms-metastore/src/test/java/org/apache/drill/metastore/rdbms/components/tables/TestTablesMetadataMapper.java,214,,"        .metadataKey(""2009"")"
69493,./TargetProjects/drill/metastore/rdbms-metastore/src/test/java/org/apache/drill/metastore/rdbms/components/tables/TestTablesTransformer.java,74,,"      assertThat(e.getMessage(), startsWith(""Metadata mapper is absent for type""));"
69494,./TargetProjects/drill/metastore/rdbms-metastore/src/test/java/org/apache/drill/metastore/rdbms/components/tables/TestTablesTransformer.java,110,,"        .storagePlugin(""dfs"")"
69495,./TargetProjects/drill/metastore/rdbms-metastore/src/test/java/org/apache/drill/metastore/rdbms/components/tables/TestTablesTransformer.java,111,,"        .workspace(""tmp"")"
69496,./TargetProjects/drill/metastore/rdbms-metastore/src/test/java/org/apache/drill/metastore/rdbms/components/tables/TestTablesTransformer.java,112,,"        .tableName(""nation"")"
69497,./TargetProjects/drill/metastore/rdbms-metastore/src/test/java/org/apache/drill/metastore/rdbms/util/TestConverterUtil.java,40,,"    assertEquals(""null"", ConverterUtil.convertToString(null));"
69498,./TargetProjects/drill/metastore/rdbms-metastore/src/test/java/org/apache/drill/metastore/rdbms/util/TestConverterUtil.java,68,,"      assertThat(e.getMessage(), startsWith(""Unable to convert""));"
69499,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/common/types/TypeProtos.java,1061,,"                @SuppressWarnings(""deprecation"")"
69500,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/BitControl.java,418,,"    @SuppressWarnings({""unused""})"
69501,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/BitData.java,250,,"    @SuppressWarnings({""unused""})"
69502,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/SchemaBitControl.java,141,,"                case 3: return ""endpoint"";"
69503,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/SchemaBitControl.java,379,,"                case 2: return ""handle"";"
69504,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/SchemaBitData.java,127,,"                case 1: return ""rpcVersion"";"
69505,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/SchemaBitData.java,392,,"                case 1: return ""queryId"";"
69506,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/SchemaUserBitShared.java,382,,"                case 1: return ""errorId"";"
69507,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/SchemaUserBitShared.java,383,,"                case 2: return ""endpoint"";"
69508,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/SchemaUserBitShared.java,385,,"                case 4: return ""message"";"
69509,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/SchemaUserBitShared.java,930,,"                case 4: return ""affectedRowsCount"";"
69510,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/SchemaUserBitShared.java,1056,,"                case 1: return ""type"";"
69511,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/SchemaUserBitShared.java,1057,,"                case 2: return ""name"";"
69512,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/SchemaUserBitShared.java,1058,,"                case 3: return ""child"";"
69513,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/SchemaUserBitShared.java,1456,,"                case 2: return ""queryId"";"
69514,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/SchemaUserBitShared.java,1457,,"                case 3: return ""error"";"
69515,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/SchemaUserBitShared.java,1743,,"                case 1: return ""query"";"
69516,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/SchemaUserBitShared.java,1744,,"                case 2: return ""start"";"
69517,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/SchemaUserBitShared.java,1745,,"                case 3: return ""state"";"
69518,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/SchemaUserBitShared.java,1746,,"                case 4: return ""user"";"
69519,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/SchemaUserBitShared.java,1747,,"                case 5: return ""foreman"";"
69520,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/SchemaUserBitShared.java,1748,,"                case 6: return ""optionsJson"";"
69521,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/SchemaUserBitShared.java,1749,,"                case 7: return ""totalCost"";"
69522,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/SchemaUserBitShared.java,1750,,"                case 8: return ""queueName"";"
69523,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/SchemaUserProtos.java,242,,"                case 1: return ""properties"";"
69524,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/SchemaUserProtos.java,561,,"                case 3: return ""rpcVersion"";"
69525,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/SchemaUserProtos.java,693,,"                case 1: return ""queryId"";"
69526,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/SchemaUserProtos.java,817,,"                case 2: return ""type"";"
69527,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/SchemaUserProtos.java,952,,"                case 1: return ""status"";"
69528,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/SchemaUserProtos.java,954,,"                case 3: return ""fragments"";"
69529,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/SchemaUserProtos.java,955,,"                case 4: return ""error"";"
69530,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/SchemaUserProtos.java,1358,,"                case 1: return ""catalogNameFilter"";"
69531,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/SchemaUserProtos.java,1479,,"                case 1: return ""catalogName"";"
69532,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/SchemaUserProtos.java,1733,,"                case 2: return ""schemaNameFilter"";"
69533,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/SchemaUserProtos.java,1866,,"                case 2: return ""schemaName"";"
69534,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/SchemaUserProtos.java,2136,,"                case 3: return ""tableNameFilter"";"
69535,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/SchemaUserProtos.java,2268,,"                case 3: return ""tableName"";"
69536,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/SchemaUserProtos.java,2735,,"                case 4: return ""columnName"";"
69537,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/SchemaUserProtos.java,2738,,"                case 7: return ""isNullable"";"
69538,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/SchemaUserProtos.java,2739,,"                case 8: return ""dataType"";"
69539,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/SchemaUserProtos.java,2890,,"                case 2: return ""columns"";"
69540,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/UserBitShared.java,125,,"          ""EnumValueDescriptor is not for this type."");"
69541,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/UserBitShared.java,572,,"    @SuppressWarnings({""unused""})"
69542,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/UserBitShared.java,1959,,"                @SuppressWarnings(""deprecation"")"
69543,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/UserProtos.java,487,,"          ""EnumValueDescriptor is not for this type."");"
69544,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/UserProtos.java,3060,,"    @SuppressWarnings({""unused""})"
69545,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/UserProtos.java,6604,,"                @SuppressWarnings(""deprecation"")"
69546,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/UserProtos.java,48984,,"        new java.lang.String[] { ""Query"", ""Type"", ""SplitPlan"", });"
69547,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/UserProtos.java,48990,,"        new java.lang.String[] { ""Status"", ""QueryId"", ""Fragments"", ""Error"", });"
69548,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/UserProtos.java,48990,,"        new java.lang.String[] { ""Status"", ""QueryId"", ""Fragments"", ""Error"", });"
69549,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/UserProtos.java,49008,,"        new java.lang.String[] { ""CatalogNameFilter"", });"
69550,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/UserProtos.java,49014,,"        new java.lang.String[] { ""CatalogName"", ""Description"", ""Connect"", });"
69551,./TargetProjects/drill/protocol/src/main/java/org/apache/drill/exec/proto/UserProtos.java,49032,,"        new java.lang.String[] { ""CatalogName"", ""SchemaName"", ""Owner"", ""Type"", ""Mutable"", });"
69552,./TargetProjects/drill/tools/fmpp/src/main/java/org/apache/drill/fmpp/mojo/FMPPMojo.java,148,,"              throw new MojoFailureException(format(""can not delete %s"", tmp));"
69553,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/BoundFilterBenchmark.java,74,,"          ""foo"","
69554,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/FilterPartitionBenchmark.java,296,,"    Filter filter = new SelectorFilter(""dimSequential"", ""199"");"
69555,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/FilterPartitionBenchmark.java,296,,"    Filter filter = new SelectorFilter(""dimSequential"", ""199"");"
69556,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/FilterPartitionBenchmark.java,362,,"    Filter filter2 = new AndFilter(Arrays.asList(new SelectorFilter(""dimMultivalEnumerated2"", ""Corundum""), new NoBitmapSelectorFilter(""dimMultivalEnumerated"", ""Bar"")));"
69557,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/FilterPartitionBenchmark.java,362,,"    Filter filter2 = new AndFilter(Arrays.asList(new SelectorFilter(""dimMultivalEnumerated2"", ""Corundum""), new NoBitmapSelectorFilter(""dimMultivalEnumerated"", ""Bar"")));"
69558,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/FilterPartitionBenchmark.java,362,,"    Filter filter2 = new AndFilter(Arrays.asList(new SelectorFilter(""dimMultivalEnumerated2"", ""Corundum""), new NoBitmapSelectorFilter(""dimMultivalEnumerated"", ""Bar"")));"
69559,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/FilterPartitionBenchmark.java,362,,"    Filter filter2 = new AndFilter(Arrays.asList(new SelectorFilter(""dimMultivalEnumerated2"", ""Corundum""), new NoBitmapSelectorFilter(""dimMultivalEnumerated"", ""Bar"")));"
69560,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/FilteredAggregatorBenchmark.java,174,,"            new BoundDimFilter(""dimSequential"", ""-1"", ""-1"", true, true, null, null, StringComparators.ALPHANUMERIC),"
69561,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/FlattenJSONBenchmarkUtil.java,57,,"        new TimestampSpec(""ts"", ""iso"", null),"
69562,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/GroupByTypeInterfaceBenchmark.java,181,,"          ""sumLongSequential"","
69563,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/GroupByTypeInterfaceBenchmark.java,186,,"          .setDataSource(""blah"")"
69564,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/IndexedTableJoinCursorBenchmark.java,102,,"      ImmutableSet.of(""stringKey""),"
69565,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/IndexedTableJoinCursorBenchmark.java,106,,"      ImmutableSet.of(""longKey""),"
69566,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/JoinAndLookupBenchmark.java,417,,"    blackhole.consume(getLastValue(cursors, ""c.v""));"
69567,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/JoinAndLookupBenchmark.java,426,,"        new SelectorDimFilter(""c.v"", ""Canada"", null).toFilter(),"
69568,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/JoinAndLookupBenchmark.java,485,,"    blackhole.consume(getLastValue(cursors, ""c.countryName""));"
69569,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/LikeFilterBenchmark.java,75,,"      ""foo"","
69570,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/TopNTypeInterfaceBenchmark.java,157,,"    GeneratorSchemaInfo basicSchema = GeneratorBasicSchemas.SCHEMA_MAP.get(""basic"");"
69571,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/TopNTypeInterfaceBenchmark.java,163,,"      queryAggs.add(new LongSumAggregatorFactory(""sumLongSequential"", ""sumLongSequential""));"
69572,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/TopNTypeInterfaceBenchmark.java,165,,"      queryAggs.add(new DoubleSumAggregatorFactory(""sumFloatNormal"", ""sumFloatNormal""));"
69573,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/TopNTypeInterfaceBenchmark.java,171,,"          .dataSource(""blah"")"
69574,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/compression/BaseColumnarLongsBenchmark.java,64,,"      ""lz4-longs"","
69575,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/compression/BaseColumnarLongsBenchmark.java,65,,"      ""lz4-auto"""
69576,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/indexing/IncrementalIndexReadBenchmark.java,156,,"    selectors.add(makeDimensionSelector(cursor, ""dimSequential""));"
69577,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/query/CachingClusteredClientBenchmark.java,404,,"                  .aggregators(new LongSumAggregatorFactory(""sumLongSequential"", ""sumLongSequential""))"
69578,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/query/GroupByBenchmark.java,197,,"      queryAggs.add(new LongSumAggregatorFactory(""sumLongSequential"", ""sumLongSequential""));"
69579,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/query/GroupByBenchmark.java,200,,"          .setDataSource(""blah"")"
69580,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/query/GroupByBenchmark.java,202,,"          .setDimensions(new DefaultDimensionSpec(""dimSequential"", null), new DefaultDimensionSpec(""dimZipf"", null))"
69581,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/query/GroupByBenchmark.java,202,,"          .setDimensions(new DefaultDimensionSpec(""dimSequential"", null), new DefaultDimensionSpec(""dimZipf"", null))"
69582,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/query/GroupByBenchmark.java,205,,"          .setContext(ImmutableMap.of(""vectorize"", vectorize))"
69583,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/query/GroupByBenchmark.java,277,,"          new LongSumAggregatorFactory(""rows"", ""rows""),"
69584,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/query/GroupByBenchmark.java,278,,"          new DoubleSumAggregatorFactory(""sumFloatNormal"", ""sumFloatNormal""),"
69585,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/query/GroupByBenchmark.java,279,,"          new DoubleMinAggregatorFactory(""minFloatZipf"", ""minFloatZipf"")"
69586,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/query/ScanBenchmark.java,185,,"                 .dataSource(""blah"")"
69587,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/query/ScanBenchmark.java,425,,"        SegmentId.dummy(""qIndex""),"
69588,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/query/SearchBenchmark.java,193,,"                 .dataSource(""blah"")"
69589,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/query/SearchBenchmark.java,218,,"    dimFilters.add(new InDimFilter(""dimUniform"", dimUniformFilterVals, null));"
69590,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/query/SqlBenchmark.java,153,,"      + ""  (\n"""
69591,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/query/SqlBenchmark.java,155,,"      + ""    FROM (SELECT * FROM foo WHERE dimUniform != 1)\n"""
69592,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/query/SqlBenchmark.java,157,,"      + ""    GROUP BY dimSequential\n"""
69593,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/query/SqlBenchmark.java,158,,"      + ""  )\n"""
69594,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/query/SqlBenchmark.java,159,,"      + ""UNION ALL\n"""
69595,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/query/TimeseriesBenchmark.java,161,,"      queryAggs.add(new LongSumAggregatorFactory(""sumLongSequential"", ""sumLongSequential""));"
69596,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/query/TimeseriesBenchmark.java,169,,"                .dataSource(""blah"")"
69597,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/query/TimeseriesBenchmark.java,400,,"        SegmentId.dummy(""qIndex""),"
69598,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/query/TopNBenchmark.java,159,,"      queryAggs.add(new LongSumAggregatorFactory(""sumLongSequential"", ""sumLongSequential""));"
69599,./TargetProjects/druid/benchmarks/src/test/java/org/apache/druid/benchmark/query/timecompare/TimeCompareBenchmark.java,197,,"                  ""sumLongSequential"", ""sumLongSequential"""
69600,./TargetProjects/druid/core/src/main/java/org/apache/druid/collections/ReferenceCountingResourceHolder.java,110,,"          log.warn(new ISE(""Already closed""), ""Already closed"");"
69601,./TargetProjects/druid/core/src/main/java/org/apache/druid/guice/JsonConfigProvider.java,84,,"  @SuppressWarnings(""unchecked"")"
69602,./TargetProjects/druid/core/src/main/java/org/apache/druid/indexer/TaskStatus.java,107,,"      @JsonProperty(""status"") TaskState status,"
69603,./TargetProjects/druid/core/src/main/java/org/apache/druid/java/util/common/granularity/PeriodGranularity.java,57,,"      @JsonProperty(""period"") Period period,"
69604,./TargetProjects/druid/core/src/main/java/org/apache/druid/java/util/common/parsers/TimestampParser.java,47,,"        Preconditions.checkArgument(!Strings.isNullOrEmpty(input), ""null timestamp"");"
69605,./TargetProjects/druid/core/src/main/java/org/apache/druid/math/expr/ApplyFunction.java,239,,"            StringUtils.format(""lambda expression argument count does not match %s argument count"", name())"
69606,./TargetProjects/druid/core/src/main/java/org/apache/druid/math/expr/BinaryLogicalOperatorExpr.java,30,,"@SuppressWarnings(""ClassName"")"
69607,./TargetProjects/druid/core/src/main/java/org/apache/druid/math/expr/BinaryMathOperatorExpr.java,33,,"@SuppressWarnings(""ClassName"")"
69608,./TargetProjects/druid/core/src/main/java/org/apache/druid/math/expr/ExprEval.java,517,,"        throw new IllegalArgumentException(""invalid type "" + type);"
69609,./TargetProjects/druid/core/src/main/java/org/apache/druid/math/expr/ExprListenerImpl.java,139,,"        throw new RE(""Unrecognized binary operator %s"", ctx.getChild(1).getText());"
69610,./TargetProjects/druid/core/src/main/java/org/apache/druid/math/expr/Function.java,156,,"        throw new IAE(""Function[%s] needs 1 argument"", name());"
69611,./TargetProjects/druid/core/src/main/java/org/apache/druid/math/expr/Function.java,2075,,"        throw new IAE(""Function[%s] needs 3 arguments"", name());"
69612,./TargetProjects/druid/core/src/main/java/org/apache/druid/timeline/VersionedIntervalTimeline.java,527,,"  @GuardedBy(""lock"")"
69613,./TargetProjects/druid/core/src/main/java/org/apache/druid/timeline/partition/AtomicUpdateGroup.java,116,,"    Preconditions.checkState(!isEmpty(), ""Empty atomicUpdateGroup"");"
69614,./TargetProjects/druid/core/src/test/java/org/apache/druid/common/config/JacksonConfigManagerTest.java,75,,"    TestConfig config = new TestConfig(""version"", null, 3);"
69615,./TargetProjects/druid/core/src/test/java/org/apache/druid/common/utils/IdUtilsTest.java,79,,"    expectedException.expectMessage(""thingToValidate cannot contain whitespace character except space."");"
69616,./TargetProjects/druid/core/src/test/java/org/apache/druid/common/utils/IdUtilsTest.java,135,,"        ""prefix"","
69617,./TargetProjects/druid/core/src/test/java/org/apache/druid/common/utils/IdUtilsTest.java,136,,"        ""suffix"","
69618,./TargetProjects/druid/core/src/test/java/org/apache/druid/common/utils/IdUtilsTest.java,137,,"        DateTimes.of(""2020-01-01""),"
69619,./TargetProjects/druid/core/src/test/java/org/apache/druid/common/utils/IdUtilsTest.java,138,,"        ""type"","
69620,./TargetProjects/druid/core/src/test/java/org/apache/druid/common/utils/IdUtilsTest.java,139,,"        ""datasource"","
69621,./TargetProjects/druid/core/src/test/java/org/apache/druid/common/utils/JodaUtilsTest.java,46,,"        Intervals.of(""2011-03-03/2011-03-04""),"
69622,./TargetProjects/druid/core/src/test/java/org/apache/druid/common/utils/JodaUtilsTest.java,47,,"        Intervals.of(""2011-01-01/2011-01-02""),"
69623,./TargetProjects/druid/core/src/test/java/org/apache/druid/common/utils/JodaUtilsTest.java,48,,"        Intervals.of(""2011-02-01/2011-02-05""),"
69624,./TargetProjects/druid/core/src/test/java/org/apache/druid/common/utils/JodaUtilsTest.java,49,,"        Intervals.of(""2011-02-03/2011-02-08""),"
69625,./TargetProjects/druid/core/src/test/java/org/apache/druid/common/utils/JodaUtilsTest.java,50,,"        Intervals.of(""2011-01-01/2011-01-03""),"
69626,./TargetProjects/druid/core/src/test/java/org/apache/druid/common/utils/JodaUtilsTest.java,51,,"        Intervals.of(""2011-03-01/2011-03-02""),"
69627,./TargetProjects/druid/core/src/test/java/org/apache/druid/common/utils/JodaUtilsTest.java,52,,"        Intervals.of(""2011-03-05/2011-03-06""),"
69628,./TargetProjects/druid/core/src/test/java/org/apache/druid/common/utils/JodaUtilsTest.java,53,,"        Intervals.of(""2011-02-01/2011-02-02"")"
69629,./TargetProjects/druid/core/src/test/java/org/apache/druid/common/utils/JodaUtilsTest.java,73,,"        Intervals.of(""2011-01-02/2011-01-03""),"
69630,./TargetProjects/druid/core/src/test/java/org/apache/druid/common/utils/JodaUtilsTest.java,84,,"        Intervals.of(""2011-02-01/2011-02-08""),"
69631,./TargetProjects/druid/core/src/test/java/org/apache/druid/common/utils/JodaUtilsTest.java,133,,"        Intervals.of(""2011-02-01/2011-03-10""),"
69632,./TargetProjects/druid/core/src/test/java/org/apache/druid/common/utils/JodaUtilsTest.java,301,,"        Intervals.of(""2016-01-15/2016-01-19"")"
69633,./TargetProjects/druid/core/src/test/java/org/apache/druid/common/utils/PropUtilsTest.java,41,,"    prop.setProperty(""key"", ""value"");"
69634,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/CombiningInputSourceTest.java,78,,"            URI.create(""http://test.com/http-test1""),"
69635,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/CsvReaderTest.java,49,,"      new DimensionsSpec(DimensionsSpec.getDefaultSchemas(Arrays.asList(""ts"", ""name""))),"
69636,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/CsvReaderTest.java,64,,"            ""2019-01-01T00:00:10Z,name_1,5"","
69637,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/CsvReaderTest.java,65,,"            ""2019-01-01T00:00:20Z,name_2,10"","
69638,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/CsvReaderTest.java,66,,"            ""2019-01-01T00:00:30Z,name_3,15"""
69639,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/CsvReaderTest.java,69,,"    final CsvInputFormat format = new CsvInputFormat(ImmutableList.of(""ts"", ""name"", ""score""), null, null, false, 0);"
69640,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/CsvReaderTest.java,169,,"            ImmutableList.of(""Timestamp""),"
69641,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/CsvReaderTest.java,171,,"                ""Value"","
69642,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/CsvReaderTest.java,173,,"                ""Comment"","
69643,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/DelimitedInputFormatTest.java,44,,"        ""delim"","
69644,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/DelimitedParseSpecTest.java,40,,"        new TimestampSpec(""abc"", ""iso"", null),"
69645,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/DelimitedReaderTest.java,46,,"      new DimensionsSpec(DimensionsSpec.getDefaultSchemas(Arrays.asList(""ts"", ""name""))),"
69646,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/DelimitedReaderTest.java,61,,"            ""2019-01-01T00:00:10Z\tname_1\t5"","
69647,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/DelimitedReaderTest.java,62,,"            ""2019-01-01T00:00:20Z\tname_2\t10"","
69648,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/DelimitedReaderTest.java,63,,"            ""2019-01-01T00:00:30Z\tname_3\t15"""
69649,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/DelimitedReaderTest.java,67,,"        ImmutableList.of(""ts"", ""name"", ""score""),"
69650,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/FileIteratingFirehoseTest.java,51,,"        ImmutableList.of(""2000,foo\n2000,bar\n""),"
69651,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/FileIteratingFirehoseTest.java,52,,"        ImmutableList.of(""2000,foo\n2000,bar\n"", ""2000,baz""),"
69652,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/HttpInputSourceTest.java,49,,"        ""myName"","
69653,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/HttpInputSourceTest.java,50,,"        new DefaultPasswordProvider(""myPassword""),"
69654,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/InputEntityIteratingReaderTest.java,65,,"                DimensionsSpec.getDefaultSchemas(ImmutableList.of(""time"", ""name"", ""score""))"
69655,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/InputEntityIteratingReaderTest.java,65,,"                DimensionsSpec.getDefaultSchemas(ImmutableList.of(""time"", ""name"", ""score""))"
69656,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/InputRowParserSerdeTest.java,52,,"            new TimestampSpec(""timestamp"", ""iso"", null),"
69657,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/InputRowParserSerdeTest.java,53,,"            new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(""foo"", ""bar"")), null, null),"
69658,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/InputRowParserSerdeTest.java,53,,"            new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(""foo"", ""bar"")), null, null),"
69659,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/InputRowParserSerdeTest.java,131,,"                DimensionsSpec.getDefaultSchemas(ImmutableList.of(""foo"", ""values"")),"
69660,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/InputRowParserSerdeTest.java,132,,"                ImmutableList.of(""toobig"", ""value""),"
69661,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/JSONParseSpecTest.java,48,,"        new TimestampSpec(""timestamp"", ""iso"", null),"
69662,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/JSONParseSpecTest.java,48,,"        new TimestampSpec(""timestamp"", ""iso"", null),"
69663,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/JSONParseSpecTest.java,49,,"        new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(""bar"", ""foo"")), null, null),"
69664,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/JSONParseSpecTest.java,49,,"        new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(""bar"", ""foo"")), null, null),"
69665,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/JSONParseSpecTest.java,53,,"                new JSONPathFieldSpec(JSONPathFieldType.ROOT, ""root_baz"", ""baz""),"
69666,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/JSONPathSpecTest.java,42,,"    fields.add(JSONPathFieldSpec.createNestedField(""foobar1"", ""$.foo.bar1""));"
69667,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/JSONPathSpecTest.java,43,,"    fields.add(JSONPathFieldSpec.createNestedField(""baz0"", ""$.baz[0]""));"
69668,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/JSONPathSpecTest.java,44,,"    fields.add(JSONPathFieldSpec.createNestedField(""hey0barx"", ""$.hey[0].barx""));"
69669,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/JavaScriptParseSpecTest.java,56,,"        new TimestampSpec(""abc"", ""iso"", null),"
69670,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/JavaScriptParseSpecTest.java,56,,"        new TimestampSpec(""abc"", ""iso"", null),"
69671,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/JsonLineReaderTest.java,50,,"                new JSONPathFieldSpec(JSONPathFieldType.ROOT, ""root_baz"", ""baz""),"
69672,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/JsonLineReaderTest.java,52,,"                new JSONPathFieldSpec(JSONPathFieldType.PATH, ""path_omg"", ""$.o.mg""),"
69673,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/JsonLineReaderTest.java,52,,"                new JSONPathFieldSpec(JSONPathFieldType.PATH, ""path_omg"", ""$.o.mg""),"
69674,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/JsonLineReaderTest.java,68,,"            new TimestampSpec(""timestamp"", ""iso"", null),"
69675,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/JsonLineReaderTest.java,68,,"            new TimestampSpec(""timestamp"", ""iso"", null),"
69676,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/JsonLineReaderTest.java,69,,"            new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(""bar"", ""foo""))),"
69677,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/JsonLineReaderTest.java,69,,"            new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(""bar"", ""foo""))),"
69678,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/JsonReaderTest.java,55,,"                new JSONPathFieldSpec(JSONPathFieldType.ROOT, ""root_baz"", ""baz""),"
69679,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/JsonReaderTest.java,55,,"                new JSONPathFieldSpec(JSONPathFieldType.ROOT, ""root_baz"", ""baz""),"
69680,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/JsonReaderTest.java,56,,"                new JSONPathFieldSpec(JSONPathFieldType.ROOT, ""root_baz2"", ""baz2""),"
69681,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/JsonReaderTest.java,56,,"                new JSONPathFieldSpec(JSONPathFieldType.ROOT, ""root_baz2"", ""baz2""),"
69682,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/JsonReaderTest.java,57,,"                new JSONPathFieldSpec(JSONPathFieldType.PATH, ""path_omg"", ""$.o.mg""),"
69683,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/JsonReaderTest.java,57,,"                new JSONPathFieldSpec(JSONPathFieldType.PATH, ""path_omg"", ""$.o.mg""),"
69684,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/JsonReaderTest.java,58,,"                new JSONPathFieldSpec(JSONPathFieldType.PATH, ""path_omg2"", ""$.o.mg2""),"
69685,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/JsonReaderTest.java,58,,"                new JSONPathFieldSpec(JSONPathFieldType.PATH, ""path_omg2"", ""$.o.mg2""),"
69686,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/JsonReaderTest.java,59,,"                new JSONPathFieldSpec(JSONPathFieldType.JQ, ""jq_omg"", "".o.mg""),"
69687,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/JsonReaderTest.java,59,,"                new JSONPathFieldSpec(JSONPathFieldType.JQ, ""jq_omg"", "".o.mg""),"
69688,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/JsonReaderTest.java,60,,"                new JSONPathFieldSpec(JSONPathFieldType.JQ, ""jq_omg2"", "".o.mg2"")"
69689,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/JsonReaderTest.java,60,,"                new JSONPathFieldSpec(JSONPathFieldType.JQ, ""jq_omg2"", "".o.mg2"")"
69690,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/JsonReaderTest.java,69,,"        StringUtils.toUtf8(""{\""timestamp\"":\""2019-01-01\"",\""bar\"":null,\""foo\"":\""x\"",\""baz\"":4,\""o\"":{\""mg\"":1}}"""
69691,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/JsonReaderTest.java,76,,"            new TimestampSpec(""timestamp"", ""iso"", null),"
69692,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/JsonReaderTest.java,76,,"            new TimestampSpec(""timestamp"", ""iso"", null),"
69693,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/JsonReaderTest.java,77,,"            new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(""bar"", ""foo""))),"
69694,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/JsonReaderTest.java,77,,"            new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(""bar"", ""foo""))),"
69695,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/LocalInputSourceTest.java,105,,"      final File file = File.createTempFile(""local-input-source"", "".data"", baseDir);"
69696,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/LocalInputSourceTest.java,105,,"      final File file = File.createTempFile(""local-input-source"", "".data"", baseDir);"
69697,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/LocalInputSourceTest.java,107,,"        writer.write(""test"");"
69698,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/MapInputRowParserTest.java,42,,"  private final TimestampSpec timestampSpec = new TimestampSpec(""time"", null, null);"
69699,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/MapInputRowParserTest.java,43,,"  private final List<String> dimensions = ImmutableList.of(""dim"");"
69700,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/MapInputRowParserTest.java,53,,"        ImmutableMap.of(""time"", ""2020-01-01"", ""dim"", 0, ""met"", 10)"
69701,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/ParseSpecTest.java,65,,"    @SuppressWarnings(""unused"") // expected exception"
69702,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/ParseSpecTest.java,68,,"            ""timestamp"","
69703,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/ParseSpecTest.java,69,,"            ""auto"","
69704,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/RegexParseSpecTest.java,40,,"        new TimestampSpec(""abc"", ""iso"", null),"
69705,./TargetProjects/druid/core/src/test/java/org/apache/druid/data/input/impl/TimestampSpecTest.java,34,,"    TimestampSpec spec = new TimestampSpec(""TIMEstamp"", ""yyyy-MM-dd"", null);"
69706,./TargetProjects/druid/core/src/test/java/org/apache/druid/guice/ConditionalMultibindTest.java,49,,"  private static final String ANIMAL_TYPE = ""animal.type"";"
69707,./TargetProjects/druid/core/src/test/java/org/apache/druid/guice/ConditionalMultibindTest.java,86,,"    props.setProperty(""animal.type"", ""pets"");"
69708,./TargetProjects/druid/core/src/test/java/org/apache/druid/guice/DruidSecondaryModuleTest.java,64,,"      Assert.assertEquals(""this is an injection test"", object.test);"
69709,./TargetProjects/druid/core/src/test/java/org/apache/druid/guice/DruidSecondaryModuleTest.java,118,,"          ImmutableMap.of(""foo"", ""bar"", """", ""empty""),"
69710,./TargetProjects/druid/core/src/test/java/org/apache/druid/guice/DruidSecondaryModuleTest.java,118,,"          ImmutableMap.of(""foo"", ""bar"", """", ""empty""),"
69711,./TargetProjects/druid/core/src/test/java/org/apache/druid/guice/JsonConfiguratorTest.java,113,,"    properties.setProperty(PROP_PREFIX + ""prop1"", ""prop1"");"
69712,./TargetProjects/druid/core/src/test/java/org/apache/druid/guice/JsonConfiguratorTest.java,114,,"    properties.setProperty(PROP_PREFIX + ""prop1List"", ""[\""prop2\""]"");"
69713,./TargetProjects/druid/core/src/test/java/org/apache/druid/guice/PolyBindTest.java,57,,"                    PolyBind.createChoice(binder, ""billy"", Key.get(Gogo.class), Key.get(GoA.class));"
69714,./TargetProjects/druid/core/src/test/java/org/apache/druid/guice/PolyBindTest.java,58,,"                    PolyBind.createChoiceWithDefault(binder, ""sally"", Key.get(GogoSally.class), ""b"");"
69715,./TargetProjects/druid/core/src/test/java/org/apache/druid/guice/PolyBindTest.java,85,,"            PolyBind.createChoice(binder, ""billy"", Key.get(Gogo.class, Names.named(""reverse"")), Key.get(GoB.class));"
69716,./TargetProjects/druid/core/src/test/java/org/apache/druid/indexer/partitions/SingleDimensionPartitionsSpecTest.java,93,,"        .testIllegalArgumentException(""Exactly one of targetRowsPerSegment or maxRowsPerSegment must be present"");"
69717,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/CompressionUtilsTest.java,130,,"    Assert.assertEquals(""foo"", CompressionUtils.getGzBaseName(""foo.gz""));"
69718,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/CompressionUtilsTest.java,143,,"    CompressionUtils.getGzBaseName("".gz"");"
69719,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/CompressionUtilsTest.java,150,,"    final File zipFile = new File(tmpDir, ""compressionUtilTest.zip"");"
69720,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/CompressionUtilsTest.java,305,,"    final File tmpDir = temporaryFolder.newFolder(""testGoodGzipByteSource"");"
69721,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/CompressionUtilsTest.java,314,,"      throw new IOE(""Unable to delete file [%s]"", testFile.getAbsolutePath());"
69722,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/DateTimesTest.java,59,,"        DateTimeZone.forTimeZone(TimeZone.getTimeZone(""ACT"")),"
69723,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/FileUtilsTest.java,94,,"          new File(System.getProperty(""java.io.tmpdir"")).toPath(),"
69724,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/GranularityTest.java,82,,"        new PathDate(null, null, ""null/Test9""),"
69725,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/GranularityTest.java,99,,"            ""y=2011/m=03/d=15/H=20/M=50/S=43/Test0"""
69726,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/GranularityTest.java,104,,"            ""/y=2011/m=03/d=15/H=20/M=50/S=43/Test0"""
69727,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/GranularityTest.java,109,,"            ""valid/y=2011/m=03/d=15/H=20/M=50/S=43/Test1"""
69728,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/GranularityTest.java,111,,"        new PathDate(null, null, ""valid/y=2011/m=03/d=15/H=20/M=50/Test2""),"
69729,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/GranularityTest.java,112,,"        new PathDate(null, null, ""valid/y=2011/m=03/d=15/H=20/Test3""),"
69730,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/GranularityTest.java,113,,"        new PathDate(null, null, ""valid/y=2011/m=03/d=15/Test4""),"
69731,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/GranularityTest.java,114,,"        new PathDate(null, null, ""valid/y=2011/m=03/Test5""),"
69732,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/GranularityTest.java,115,,"        new PathDate(null, null, ""valid/y=2011/Test6""),"
69733,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/GranularityTest.java,116,,"        new PathDate(null, null, ""null/y=/m=/d=/Test7""),"
69734,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/GranularityTest.java,117,,"        new PathDate(null, null, ""null/m=10/y=2011/d=23/Test8""),"
69735,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/GranularityTest.java,120,,"        new PathDate(null, IllegalFieldValueException.class, ""error/y=2011/m=10/d=20/H=20/M=42/S=72/Test11""),"
69736,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/GranularityTest.java,121,,"        new PathDate(null, IllegalFieldValueException.class, ""error/y=2011/m=10/d=20/H=20/M=90/S=24/Test12""),"
69737,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/GranularityTest.java,122,,"        new PathDate(null, IllegalFieldValueException.class, ""error/y=2011/m=10/d=20/H=42/M=42/S=24/Test13""),"
69738,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/GranularityTest.java,123,,"        new PathDate(null, IllegalFieldValueException.class, ""error/y=2011/m=10/d=33/H=20/M=42/S=24/Test14""),"
69739,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/GranularityTest.java,124,,"        new PathDate(null, IllegalFieldValueException.class, ""error/y=2011/m=13/d=20/H=20/M=42/S=24/Test15"")"
69740,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/GranularityTest.java,702,,"    DateTime date = DateTimes.of(""2011-03-15T22:42:23.898"");"
69741,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/RetryUtilsTest.java,46,,"      return e instanceof IOException && e.getMessage().equals(""what"");"
69742,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/RetryUtilsTest.java,60,,"          return ""hey"";"
69743,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/RetryUtilsTest.java,66,,"    Assert.assertEquals(""count"", 1, count.get());"
69744,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/StringUtilsTest.java,43,,"    Assert.assertEquals(""abcd"", StringUtils.fromUtf8(bytes));"
69745,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/StringUtilsTest.java,66,,"    final int smallBufferResult = StringUtils.toUtf8WithLimit(""🚀🌔"", smallBuffer);"
69746,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/StringUtilsTest.java,147,,"    Assert.assertEquals(""123"", StringUtils.removeChar(""123"", ','));"
69747,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/StringUtilsTest.java,199,,"    Assert.assertEquals("""", StringUtils.repeat(""foo"", 0));"
69748,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/StringUtilsTest.java,215,,"    String lpad = StringUtils.lpad(""abc"", 7, ""de"");"
69749,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/StringUtilsTest.java,268,,"    Assert.assertEquals(""smile 🙂 for"", StringUtils.chop(""smile 🙂 for the camera"", 14));"
69750,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/StringUtilsTest.java,270,,"    Assert.assertEquals(""smile "", StringUtils.chop(""smile 🙂 for the camera"", 9));"
69751,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/TripleTest.java,30,,"    Triple one = new Triple(""first"", ""second"", ""third"");"
69752,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/TripleTest.java,30,,"    Triple one = new Triple(""first"", ""second"", ""third"");"
69753,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/TripleTest.java,30,,"    Triple one = new Triple(""first"", ""second"", ""third"");"
69754,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/guava/ComparatorsTest.java,39,,"    Assert.assertEquals(0, comp.compare(Intervals.of(""P1d/2011-04-02""), Intervals.of(""2011-04-01/2011-04-02"")));"
69755,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/guava/ComparatorsTest.java,42,,"    Assert.assertEquals(1, comp.compare(Intervals.of(""2011-04-01/2011-04-03""), Intervals.of(""2011-04-01/2011-04-02"")));"
69756,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/guava/ComparatorsTest.java,43,,"    Assert.assertEquals(-1, comp.compare(Intervals.of(""2011-04-01/2011-04-03""), Intervals.of(""2011-04-01/2011-04-04"")));"
69757,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/guava/ComparatorsTest.java,46,,"        Intervals.of(""2011-04-01T18/2011-04-02T13""),"
69758,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/guava/ComparatorsTest.java,49,,"        Intervals.of(""2011-04-02/2011-04-04""),"
69759,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/guava/ComparatorsTest.java,51,,"        Intervals.of(""2011-04-02/2011-04-03""),"
69760,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/guava/ComparatorsTest.java,52,,"        Intervals.of(""2011-04-02/2011-04-03T06"")"
69761,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/guava/MergeSequenceTest.java,252,,"                throw new RuntimeException(""boom"");"
69762,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/guava/ParallelMergeCombiningSequenceTest.java,449,,"        ""exploded"""
69763,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/guava/YieldingSequenceBaseTest.java,43,,"    Assert.assertEquals(""Closes resources"", 1, sequence.getCloseCount());"
69764,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/io/smoosh/SmooshedFileMapperTest.java,48,,"    File baseDir = folder.newFolder(""base"");"
69765,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/parsers/FlatTextFormatParserTest.java,68,,"    final String header = concat(format, ""time"", ""value1"", ""value2"");"
69766,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/parsers/FlatTextFormatParserTest.java,68,,"    final String header = concat(format, ""time"", ""value1"", ""value2"");"
69767,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/parsers/FlatTextFormatParserTest.java,68,,"    final String header = concat(format, ""time"", ""value1"", ""value2"");"
69768,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/parsers/FlatTextFormatParserTest.java,89,,"    final String body = concat(format, ""hello"", ""world"", ""foo"");"
69769,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/parsers/FlatTextFormatParserTest.java,89,,"    final String body = concat(format, ""hello"", ""world"", ""foo"");"
69770,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/parsers/FlatTextFormatParserTest.java,89,,"    final String body = concat(format, ""hello"", ""world"", ""foo"");"
69771,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/parsers/FlatTextFormatParserTest.java,92,,"        ""jsonMap"","
69772,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/parsers/FlatTextFormatParserTest.java,118,,"        concat(format, ""header"", ""line"", ""1""),"
69773,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/parsers/FlatTextFormatParserTest.java,118,,"        concat(format, ""header"", ""line"", ""1""),"
69774,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/parsers/FlatTextFormatParserTest.java,159,,"        concat(format, ""hello"", ""world"", ""foo"", ""bar"")"
69775,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/parsers/JSONPathParserTest.java,63,,"        ImmutableMap.of(""one"", ""foo"", ""two"", ImmutableList.of(""bar"", ""baz""), ""three"", ""qux""),"
69776,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/parsers/JSONPathParserTest.java,100,,"    fields.add(new JSONPathFieldSpec(JSONPathFieldType.PATH, ""nested-foo.bar2"", ""$.foo.bar2""));"
69777,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/parsers/JSONPathParserTest.java,101,,"    fields.add(new JSONPathFieldSpec(JSONPathFieldType.PATH, ""heybarx0"", ""$.hey[0].barx""));"
69778,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/parsers/JSONPathParserTest.java,102,,"    fields.add(new JSONPathFieldSpec(JSONPathFieldType.PATH, ""met-array"", ""$.met.a""));"
69779,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/parsers/JSONPathParserTest.java,102,,"    fields.add(new JSONPathFieldSpec(JSONPathFieldType.PATH, ""met-array"", ""$.met.a""));"
69780,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/parsers/JSONPathParserTest.java,110,,"    fields.add(new JSONPathFieldSpec(JSONPathFieldType.JQ, ""jq-nested-foo.bar2"", "".foo.bar2""));"
69781,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/parsers/JSONPathParserTest.java,111,,"    fields.add(new JSONPathFieldSpec(JSONPathFieldType.JQ, ""jq-heybarx0"", "".hey[0].barx""));"
69782,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/parsers/JSONPathParserTest.java,112,,"    fields.add(new JSONPathFieldSpec(JSONPathFieldType.JQ, ""jq-met-array"", "".met.a""));"
69783,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/parsers/JSONPathParserTest.java,121,,"    Assert.assertEquals(""text"", jsonMap.get(""simpleVal""));"
69784,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/parsers/JSONPathParserTest.java,123,,"    Assert.assertEquals(""2999"", jsonMap.get(""timestamp""));"
69785,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/parsers/JSONPathParserTest.java,143,,"    Assert.assertEquals(""bbb"", jsonMap.get(""nested-foo.bar2""));"
69786,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/parsers/JSONPathParserTest.java,144,,"    Assert.assertEquals(""asdf"", jsonMap.get(""heybarx0""));"
69787,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/parsers/RegexParserTest.java,43,,"        ""Bucket Owner"","
69788,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/parsers/RegexParserTest.java,44,,"        ""Bucket"","
69789,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/parsers/RegexParserTest.java,45,,"        ""Time"","
69790,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/parsers/RegexParserTest.java,46,,"        ""Remote IP"","
69791,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/parsers/RegexParserTest.java,47,,"        ""Requester"","
69792,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/parsers/RegexParserTest.java,48,,"        ""Request ID"","
69793,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/parsers/RegexParserTest.java,49,,"        ""Operation"","
69794,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/parsers/RegexParserTest.java,50,,"        ""Key"","
69795,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/parsers/RegexParserTest.java,51,,"        ""Request-URI"","
69796,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/parsers/RegexParserTest.java,52,,"        ""HTTP status"","
69797,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/parsers/RegexParserTest.java,53,,"        ""Error Code"","
69798,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/parsers/RegexParserTest.java,54,,"        ""Bytes Sent"","
69799,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/parsers/RegexParserTest.java,55,,"        ""Object Size"","
69800,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/parsers/RegexParserTest.java,56,,"        ""Total Time"","
69801,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/parsers/RegexParserTest.java,57,,"        ""Turn-Around Time"","
69802,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/parsers/RegexParserTest.java,58,,"        ""Referrer"","
69803,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/parsers/RegexParserTest.java,59,,"        ""User-Agent"","
69804,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/parsers/RegexParserTest.java,60,,"        ""Version ID"""
69805,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/parsers/RegexParserTest.java,72,,"    builder.put(""Bucket Owner"", ""79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be"");"
69806,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/parsers/RegexParserTest.java,92,,"        ""result"","
69807,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/parsers/TimestampParserTest.java,49,,"    Assert.assertEquals(DateTimeZone.forTimeZone(TimeZone.getTimeZone(""PST"")), ParserUtils.getDateTimeZone(""PST""));"
69808,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/parsers/TimestampParserTest.java,61,,"    final Function<Object, DateTime> parser = TimestampParser.createObjectTimestampParser(""auto"");"
69809,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/common/parsers/TimestampParserTest.java,62,,"    Assert.assertEquals(DateTimes.of(""2009-02-13T23:31:30Z""), parser.apply(""1234567890000""));"
69810,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/emitter/core/EmitterTest.java,227,,"        new UnitEvent(""test"", 1),"
69811,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/emitter/core/EmitterTest.java,240,,"                ""application/json"","
69812,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/emitter/core/EmitterTest.java,245,,"                    ""[%s,%s]\n"","
69813,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/emitter/core/HttpEmitterConfigTest.java,35,,"    props.put(""org.apache.druid.java.util.emitter.recipientBaseUrl"", ""http://example.com/"");"
69814,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/emitter/core/HttpEmitterConfigTest.java,89,,"    props.setProperty(""org.apache.druid.java.util.emitter.basicAuthentication"", ""a:b"");"
69815,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/emitter/core/LoggingEmitterConfigTest.java,39,,"    Assert.assertEquals(""getLoggerClass"", LoggingEmitter.class.getName(), config.getLoggerClass());"
69816,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/emitter/core/LoggingEmitterConfigTest.java,40,,"    Assert.assertEquals(""getLogLevel"", ""info"", config.getLogLevel());"
69817,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/emitter/core/LoggingEmitterConfigTest.java,61,,"    props.setProperty(""org.apache.druid.java.util.emitter.loggerClass"", ""Foo"");"
69818,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/emitter/core/LoggingEmitterConfigTest.java,62,,"    props.setProperty(""org.apache.druid.java.util.emitter.logLevel"", ""INFO"");"
69819,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/emitter/core/ParametrizedUriEmitterConfigTest.java,38,,"    final HttpEmitterConfig config = paramConfig.buildHttpEmitterConfig(""http://example.com/topic"");"
69820,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/emitter/core/ParametrizedUriEmitterTest.java,91,,"        new UnitEvent(""test"", 1),"
69821,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/emitter/service/AlertEventTest.java,38,,"    AlertEvent event = AlertBuilder.create(""blargy"")"
69822,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/emitter/service/AlertEventTest.java,39,,"                                   .addData(""something1"", ""a"")"
69823,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/emitter/service/AlertEventTest.java,40,,"                                   .addData(""something2"", ""b"")"
69824,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/emitter/service/AlertEventTest.java,41,,"                                   .build(""test"", ""localhost"");"
69825,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/emitter/service/AlertEventTest.java,41,,"                                   .build(""test"", ""localhost"");"
69826,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/emitter/service/AlertEventTest.java,45,,"            .put(""feed"", ""alerts"")"
69827,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/emitter/service/AlertEventTest.java,45,,"            .put(""feed"", ""alerts"")"
69828,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/emitter/service/AlertEventTest.java,46,,"            .put(""timestamp"", event.getCreatedTime().toString())"
69829,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/emitter/service/AlertEventTest.java,47,,"            .put(""service"", ""test"")"
69830,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/emitter/service/AlertEventTest.java,48,,"            .put(""host"", ""localhost"")"
69831,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/emitter/service/AlertEventTest.java,49,,"            .put(""severity"", ""component-failure"")"
69832,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/emitter/service/AlertEventTest.java,50,,"            .put(""description"", ""blargy"")"
69833,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/emitter/service/AlertEventTest.java,51,,"            .put(""data"", ImmutableMap.<String, Object>of(""something1"", ""a"", ""something2"", ""b""))"
69834,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/emitter/service/ServiceMetricEventTest.java,39,,"        .setDimension(""user1"", ""a"")"
69835,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/emitter/service/ServiceMetricEventTest.java,40,,"        .setDimension(""user2"", ""b"")"
69836,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/emitter/service/ServiceMetricEventTest.java,41,,"        .setDimension(""user3"", ""c"")"
69837,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/emitter/service/ServiceMetricEventTest.java,42,,"        .setDimension(""user4"", ""d"")"
69838,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/emitter/service/ServiceMetricEventTest.java,43,,"        .setDimension(""user5"", ""e"")"
69839,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/emitter/service/ServiceMetricEventTest.java,44,,"        .setDimension(""user6"", ""f"")"
69840,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/emitter/service/ServiceMetricEventTest.java,45,,"        .setDimension(""user7"", ""g"")"
69841,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/emitter/service/ServiceMetricEventTest.java,46,,"        .setDimension(""user8"", ""h"")"
69842,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/emitter/service/ServiceMetricEventTest.java,47,,"        .setDimension(""user9"", ""i"")"
69843,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/emitter/service/ServiceMetricEventTest.java,48,,"        .setDimension(""user10"", ""j"")"
69844,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/emitter/service/ServiceMetricEventTest.java,49,,"        .build(""test-metric"", 1234)"
69845,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/emitter/service/ServiceMetricEventTest.java,50,,"        .build(""test"", ""localhost"");"
69846,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/emitter/service/ServiceMetricEventTest.java,50,,"        .build(""test"", ""localhost"");"
69847,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/emitter/service/ServiceMetricEventTest.java,53,,"                    .put(""feed"", ""metrics"")"
69848,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/emitter/service/ServiceMetricEventTest.java,53,,"                    .put(""feed"", ""metrics"")"
69849,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/emitter/service/ServiceMetricEventTest.java,54,,"                    .put(""timestamp"", builderEvent.getCreatedTime().toString())"
69850,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/emitter/service/ServiceMetricEventTest.java,55,,"                    .put(""service"", ""test"")"
69851,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/emitter/service/ServiceMetricEventTest.java,56,,"                    .put(""host"", ""localhost"")"
69852,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/emitter/service/ServiceMetricEventTest.java,57,,"                    .put(""metric"", ""test-metric"")"
69853,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/emitter/service/ServiceMetricEventTest.java,68,,"                    .put(""value"", 1234)"
69854,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/emitter/service/ServiceMetricEventTest.java,256,,"                    .put(""foo"", ""bar"")"
69855,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/http/client/JankyServersTest.java,161,,"              new Request(HttpMethod.GET, new URL(StringUtils.format(""http://localhost:%d/"", silentServerSocket.getLocalPort()))),"
69856,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/http/client/pool/ResourcePoolTest.java,63,,"    EasyMock.expect(resourceFactory.generate(""billy"")).andAnswer(new StringIncrementingAnswer(""billy"")).times(2);"
69857,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/http/client/pool/ResourcePoolTest.java,65,,"    EasyMock.expect(resourceFactory.isGood(""billy0"")).andReturn(true).times(1);"
69858,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/http/client/pool/ResourcePoolTest.java,86,,"    EasyMock.expect(resourceFactory.isGood(""billy1"")).andReturn(false).times(1);"
69859,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/http/client/pool/ResourcePoolTest.java,89,,"    EasyMock.expect(resourceFactory.generate(""billy"")).andReturn(""billy2"").times(1);"
69860,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/http/client/pool/ResourcePoolTest.java,108,,"    EasyMock.expect(resourceFactory.generate(""billy"")).andThrow(new ISE(""where's billy?"")).times(1);"
69861,./TargetProjects/druid/core/src/test/java/org/apache/druid/java/util/metrics/ClockDriftSafeMonitorSchedulerTest.java,121,,"      @SuppressWarnings(""unchecked"")"
69862,./TargetProjects/druid/core/src/test/java/org/apache/druid/math/expr/ApplyFunctionTest.java,42,,"    builder.put(""x"", ""foo"");"
69863,./TargetProjects/druid/core/src/test/java/org/apache/druid/math/expr/ApplyFunctionTest.java,45,,"    builder.put(""a"", new String[] {""foo"", ""bar"", ""baz"", ""foobar""});"
69864,./TargetProjects/druid/core/src/test/java/org/apache/druid/math/expr/ApplyFunctionTest.java,45,,"    builder.put(""a"", new String[] {""foo"", ""bar"", ""baz"", ""foobar""});"
69865,./TargetProjects/druid/core/src/test/java/org/apache/druid/math/expr/ApplyFunctionTest.java,57,,"    assertExpr(""map((x) -> concat(x, 'foo'), ['foo', 'bar', 'baz', 'foobar'])"", new String[] {""foofoo"", ""barfoo"", ""bazfoo"", ""foobarfoo""});"
69866,./TargetProjects/druid/core/src/test/java/org/apache/druid/math/expr/ApplyFunctionTest.java,57,,"    assertExpr(""map((x) -> concat(x, 'foo'), ['foo', 'bar', 'baz', 'foobar'])"", new String[] {""foofoo"", ""barfoo"", ""bazfoo"", ""foobarfoo""});"
69867,./TargetProjects/druid/core/src/test/java/org/apache/druid/math/expr/EvalTest.java,185,,"    Assert.assertEquals(""foo"", ExprEval.ofStringArray(new String[]{""foo""}).asString());"
69868,./TargetProjects/druid/core/src/test/java/org/apache/druid/math/expr/EvalTest.java,194,,"    Assert.assertEquals(""[1, 2.2]"", ExprEval.ofStringArray(new String[]{""1"", ""2.2""}).asString());"
69869,./TargetProjects/druid/core/src/test/java/org/apache/druid/math/expr/EvalTest.java,302,,"      Assert.assertTrue(ExprEval.of(""one"").isNumericNull());"
69870,./TargetProjects/druid/core/src/test/java/org/apache/druid/math/expr/ExprEvalTest.java,48,,"    assertExpr(0, ""hello"");"
69871,./TargetProjects/druid/core/src/test/java/org/apache/druid/math/expr/ExprEvalTest.java,58,,"        ""Unable to serialize [%s], size [%s] is larger than max [%s]"","
69872,./TargetProjects/druid/core/src/test/java/org/apache/druid/math/expr/ExprEvalTest.java,86,,"    assertExpr(0, new String[]{""hello"", ""hi"", ""hey""});"
69873,./TargetProjects/druid/core/src/test/java/org/apache/druid/math/expr/ExprTest.java,136,,"                  .withIgnoredFields(""outputType"")"
69874,./TargetProjects/druid/core/src/test/java/org/apache/druid/math/expr/ExprsTest.java,37,,"    final List<Expr> decomposed = Exprs.decomposeAnd(new IdentifierExpr(""foo""));"
69875,./TargetProjects/druid/core/src/test/java/org/apache/druid/math/expr/ExprsTest.java,51,,"            new BinAndExpr(""&&"", new IdentifierExpr(""foo""), new IdentifierExpr(""bar"")),"
69876,./TargetProjects/druid/core/src/test/java/org/apache/druid/math/expr/FunctionTest.java,46,,"        .put(""x"", ""foo"")"
69877,./TargetProjects/druid/core/src/test/java/org/apache/druid/math/expr/FunctionTest.java,59,,"        .put(""a"", new String[] {""foo"", ""bar"", ""baz"", ""foobar""})"
69878,./TargetProjects/druid/core/src/test/java/org/apache/druid/math/expr/FunctionTest.java,69,,"    assertExpr(""case_simple(x,'baz','is baz','bar','is bar','is other')"", ""is other"");"
69879,./TargetProjects/druid/core/src/test/java/org/apache/druid/math/expr/FunctionTest.java,448,,"          Assert.fail(""Did not throw IllegalArgumentException"");"
69880,./TargetProjects/druid/core/src/test/java/org/apache/druid/math/expr/ParserTest.java,131,,"    validateParser(""x-y-x"", ""(- (- x y) x)"", ImmutableList.of(""x"", ""y""), ImmutableSet.of(""x"", ""x_0"", ""y""));"
69881,./TargetProjects/druid/core/src/test/java/org/apache/druid/math/expr/ParserTest.java,206,,"    validateParser(""foo"", ""foo"", ImmutableList.of(""foo""), ImmutableSet.of());"
69882,./TargetProjects/druid/core/src/test/java/org/apache/druid/math/expr/ParserTest.java,458,,"    validateApplyUnapplied(""x + 1"", ""(+ x 1)"", ""(+ x 1)"", ImmutableList.of());"
69883,./TargetProjects/druid/core/src/test/java/org/apache/druid/math/expr/ParserTest.java,464,,"        ""(cartesian_map ([x, y] -> (+ x y)), [x, y])"","
69884,./TargetProjects/druid/core/src/test/java/org/apache/druid/math/expr/ParserTest.java,534,,"    validateFoldUnapplied(""x + __acc"", ""(+ x __acc)"", ""(+ x __acc)"", ImmutableList.of(), ""__acc"");"
69885,./TargetProjects/druid/core/src/test/java/org/apache/druid/math/expr/ParserTest.java,534,,"    validateFoldUnapplied(""x + __acc"", ""(+ x __acc)"", ""(+ x __acc)"", ImmutableList.of(), ""__acc"");"
69886,./TargetProjects/druid/core/src/test/java/org/apache/druid/math/expr/VectorExprSanityTest.java,75,,"    final String[] columns = new String[]{""d1"", ""d2"", ""l1"", ""l2"", ""1"", ""1.0"", ""nonexistent"", ""null""};"
69887,./TargetProjects/druid/core/src/test/java/org/apache/druid/math/expr/VectorExprSanityTest.java,75,,"    final String[] columns = new String[]{""d1"", ""d2"", ""l1"", ""l2"", ""1"", ""1.0"", ""nonexistent"", ""null""};"
69888,./TargetProjects/druid/core/src/test/java/org/apache/druid/metadata/MetadataStorageConnectorConfigTest.java,44,,"        ""\""createTables\"": \"""" + createTables + ""\"","" +"
69889,./TargetProjects/druid/core/src/test/java/org/apache/druid/metadata/MetadataStorageConnectorConfigTest.java,67,,"        ""user"","
69890,./TargetProjects/druid/core/src/test/java/org/apache/druid/query/cache/CacheKeyBuilderTest.java,44,,"        .appendString(""test"")"
69891,./TargetProjects/druid/core/src/test/java/org/apache/druid/query/cache/CacheKeyBuilderTest.java,51,,"        .appendStrings(Lists.newArrayList(""test1"", ""test2""))"
69892,./TargetProjects/druid/core/src/test/java/org/apache/druid/query/cache/CacheKeyBuilderTest.java,51,,"        .appendStrings(Lists.newArrayList(""test1"", ""test2""))"
69893,./TargetProjects/druid/core/src/test/java/org/apache/druid/query/cache/CacheKeyBuilderTest.java,149,,"            .appendString(""testtest"")"
69894,./TargetProjects/druid/core/src/test/java/org/apache/druid/segment/SegmentUtilsTest.java,72,,"        newSegment(Intervals.of(""2020-01-01/P1D""), 0),"
69895,./TargetProjects/druid/core/src/test/java/org/apache/druid/segment/SegmentUtilsTest.java,73,,"        newSegment(Intervals.of(""2020-01-02/P1D""), 0),"
69896,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/DataSegmentTest.java,172,,"                                           .dataSource(""foo"")"
69897,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/DataSegmentTest.java,173,,"                                           .interval(Intervals.of(""2012-01-01/2012-01-02""))"
69898,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/DataSegmentTest.java,174,,"                                           .version(DateTimes.of(""2012-01-01T11:22:33.444Z"").toString())"
69899,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/SegmentIdTest.java,40,,"    String datasource = ""datasource"";"
69900,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/SegmentIdTest.java,41,,"    SegmentId desc = SegmentId.of(datasource, Intervals.of(""2015-01-02/2015-01-03""), ""ver_0"", 1);"
69901,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/SegmentIdTest.java,41,,"    SegmentId desc = SegmentId.of(datasource, Intervals.of(""2015-01-02/2015-01-03""), ""ver_0"", 1);"
69902,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/SegmentIdTest.java,45,,"    desc = desc.withInterval(Intervals.of(""2014-10-20T00:00:00Z/P1D""));"
69903,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/SegmentIdTest.java,86,,"    String dataSource = ""datasource_2015-01-01T00:00:00.000Z"";"
69904,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineSpecificDataTest.java,52,,"    add(""2011-04-01/2011-04-09"", ""2"", 1);"
69905,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineSpecificDataTest.java,53,,"    add(""2011-04-06/2011-04-09"", ""3"", 4);"
69906,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineSpecificDataTest.java,54,,"    add(""2011-04-01/2011-04-02"", ""3"", 5);"
69907,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineSpecificDataTest.java,59,,"    add(""2011-05-01/2011-05-10"", ""4"", 9);"
69908,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineSpecificDataTest.java,62,,"    add(""2011-10-02/2011-10-03"", ""3"", IntegerPartitionChunk.make(null, 10, 0, new OvershadowableInteger(""3"", 0, 20)));"
69909,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineSpecificDataTest.java,66,,"    add(""2011-10-05/2011-10-06"", ""5"", 5);"
69910,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineSpecificDataTest.java,151,,"            createExpected(""2011-05-01/2011-05-09"", ""4"", 9)"
69911,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineSpecificDataTest.java,311,,"    add(""2011-10-06/2011-10-07"", ""6"", IntegerPartitionChunk.make(null, 10, 0, new OvershadowableInteger(""6"", 0, 60)));"
69912,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineSpecificDataTest.java,314,,"        timeline.lookup(Intervals.of(""2011-10-05/2011-10-07""))"
69913,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineSpecificDataTest.java,316,,"    Assert.assertTrue(""Expected no overshadowed entries"", timeline.findFullyOvershadowed().isEmpty());"
69914,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java,56,,"    add(""2011-01-01/2011-01-10"", ""1"", 1);"
69915,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java,71,,"    add(""2011-01-05/2011-01-15"", ""1"", 3);"
69916,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java,100,,"    add(""2011-01-10/2011-01-20"", ""1"", 2);"
69917,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java,105,,"            createExpected(""2011-01-01/2011-01-05"", ""1"", 1),"
69918,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java,107,,"            createExpected(""2011-01-15/2011-01-20"", ""1"", 2)"
69919,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java,109,,"        timeline.lookup(Intervals.of(""2011-01-01/2011-01-20""))"
69920,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java,145,,"        timeline.lookup(Intervals.of(""2011-01-01/2011-01-15""))"
69921,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java,177,,"            createExpected(""2011-01-10/2011-01-15"", ""1"", 3)"
69922,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java,280,,"    add(""2011-01-03/2011-01-06"", ""3"", 3);"
69923,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java,284,,"            createExpected(""2011-01-01/2011-01-03"", ""1"", 1),"
69924,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java,340,,"    add(""2011-01-02/2011-01-06"", ""3"", 3);"
69925,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java,344,,"            createExpected(""2011-01-01/2011-01-02"", ""1"", 1),"
69926,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java,400,,"    add(""2011-01-01/2011-01-07"", ""1"", 1);"
69927,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java,403,,"    add(""2011-01-10/2011-01-13"", ""2"", 4);"
69928,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java,483,,"    add(""2011-01-15/2011-01-25"", ""3"", 3);"
69929,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java,560,,"    add(""2011-01-13/2011-01-17"", ""2"", 3);"
69930,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java,703,,"    add(""2011-01-05/2011-01-10"", ""2"", 2);"
69931,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java,849,,"    add(""2011-04-01/2011-04-03"", ""1"", 2);"
69932,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java,850,,"    add(""2011-04-03/2011-04-06"", ""1"", 3);"
69933,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java,851,,"    add(""2011-04-06/2011-04-09"", ""1"", 4);"
69934,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java,852,,"    add(""2011-04-01/2011-04-09"", ""2"", 1);"
69935,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java,885,,"    add(""2011-04-09/2011-04-12"", ""1"", 4);"
69936,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java,1032,,"    add(""2011-04-01/2011-04-02"", ""1"", IntegerPartitionChunk.make(null, 1, 0, new OvershadowableInteger(""1"", 0, 77)));"
69937,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java,1090,,"    add(""2011-04-05/2011-04-07"", ""1"", makeSingle(""1"", 1));"
69938,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java,1105,,"    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(""2011-04-05/2011-04-06""), ""0"", new OvershadowableInteger(""0"", 0, 1)));"
69939,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java,1107,,"    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(""2011-04-05/2011-04-08""), ""0"", new OvershadowableInteger(""0"", 0, 1)));"
69940,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java,1108,,"    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(""2011-04-05/2011-04-09""), ""0"", new OvershadowableInteger(""0"", 0, 1)));"
69941,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java,1235,,"    add(""2019-01-01/2019-01-02"", ""0"", makeNumbered(""0"", 0, 0));"
69942,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java,1263,,"    add(""2019-01-02/2019-01-03"", ""0"", makeNumbered(""0"", 0, 0));"
69943,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java,1513,,"    add(""2019-01-03/2019-01-04"", ""0"", makeNumbered(""2"", 0, 3, 0));"
69944,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/partition/BuildingHashBasedNumberedShardSpecTest.java,39,,"        new HashBasedNumberedShardSpec(5, 10, 5, 12, ImmutableList.of(""dim""), HashPartitionFunction.MURMUR3_32_ABS, mapper),"
69945,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/partition/BuildingSingleDimensionShardSpecTest.java,36,,"        new SingleDimensionShardSpec(""dim"", ""start"", ""end"", 5, 10),"
69946,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/partition/BuildingSingleDimensionShardSpecTest.java,36,,"        new SingleDimensionShardSpec(""dim"", ""start"", ""end"", 5, 10),"
69947,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/partition/BuildingSingleDimensionShardSpecTest.java,36,,"        new SingleDimensionShardSpec(""dim"", ""start"", ""end"", 5, 10),"
69948,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/partition/HashBasedNumberedShardSpecTest.java,70,,"                ImmutableList.of(""visitor_id""),"
69949,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/partition/HashBasedNumberedShardSpecTest.java,262,,"    rangeSet.add(Range.closed(""123"", ""123""));"
69950,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/partition/HashBucketShardSpecTest.java,48,,"            ImmutableList.of(""dim""),"
69951,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/partition/PartitionHolderCompletenessTest.java,59,,"                new SingleDimensionShardSpec(""dim"", null, ""aaa"", 0, 3),"
69952,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/partition/RangeBucketShardSpecTest.java,42,,"        new BuildingSingleDimensionShardSpec(1, ""dim"", ""start"", ""end"", 5),"
69953,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/partition/RangeBucketShardSpecTest.java,42,,"        new BuildingSingleDimensionShardSpec(1, ""dim"", ""start"", ""end"", 5),"
69954,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/partition/RangeBucketShardSpecTest.java,42,,"        new BuildingSingleDimensionShardSpec(1, ""dim"", ""start"", ""end"", 5),"
69955,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/partition/SingleDimensionShardSpecTest.java,116,,"    Map<String, RangeSet<String>> domain1 = ImmutableMap.of(""dim1"", rangeSet(ImmutableList.of(Range.lessThan(""abc""))));"
69956,./TargetProjects/druid/core/src/test/java/org/apache/druid/timeline/partition/SingleDimensionShardSpecTest.java,118,,"                                                            ""dim2"", rangeSet(ImmutableList.of(Range.singleton(""na"")))"
69957,./TargetProjects/druid/core/src/test/java/org/apache/druid/utils/ConnectionUriUtilsTest.java,53,,"          ImmutableSet.of(""valid_key1"", ""valid_key2""),"
69958,./TargetProjects/druid/core/src/test/java/org/apache/druid/utils/ConnectionUriUtilsTest.java,53,,"          ImmutableSet.of(""valid_key1"", ""valid_key2""),"
69959,./TargetProjects/druid/core/src/test/java/org/apache/druid/utils/ConnectionUriUtilsTest.java,54,,"          ImmutableSet.of(""system_key1"", ""system_key2"")"
69960,./TargetProjects/druid/core/src/test/java/org/apache/druid/utils/ConnectionUriUtilsTest.java,54,,"          ImmutableSet.of(""system_key1"", ""system_key2"")"
69961,./TargetProjects/druid/core/src/test/java/org/apache/druid/utils/ConnectionUriUtilsTest.java,196,,"      Assert.assertTrue(props.contains(""user""));"
69962,./TargetProjects/druid/core/src/test/java/org/apache/druid/utils/ConnectionUriUtilsTest.java,197,,"      Assert.assertTrue(props.contains(""password""));"
69963,./TargetProjects/druid/core/src/test/java/org/apache/druid/utils/ConnectionUriUtilsTest.java,198,,"      Assert.assertTrue(props.contains(""otherOptions""));"
69964,./TargetProjects/druid/core/src/test/java/org/apache/druid/utils/ConnectionUriUtilsTest.java,199,,"      Assert.assertTrue(props.contains(""keyonly""));"
69965,./TargetProjects/druid/extensions-contrib/aliyun-oss-extensions/src/main/java/org/apache/druid/storage/aliyun/OssDataSegmentMover.java,70,,"      String bucket = MapUtils.getString(loadSpec, ""bucket"");"
69966,./TargetProjects/druid/extensions-contrib/aliyun-oss-extensions/src/test/java/org/apache/druid/data/input/aliyun/OssInputSourceTest.java,457,,"        new TimestampSpec(""time"", ""auto"", null),"
69967,./TargetProjects/druid/extensions-contrib/aliyun-oss-extensions/src/test/java/org/apache/druid/data/input/aliyun/OssInputSourceTest.java,458,,"        new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(""dim1"", ""dim2""))),"
69968,./TargetProjects/druid/extensions-contrib/aliyun-oss-extensions/src/test/java/org/apache/druid/data/input/aliyun/OssInputSourceTest.java,458,,"        new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(""dim1"", ""dim2""))),"
69969,./TargetProjects/druid/extensions-contrib/aliyun-oss-extensions/src/test/java/org/apache/druid/storage/aliyun/OssDataSegmentMoverTest.java,54,,"          ""key"","
69970,./TargetProjects/druid/extensions-contrib/aliyun-oss-extensions/src/test/java/org/apache/druid/storage/aliyun/OssDataSegmentMoverTest.java,55,,"          ""baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip"","
69971,./TargetProjects/druid/extensions-contrib/aliyun-oss-extensions/src/test/java/org/apache/druid/storage/aliyun/OssDataSegmentMoverTest.java,56,,"          ""bucket"","
69972,./TargetProjects/druid/extensions-contrib/aliyun-oss-extensions/src/test/java/org/apache/druid/storage/aliyun/OssDataSegmentMoverTest.java,59,,"      ImmutableList.of(""dim1"", ""dim1""),"
69973,./TargetProjects/druid/extensions-contrib/aliyun-oss-extensions/src/test/java/org/apache/druid/storage/aliyun/OssDataSegmentMoverTest.java,79,,"        ImmutableMap.of(""baseKey"", ""targetBaseKey"", ""bucket"", ""archive"")"
69974,./TargetProjects/druid/extensions-contrib/aliyun-oss-extensions/src/test/java/org/apache/druid/storage/aliyun/OssDataSegmentMoverTest.java,79,,"        ImmutableMap.of(""baseKey"", ""targetBaseKey"", ""bucket"", ""archive"")"
69975,./TargetProjects/druid/extensions-contrib/aliyun-oss-extensions/src/test/java/org/apache/druid/storage/aliyun/OssDataSegmentMoverTest.java,142,,"            ""DOES NOT EXIST"""
69976,./TargetProjects/druid/extensions-contrib/aliyun-oss-extensions/src/test/java/org/apache/druid/storage/aliyun/OssDataSegmentPullerTest.java,65,,"    objectSummary.setKey(keyPrefix + ""/renames-0.gz"");"
69977,./TargetProjects/druid/extensions-contrib/aliyun-oss-extensions/src/test/java/org/apache/druid/storage/aliyun/OssObjectSummaryIteratorTest.java,57,,"        ImmutableList.of(OssStorageDruidModule.SCHEME + ""://b/foo/baz""),"
69978,./TargetProjects/druid/extensions-contrib/aliyun-oss-extensions/src/test/java/org/apache/druid/storage/aliyun/OssObjectSummaryIteratorTest.java,68,,"            OssStorageDruidModule.SCHEME + ""://b/foo/bar1"","
69979,./TargetProjects/druid/extensions-contrib/aliyun-oss-extensions/src/test/java/org/apache/druid/storage/aliyun/OssObjectSummaryIteratorTest.java,69,,"            OssStorageDruidModule.SCHEME + ""://b/foo/bar2"","
69980,./TargetProjects/druid/extensions-contrib/aliyun-oss-extensions/src/test/java/org/apache/druid/storage/aliyun/OssObjectSummaryIteratorTest.java,70,,"            OssStorageDruidModule.SCHEME + ""://b/foo/bar3"","
69981,./TargetProjects/druid/extensions-contrib/aliyun-oss-extensions/src/test/java/org/apache/druid/storage/aliyun/OssObjectSummaryIteratorTest.java,71,,"            OssStorageDruidModule.SCHEME + ""://b/foo/bar4"","
69982,./TargetProjects/druid/extensions-contrib/aliyun-oss-extensions/src/test/java/org/apache/druid/storage/aliyun/OssTimestampVersionedDataFinderTest.java,41,,"    String bucket = ""bucket"";"
69983,./TargetProjects/druid/extensions-contrib/aliyun-oss-extensions/src/test/java/org/apache/druid/storage/aliyun/OssTimestampVersionedDataFinderTest.java,42,,"    String keyPrefix = ""prefix/dir/0"";"
69984,./TargetProjects/druid/extensions-contrib/aliyun-oss-extensions/src/test/java/org/apache/druid/storage/aliyun/OssTimestampVersionedDataFinderTest.java,72,,"    URI latest = finder.getLatestVersion(URI.create(StringUtils.format(""%s://%s/%s"", OssStorageDruidModule.SCHEME, bucket, keyPrefix)), pattern);"
69985,./TargetProjects/druid/extensions-contrib/gce-extensions/src/test/java/org/apache/druid/indexing/overlord/autoscaling/gce/GceAutoScalerTest.java,104,,"    Assert.assertEquals(""druid-mig"", autoScaler.getEnvConfig().getManagedInstanceGroupName());"
69986,./TargetProjects/druid/extensions-contrib/gce-extensions/src/test/java/org/apache/druid/indexing/overlord/autoscaling/gce/GceAutoScalerTest.java,187,,"        new GceEnvironmentConfig(1, ""proj-x"", ""us-central-1"", ""druid-mig"")"
69987,./TargetProjects/druid/extensions-contrib/gce-extensions/src/test/java/org/apache/druid/indexing/overlord/autoscaling/gce/GceAutoScalerTest.java,187,,"        new GceEnvironmentConfig(1, ""proj-x"", ""us-central-1"", ""druid-mig"")"
69988,./TargetProjects/druid/extensions-contrib/gce-extensions/src/test/java/org/apache/druid/indexing/overlord/autoscaling/gce/GceAutoScalerTest.java,189,,"        ""createComputeServiceImpl"""
69989,./TargetProjects/druid/extensions-contrib/gce-extensions/src/test/java/org/apache/druid/indexing/overlord/autoscaling/gce/GceAutoScalerTest.java,208,,"    Instance i2 = makeInstance(""bar"", ""1.2.3.4""); // the one we do look for"
69990,./TargetProjects/druid/extensions-contrib/gce-extensions/src/test/java/org/apache/druid/indexing/overlord/autoscaling/gce/GceAutoScalerTest.java,208,,"    Instance i2 = makeInstance(""bar"", ""1.2.3.4""); // the one we do look for"
69991,./TargetProjects/druid/extensions-contrib/gce-extensions/src/test/java/org/apache/druid/indexing/overlord/autoscaling/gce/GceAutoScalerTest.java,330,,"            ""http://xyz/foo"","
69992,./TargetProjects/druid/extensions-contrib/gce-extensions/src/test/java/org/apache/druid/indexing/overlord/autoscaling/gce/GceAutoScalerTest.java,331,,"            ""http://xyz/bar"","
69993,./TargetProjects/druid/extensions-contrib/gce-extensions/src/test/java/org/apache/druid/indexing/overlord/autoscaling/gce/GceAutoScalerTest.java,332,,"            ""http://xyz/baz"""
69994,./TargetProjects/druid/extensions-contrib/gce-extensions/src/test/java/org/apache/druid/indexing/overlord/autoscaling/gce/GceAutoScalerTest.java,355,,"    mockResponse.setStatus(""DONE"");"
69995,./TargetProjects/druid/extensions-contrib/gce-extensions/src/test/java/org/apache/druid/indexing/overlord/autoscaling/gce/GceAutoScalerTest.java,384,,"            autoScaler.terminateWithIds(Collections.singletonList(""baz""));"
69996,./TargetProjects/druid/extensions-contrib/gce-extensions/src/test/java/org/apache/druid/indexing/overlord/autoscaling/gce/GceUtilsTest.java,57,,"      String x = GceUtils.buildFilter(list0, ""name"");"
69997,./TargetProjects/druid/extensions-contrib/influx-extensions/src/test/java/org/apache/druid/data/input/influx/InfluxParserTest.java,60,,"                  .with(""host"", ""foo.bar.baz"")"
69998,./TargetProjects/druid/extensions-contrib/influx-extensions/src/test/java/org/apache/druid/data/input/influx/InfluxParserTest.java,61,,"                  .with(""region"", ""us-east-1"")"
69999,./TargetProjects/druid/extensions-contrib/influx-extensions/src/test/java/org/apache/druid/data/input/influx/InfluxParserTest.java,61,,"                  .with(""region"", ""us-east-1"")"
