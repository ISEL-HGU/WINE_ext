121000,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/auth/TestNTLMEngineImpl.java,148,,"            toBytes(""ffffff0011223344""),"
121001,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/auth/TestNTLMEngineImpl.java,167,,"            toBytes(""02000c0044004f004d00410049004e0001000c005300450052005600450052000400140064006f006d00610069006e002e0063006f006d00030022007300650072007600650072002e0064006f006d00610069006e002e0063006f006d0000000000""),"
121002,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/auth/TestNTLMEngineImpl.java,171,,"            toBytes(""0090d336b734c301""));"
121003,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/auth/TestNTLMEngineImpl.java,241,,"        final byte[] bytes = new NTLMEngineImpl.Type1Message(""myhost"", ""mydomain"").getBytes();"
121004,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/auth/TestNTLMEngineImpl.java,241,,"        final byte[] bytes = new NTLMEngineImpl.Type1Message(""myhost"", ""mydomain"").getBytes();"
121005,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/auth/TestRequestAuthCache.java,84,,"        final HttpRequest request = new BasicHttpRequest(""GET"", ""/"");"
121006,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/classic/TestCloseableHttpClient.java,83,,"        final HttpGet httpget = new HttpGet(""https://somehost:444/stuff"");"
121007,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/classic/TestCloseableHttpClient.java,87,,"                Mockito.eq(new HttpHost(""https"", ""somehost"", 444)),"
121008,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/classic/TestCloseableHttpClient.java,87,,"                Mockito.eq(new HttpHost(""https"", ""somehost"", 444)),"
121009,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/classic/TestConnectExec.java,99,,"        final ClassicHttpRequest request = new HttpGet(""http://bar/test"");"
121010,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/classic/TestConnectExec.java,107,,"        final ExecChain.Scope scope = new ExecChain.Scope(""test"", route, request, execRuntime, context);"
121011,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/classic/TestContentCompressionExec.java,111,,"        final HttpEntity original = EntityBuilder.create().setText(""encoded stuff"").setContentEncoding(""GZip"").build();"
121012,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/classic/TestCookieIdentityComparator.java,42,,"        final BasicClientCookie c1 = new BasicClientCookie(""name"", ""value1"");"
121013,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/classic/TestCookieIdentityComparator.java,42,,"        final BasicClientCookie c1 = new BasicClientCookie(""name"", ""value1"");"
121014,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/classic/TestCookieIdentityComparator.java,43,,"        final BasicClientCookie c2 = new BasicClientCookie(""name"", ""value2"");"
121015,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/classic/TestCookieIdentityComparator.java,55,,"        c1.setDomain(""www.domain.com"");"
121016,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/classic/TestCookieIdentityComparator.java,88,,"        c1.setPath(""/whatever"");"
121017,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/classic/TestHttpRequestRetryExec.java,81,,"        final HttpGet request = new HttpGet(""/test"");"
121018,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/classic/TestHttpRequestRetryExec.java,98,,"        final ExecChain.Scope scope = new ExecChain.Scope(""test"", route, request, endpoint, context);"
121019,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/classic/TestInternalExecRuntime.java,91,,"        Mockito.when(mgr.lease(Mockito.eq(""some-id""), Mockito.eq(route), Mockito.any(), Mockito.any()))"
121020,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/classic/TestInternalHttpClient.java,99,,"        final HttpGet httpget = new HttpGet(""http://somehost/stuff"");"
121021,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/classic/TestInternalHttpClient.java,100,,"        final HttpRoute route = new HttpRoute(new HttpHost(""somehost"", 80));"
121022,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/classic/TestMainClientExec.java,87,,"        final ClassicHttpRequest request = new HttpGet(""http://bar/test"");"
121023,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/classic/TestMainClientExec.java,102,,"        final ExecChain.Scope scope = new ExecChain.Scope(""test"", route, request, endpoint, context);"
121024,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/classic/TestProtocolExec.java,100,,"        final ClassicHttpRequest request = new HttpGet(""/test"");"
121025,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/classic/TestProtocolExec.java,109,,"        final ExecChain.Scope scope = new ExecChain.Scope(""test"", route, request, execRuntime, context);"
121026,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/classic/TestRedirectExec.java,96,,"        final HttpGet request = new HttpGet(""/test"");"
121027,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/classic/TestRedirectExec.java,100,,"        final URI redirect = new URI(""http://localhost:80/redirect"");"
121028,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/classic/TestRedirectExec.java,121,,"        final ExecChain.Scope scope = new ExecChain.Scope(""test"", route, request, endpoint, context);"
121029,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/classic/TestRedirectExec.java,237,,"        response1.addHeader(""Location"", uri1.toASCIIString());"
121030,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/cookie/TestBasicClientCookie.java,46,,"        final BasicClientCookie cookie = new BasicClientCookie(""name"", ""value"");"
121031,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/cookie/TestBasicClientCookie.java,46,,"        final BasicClientCookie cookie = new BasicClientCookie(""name"", ""value"");"
121032,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/cookie/TestBasicClientCookie.java,57,,"        orig.setAttribute(""attrib"", ""stuff"");"
121033,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/cookie/TestBasicCookieAttribHandlers.java,50,,"        final BasicClientCookie cookie = new BasicClientCookie(""name"", ""value"");"
121034,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/cookie/TestBasicCookieAttribHandlers.java,50,,"        final BasicClientCookie cookie = new BasicClientCookie(""name"", ""value"");"
121035,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/cookie/TestBasicCookieAttribHandlers.java,52,,"        h.parse(cookie, ""www.somedomain.com"");"
121036,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/cookie/TestBasicCookieAttribHandlers.java,78,,"        cookie.setDomain("".somedomain.com"");"
121037,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/cookie/TestBasicCookieAttribHandlers.java,90,,"        final CookieOrigin origin = new CookieOrigin(""somehost"", 80, ""/"", false);"
121038,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/cookie/TestBasicCookieAttribHandlers.java,103,,"        final CookieOrigin origin = new CookieOrigin(""somedomain.com"", 80, ""/"", false);"
121039,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/cookie/TestBasicCookieAttribHandlers.java,200,,"        final CookieOrigin origin = new CookieOrigin(""somehost"", 80, ""/stuff"", false);"
121040,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/cookie/TestBasicCookieAttribHandlers.java,384,,"        Assert.assertFalse(h.match(cookie, new CookieOrigin(""apache.com"", 80, ""/stuff"", false)));"
121041,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/cookie/TestBasicCookieStore.java,50,,"        store.addCookie(new BasicClientCookie(""name1"", ""value1""));"
121042,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/cookie/TestLaxCookieAttribHandlers.java,42,,"        final BasicClientCookie cookie = new BasicClientCookie(""name"", ""value"");"
121043,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/cookie/TestLaxCookieAttribHandlers.java,42,,"        final BasicClientCookie cookie = new BasicClientCookie(""name"", ""value"");"
121044,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/cookie/TestPublicSuffixListParser.java,71,,"        Assert.assertFalse(filter.match(cookie, new CookieOrigin(""apache.jp"", 80, ""/stuff"", false)));"
121045,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/cookie/TestRFC6265CookieSpec.java,50,,"        Mockito.when(h1.getAttributeName()).thenReturn(""this"");"
121046,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/cookie/TestRFC6265CookieSpec.java,52,,"        Mockito.when(h2.getAttributeName()).thenReturn(""that"");"
121047,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/cookie/TestRFC6265CookieSpec.java,56,,"        final Header header = new BasicHeader(""Set-Cookie"", ""name = value ; this = stuff;"");"
121048,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/cookie/TestRFC6265CookieSpec.java,57,,"        final CookieOrigin origin = new CookieOrigin(""host"", 80, ""/path/"", true);"
121049,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/cookie/TestRFC6265CookieSpec.java,57,,"        final CookieOrigin origin = new CookieOrigin(""host"", 80, ""/path/"", true);"
121050,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/cookie/TestRFC6265CookieSpec.java,62,,"        Assert.assertEquals(""name"", cookie.getName());"
121051,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/cookie/TestRFC6265CookieSpec.java,63,,"        Assert.assertEquals(""value"", cookie.getValue());"
121052,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/io/TestBasicHttpClientConnectionManager.java,94,,"        final LeaseRequest connRequest1 = mgr.lease(""some-id"", route, null);"
121053,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/io/TestBasicHttpClientConnectionManager.java,114,,"        final HttpHost target = new HttpHost(""somehost"", 80);"
121054,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/io/TestBasicHttpClientConnectionManager.java,348,,"        final HttpHost target = new HttpHost(""https"", ""somehost"", 443);"
121055,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/io/TestHttpClientConnectionOperator.java,84,,"        final HttpHost host = new HttpHost(""somehost"");"
121056,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/io/TestHttpClientConnectionOperator.java,90,,"        Mockito.when(socketFactoryRegistry.lookup(""http"")).thenReturn(plainSocketFactory);"
121057,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/io/TestPoolingHttpClientConnectionManager.java,96,,"        final HttpHost target = new HttpHost(""localhost"", 80);"
121058,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/io/TestPoolingHttpClientConnectionManager.java,112,,"        final LeaseRequest connRequest1 = mgr.lease(""some-id"", route, null);"
121059,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/io/TestPoolingHttpClientConnectionManager.java,224,,"        final HttpHost target = new HttpHost(""https"", ""somehost"", 443);"
121060,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/io/TestPoolingHttpClientConnectionManager.java,224,,"        final HttpHost target = new HttpHost(""https"", ""somehost"", 443);"
121061,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/routing/TestDefaultRoutePlanner.java,60,,"        final HttpHost target = new HttpHost(""http"", ""somehost"", 80);"
121062,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/routing/TestRouteTracker.java,512,,"                Assert.assertEquals(""wrong hop count ""+msg,"
121063,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/routing/TestRouteTracker.java,514,,"                Assert.assertEquals(""wrong hop0 ""+msg,"
121064,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/impl/routing/TestSystemDefaultRoutePlanner.java,68,,"        final HttpHost target = new HttpHost(""http"", ""somehost"", 80);"
121065,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/protocol/TestRequestAddCookies.java,67,,"        this.target = new HttpHost(""localhost.local"", 80);"
121066,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/protocol/TestRequestAddCookies.java,97,,"        final HttpRequest request = new BasicHttpRequest(""GET"", ""/"");"
121067,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/protocol/TestRequestAddCookies.java,117,,"        final Header[] headers = request.getHeaders(""Cookie"");"
121068,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/protocol/TestRequestAddCookies.java,247,,"        final HttpRequest request = new BasicHttpRequest(""GET"", ""/stuff"");"
121069,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/protocol/TestRequestAddCookies.java,274,,"                new HttpHost(""localhost.local"", 80), null, new HttpHost(""localhost"", 8888), false);"
121070,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/protocol/TestRequestAddCookies.java,392,,"        cookieStore.addCookie(makeCookie(""nomatch"", ""value"", ""localhost.local"", ""/noway""));"
121071,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/protocol/TestRequestClientConnControl.java,65,,"        final HttpRequest request = new BasicHttpRequest(""GET"", ""/"");"
121072,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/protocol/TestRequestClientConnControl.java,68,,"        final HttpHost target = new HttpHost(""http"", ""localhost"", 80);"
121073,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/protocol/TestRequestDefaultHeaders.java,56,,"        defheaders.add(new BasicHeader(""custom"", ""stuff""));"
121074,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/protocol/TestRequestExpectContinue.java,52,,"        final ClassicHttpRequest request = new BasicClassicHttpRequest(""POST"", ""/"");"
121075,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/protocol/TestResponseProcessCookies.java,76,,"        response.addHeader(""Set-Cookie"", ""name1=value1"");"
121076,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/protocol/TestResponseProcessCookies.java,76,,"        response.addHeader(""Set-Cookie"", ""name1=value1"");"
121077,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/psl/TestPublicSuffixMatcher.java,67,,"        Assert.assertEquals(""metro.tokyo.jp"", matcher.getDomainRoot(""metro.tokyo.jp""));"
121078,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/psl/TestPublicSuffixMatcher.java,68,,"        Assert.assertEquals(""blah.blah.tokyo.jp"", matcher.getDomainRoot(""blah.blah.tokyo.jp""));"
121079,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/psl/TestPublicSuffixMatcher.java,71,,"        Assert.assertEquals(""garbage"", matcher.getDomainRoot(""garbage""));"
121080,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/ssl/CertificatesToPlayWith.java,49,,"          ""-----BEGIN CERTIFICATE-----\n"" +"
121081,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/ssl/CertificatesToPlayWith.java,51,,"          ""VQQGEwJDQTELMAkGA1UECBMCQkMxEjAQBgNVBAcTCVZhbmNvdXZlcjEWMBQGA1UE\n"" +"
121082,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/ssl/CertificatesToPlayWith.java,52,,"          ""ChMNd3d3LmN1Y2JjLmNvbTEUMBIGA1UECxQLY29tbW9uc19zc2wxHTAbBgNVBAMU\n"" +"
121083,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/ssl/CertificatesToPlayWith.java,53,,"          ""FGRlbW9faW50ZXJtZWRpYXRlX2NhMSUwIwYJKoZIhvcNAQkBFhZqdWxpdXNkYXZp\n"" +"
121084,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/ssl/CertificatesToPlayWith.java,55,,"          ""CzAJBgNVBAYTAlVTMREwDwYDVQQIEwhNYXJ5bGFuZDEUMBIGA1UEBxMLRm9yZXN0\n"" +"
121085,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/ssl/CertificatesToPlayWith.java,56,,"          ""IEhpbGwxFzAVBgNVBAoTDmh0dHBjb21wb25lbnRzMRowGAYDVQQLExF0ZXN0IGNl\n"" +"
121086,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/ssl/CertificatesToPlayWith.java,58,,"          ""aXVzZGF2aWVzQGdtYWlsLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC\n"" +"
121087,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/ssl/CertificatesToPlayWith.java,59,,"          ""ggEBAMhjr5aCPoyp0R1iroWAfnEyBMGYWoCidH96yGPFjYLowez5aYKY1IOKTY2B\n"" +"
121088,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/ssl/CertificatesToPlayWith.java,60,,"          ""lYho4O84X244QrZTRl8kQbYtxnGh4gSCD+Z8gjZ/gMvLUlhqOb+WXPAUHMB39GRy\n"" +"
121089,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/ssl/CertificatesToPlayWith.java,61,,"          ""zerA/ZtrlUqf+lKo0uWcocxeRc771KN8cPH3nHZ0rV0Hx4ZAZy6U4xxObe4rtSVY\n"" +"
121090,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/ssl/CertificatesToPlayWith.java,62,,"          ""07hNKXAb2odnVqgzcYiDkLV8ilvEmoNWMWrp8UBqkTcpEhYhCYp3cTkgJwMSuqv8\n"" +"
121091,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/ssl/CertificatesToPlayWith.java,63,,"          ""BqnGd87xQU3FVZI4tbtkB+KzjD9zz8QCDJAfDjZHR03KNQ5mxOgXwxwKw6lGMaiV\n"" +"
121092,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/ssl/CertificatesToPlayWith.java,73,,"          ""-----END CERTIFICATE-----\n"").getBytes();"
121093,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/ssl/CertificatesToPlayWith.java,473,,"        ""-----END CERTIFICATE-----"").getBytes();"
121094,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/ssl/TestDefaultHostnameVerifier.java,84,,"        impl.verify(""foo.com"", x509);"
121095,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/ssl/TestDefaultHostnameVerifier.java,85,,"        exceptionPlease(impl, ""a.foo.com"", x509);"
121096,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/ssl/TestDefaultHostnameVerifier.java,86,,"        exceptionPlease(impl, ""bar.com"", x509);"
121097,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/ssl/TestDefaultHostnameVerifier.java,90,,"        impl.verify(""\u82b1\u5b50.co.jp"", x509);"
121098,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/ssl/TestDefaultHostnameVerifier.java,215,,"        Assert.assertFalse(DefaultHostnameVerifier.matchDomainRoot(""a.b.c"", null));"
121099,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/ssl/TestDefaultHostnameVerifier.java,225,,"        Assert.assertTrue(DefaultHostnameVerifier.matchIdentity(""a.b.c"", ""*.b.c""));"
121100,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/ssl/TestDefaultHostnameVerifier.java,231,,"        Assert.assertFalse(DefaultHostnameVerifier.matchIdentity(""a.gov.uk"", ""*.gov.uk"", publicSuffixMatcher));"
121101,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/ssl/TestDefaultHostnameVerifier.java,231,,"        Assert.assertFalse(DefaultHostnameVerifier.matchIdentity(""a.gov.uk"", ""*.gov.uk"", publicSuffixMatcher));"
121102,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/ssl/TestDefaultHostnameVerifier.java,234,,"        Assert.assertTrue(DefaultHostnameVerifier.matchIdentity(""s.a.gov.uk"", ""*.a.gov.uk"", publicSuffixMatcher));"
121103,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/ssl/TestDefaultHostnameVerifier.java,240,,"        Assert.assertTrue(DefaultHostnameVerifier.matchIdentity(""a.gov.com"", ""*.gov.com"", publicSuffixMatcher));"
121104,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/ssl/TestDefaultHostnameVerifier.java,246,,"        Assert.assertFalse(DefaultHostnameVerifier.matchIdentity(""a.gov.uk"", ""a*.gov.uk"", publicSuffixMatcher));"
121105,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/ssl/TestDefaultHostnameVerifier.java,261,,"        Assert.assertTrue(DefaultHostnameVerifier.matchIdentity(""a.b.c"", ""a*.b.c""));"
121106,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/ssl/TestDefaultHostnameVerifier.java,278,,"        domain = ""dev.b.cloud.a"";"
121107,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/ssl/TestDefaultHostnameVerifier.java,279,,"        Assert.assertTrue(DefaultHostnameVerifier.matchIdentity(        ""service.apps."" + domain, ""*.apps."" + domain));"
121108,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/ssl/TestDefaultHostnameVerifier.java,279,,"        Assert.assertTrue(DefaultHostnameVerifier.matchIdentity(        ""service.apps."" + domain, ""*.apps."" + domain));"
121109,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/ssl/TestDefaultHostnameVerifier.java,285,,"        domain = ""dev.b.cloud.com"";"
121110,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/ssl/TestDefaultHostnameVerifier.java,292,,"        domain = ""dev.b.cloud.lan"";"
121111,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/ssl/TestDefaultHostnameVerifier.java,387,,"        Assert.assertEquals(""blah"", DefaultHostnameVerifier.extractCN(""cn=blah, ou=blah, o=blah""));"
121112,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/ssl/TestDistinguishedNameParser.java,55,,"                        new BasicNameValuePair(""cn"", ""blah""),"
121113,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/ssl/TestDistinguishedNameParser.java,56,,"                        new BasicNameValuePair(""ou"", ""yada""),"
121114,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/ssl/TestDistinguishedNameParser.java,57,,"                        new BasicNameValuePair(""o"", ""booh""))));"
121115,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/utils/TesDnsUtils.java,43,,"        MatcherAssert.assertThat(DnsUtils.normalize(""blah""), CoreMatchers.equalTo(""blah""));"
121116,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/utils/TestDateUtils.java,58,,"        Assert.assertEquals(date, DateUtils.parseDate(""Fri, 14 Oct 2005 00:00:00 GMT"", formats, null));"
121117,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/utils/TestDateUtils.java,116,,"        message1.setHeader(new BasicHeader(HttpHeaders.DATE, ""huh?""));"
121118,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/utils/TestURIUtils.java,64,,"        Assert.assertEquals(""http://a/g"", URIUtils.resolve(this.baseURI, ""/g"").toString());"
121119,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/utils/TestURIUtils.java,137,,"        Assert.assertEquals(new HttpHost(""localhost""),"
121120,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/utils/TestURIUtils.java,142,,"        Assert.assertEquals(new HttpHost(""local_host""),"
121121,./TargetProjects/httpcomponents-client/httpclient5/src/test/java/org/apache/hc/client5/http/utils/TestURIUtils.java,181,,"        final HttpHost target = new HttpHost(""http"", ""localhost"", -1);"
121122,./TargetProjects/httpcomponents-core/httpcore5-h2/src/main/java/org/apache/hc/core5/http2/frame/DefaultFrameFactory.java,45,,"        Args.positive(streamId, ""Stream id"");"
121123,./TargetProjects/httpcomponents-core/httpcore5-h2/src/main/java/org/apache/hc/core5/http2/frame/FramePrinter.java,114,,"                            appendable.append("": "").append(Integer.toString(value)).append(""\r\n"");"
121124,./TargetProjects/httpcomponents-core/httpcore5-h2/src/main/java/org/apache/hc/core5/http2/frame/FramePrinter.java,117,,"                        appendable.append(""Invalid\r\n"");"
121125,./TargetProjects/httpcomponents-core/httpcore5-h2/src/main/java/org/apache/hc/core5/http2/impl/nio/bootstrap/H2ServerBootstrap.java,296,,"        Args.notBlank(name, ""Name"");"
121126,./TargetProjects/httpcomponents-core/httpcore5-h2/src/main/java/org/apache/hc/core5/http2/impl/nio/bootstrap/H2ServerBootstrap.java,297,,"        Args.notNull(filterHandler, ""Filter handler"");"
121127,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/hpack/TestHPackCoding.java,144,,"        Assert.assertEquals(""custom-key"", new String(buffer.array(), 0, buffer.length(), StandardCharsets.US_ASCII));"
121128,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/hpack/TestHPackCoding.java,145,,"        Assert.assertFalse(""Decoding completed"", src.hasRemaining());"
121129,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/hpack/TestHPackCoding.java,190,,"        Assert.assertEquals(""www.example.com"", new String(buffer.array(), 0, buffer.length(), StandardCharsets.US_ASCII));"
121130,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/hpack/TestHPackCoding.java,340,,"        assertHeaderEquals(new BasicHeader("":path"", ""/sample/path""), header);"
121131,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/hpack/TestHPackCoding.java,369,,"        assertHeaderEquals(new BasicHeader("":method"", ""GET""), header);"
121132,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/hpack/TestHPackCoding.java,369,,"        assertHeaderEquals(new BasicHeader("":method"", ""GET""), header);"
121133,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/hpack/TestHPackCoding.java,388,,"        assertHeaderEquals(new BasicHeader("":scheme"", ""http""), headers1.get(1));"
121134,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/hpack/TestHPackCoding.java,388,,"        assertHeaderEquals(new BasicHeader("":scheme"", ""http""), headers1.get(1));"
121135,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/hpack/TestHPackCoding.java,390,,"        assertHeaderEquals(new BasicHeader("":authority"", ""www.example.com""), headers1.get(3));"
121136,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/hpack/TestHPackCoding.java,406,,"        assertHeaderEquals(new BasicHeader(""cache-control"", ""no-cache""), headers2.get(4));"
121137,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/hpack/TestHPackCoding.java,406,,"        assertHeaderEquals(new BasicHeader(""cache-control"", ""no-cache""), headers2.get(4));"
121138,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/hpack/TestHPackCoding.java,421,,"        assertHeaderEquals(new BasicHeader("":scheme"", ""https""), headers3.get(1));"
121139,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/hpack/TestHPackCoding.java,422,,"        assertHeaderEquals(new BasicHeader("":path"", ""/index.html""), headers3.get(2));"
121140,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/hpack/TestHPackCoding.java,424,,"        assertHeaderEquals(new BasicHeader(""custom-key"", ""custom-value""), headers3.get(4));"
121141,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/hpack/TestHPackCoding.java,506,,"        assertHeaderEquals(new BasicHeader("":status"", ""302""), headers1.get(0));"
121142,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/hpack/TestHPackCoding.java,506,,"        assertHeaderEquals(new BasicHeader("":status"", ""302""), headers1.get(0));"
121143,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/hpack/TestHPackCoding.java,507,,"        assertHeaderEquals(new BasicHeader(""cache-control"", ""private""), headers1.get(1));"
121144,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/hpack/TestHPackCoding.java,508,,"        assertHeaderEquals(new BasicHeader(""date"", ""Mon, 21 Oct 2013 20:13:21 GMT""), headers1.get(2));"
121145,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/hpack/TestHPackCoding.java,508,,"        assertHeaderEquals(new BasicHeader(""date"", ""Mon, 21 Oct 2013 20:13:21 GMT""), headers1.get(2));"
121146,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/hpack/TestHPackCoding.java,509,,"        assertHeaderEquals(new BasicHeader(""location"", ""https://www.example.com""), headers1.get(3));"
121147,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/hpack/TestHPackCoding.java,509,,"        assertHeaderEquals(new BasicHeader(""location"", ""https://www.example.com""), headers1.get(3));"
121148,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/hpack/TestHPackCoding.java,524,,"        assertHeaderEquals(new BasicHeader("":status"", ""307""), headers2.get(0));"
121149,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/hpack/TestHPackCoding.java,548,,"        assertHeaderEquals(new BasicHeader("":status"", ""200""), headers3.get(0));"
121150,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/hpack/TestHPackCoding.java,550,,"        assertHeaderEquals(new BasicHeader(""date"", ""Mon, 21 Oct 2013 20:13:22 GMT""), headers3.get(2));"
121151,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/hpack/TestHPackCoding.java,552,,"        assertHeaderEquals(new BasicHeader(""content-encoding"", ""gzip""), headers3.get(4));"
121152,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/hpack/TestHPackCoding.java,552,,"        assertHeaderEquals(new BasicHeader(""content-encoding"", ""gzip""), headers3.get(4));"
121153,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/hpack/TestHPackCoding.java,553,,"        assertHeaderEquals(new BasicHeader(""set-cookie"", ""foo=ASDJKHQKBZXOQWEOPIUAXQWEOIU; max-age=3600; version=1""), headers3.get(5));"
121154,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/hpack/TestHPackCoding.java,553,,"        assertHeaderEquals(new BasicHeader(""set-cookie"", ""foo=ASDJKHQKBZXOQWEOPIUAXQWEOIU; max-age=3600; version=1""), headers3.get(5));"
121155,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/impl/TestDefaultH2RequestConverter.java,49,,"                new BasicHeader("":method"", ""GET""),"
121156,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/impl/TestDefaultH2RequestConverter.java,49,,"                new BasicHeader("":method"", ""GET""),"
121157,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/impl/TestDefaultH2RequestConverter.java,50,,"                new BasicHeader("":scheme"", ""http""),"
121158,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/impl/TestDefaultH2RequestConverter.java,50,,"                new BasicHeader("":scheme"", ""http""),"
121159,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/impl/TestDefaultH2RequestConverter.java,51,,"                new BasicHeader("":authority"", ""www.example.com""),"
121160,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/impl/TestDefaultH2RequestConverter.java,51,,"                new BasicHeader("":authority"", ""www.example.com""),"
121161,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/impl/TestDefaultH2RequestConverter.java,52,,"                new BasicHeader("":path"", ""/""),"
121162,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/impl/TestDefaultH2RequestConverter.java,53,,"                new BasicHeader(""custom123"", ""value""));"
121163,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/impl/TestDefaultH2RequestConverter.java,53,,"                new BasicHeader(""custom123"", ""value""));"
121164,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/impl/TestDefaultH2RequestConverter.java,75,,"                new BasicHeader(""custom"", ""value""));"
121165,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/impl/TestDefaultH2RequestConverter.java,213,,"                new BasicHeader("":method"", ""CONNECT""),"
121166,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/impl/TestDefaultH2RequestConverter.java,261,,"        final HttpRequest request = new BasicHttpRequest(""GET"", new HttpHost(""host""), ""/"");"
121167,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/impl/TestDefaultH2RequestConverter.java,262,,"        request.addHeader(""custom123"", ""Value"");"
121168,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/impl/TestDefaultH2RequestConverter.java,289,,"        request.addHeader(""Custom123"", ""Value"");"
121169,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/impl/TestDefaultH2ResponseConverter.java,47,,"                new BasicHeader("":status"", ""200""),"
121170,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/impl/TestDefaultH2ResponseConverter.java,47,,"                new BasicHeader("":status"", ""200""),"
121171,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/impl/TestDefaultH2ResponseConverter.java,48,,"                new BasicHeader(""location"", ""http://www.example.com/""),"
121172,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/impl/TestDefaultH2ResponseConverter.java,48,,"                new BasicHeader(""location"", ""http://www.example.com/""),"
121173,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/impl/TestDefaultH2ResponseConverter.java,49,,"                new BasicHeader(""custom123"", ""value""));"
121174,./TargetProjects/httpcomponents-core/httpcore5-h2/src/test/java/org/apache/hc/core5/http2/impl/TestDefaultH2ResponseConverter.java,49,,"                new BasicHeader(""custom123"", ""value""));"
121175,./TargetProjects/httpcomponents-core/httpcore5-testing/src/main/java/org/apache/hc/core5/benchmark/HttpBenchmark.java,320,,"                            System.out.println("">> "" + request.getMethod() + "" "" + request.getRequestUri());"
121176,./TargetProjects/httpcomponents-core/httpcore5-testing/src/main/java/org/apache/hc/core5/benchmark/HttpBenchmark.java,332,,"                            System.out.println(""<< "" + response.getCode() + "" "" + response.getReasonPhrase());"
121177,./TargetProjects/httpcomponents-core/httpcore5-testing/src/main/java/org/apache/hc/core5/testing/framework/TestingFramework.java,344,,"                                                  + expectedStatus + ""; actual="" + actualStatus);"
121178,./TargetProjects/httpcomponents-core/httpcore5-testing/src/main/java/org/apache/hc/core5/testing/framework/TestingFrameworkRequestHandler.java,71,,"    @SuppressWarnings(""unchecked"")"
121179,./TargetProjects/httpcomponents-core/httpcore5-testing/src/main/java/org/apache/hc/core5/testing/framework/TestingFrameworkRequestHandler.java,155,,"                            "" Parameter="" + key + ""; expected="" + expectedParamValue + ""; actual="" + actualParamValue);"
121180,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/classic/ClassicAuthenticationTest.java,120,,"                            return challengeResponse != null && challengeResponse.equals(""let me pass"");"
121181,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/classic/ClassicAuthenticationTest.java,134,,"                            return new StringEntity(""You shall not pass!!!"");"
121182,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/classic/ClassicAuthenticationTest.java,194,,"        final ClassicHttpRequest request1 = new BasicClassicHttpRequest(Method.GET, ""/stuff"");"
121183,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/classic/ClassicIntegrationTest.java,188,,"        final HttpHost host = new HttpHost(scheme.id, ""localhost"", this.server.getPort());"
121184,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/classic/ClassicIntegrationTest.java,543,,"            ""yadayada-blahblah-this-and-that-yadayada-blahblah-this-and-that-"" +"
121185,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/classic/ClassicServerAndRequesterTest.java,177,,"        request1.setEntity(new StringEntity(""some stuff"", ContentType.TEXT_PLAIN));"
121186,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/classic/ClassicServerAndRequesterTest.java,184,,"        request2.setEntity(new StringEntity(""some other stuff"", ContentType.TEXT_PLAIN));"
121187,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/classic/ClassicServerAndRequesterTest.java,191,,"        request3.setEntity(new StringEntity(""some more stuff"", ContentType.TEXT_PLAIN));"
121188,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/classic/ClassicTLSIntegrationTest.java,128,,"        final HttpHost target = new HttpHost(""https"", ""localhost"", server.getLocalPort());"
121189,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/classic/ClassicTLSIntegrationTest.java,128,,"        final HttpHost target = new HttpHost(""https"", ""localhost"", server.getLocalPort());"
121190,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/classic/ClassicTLSIntegrationTest.java,129,,"        final ClassicHttpRequest request1 = new BasicClassicHttpRequest(Method.POST, ""/stuff"");"
121191,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/classic/ClassicTLSIntegrationTest.java,130,,"        request1.setEntity(new StringEntity(""some stuff"", ContentType.TEXT_PLAIN));"
121192,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/compatibility/http2/H2CompatibilityTest.java,146,,"                                            Objects.toString(response.getFirstHeader(""server"")));"
121193,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/compatibility/http2/H2CompatibilityTest.java,148,,"                                    logResult(TestResult.NOK, target, httpget, response, ""(status "" + code + "")"");"
121194,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/compatibility/http2/H2CompatibilityTest.java,161,,"                                logResult(TestResult.NOK, target, httpget, null, ""(cancelled)"");"
121195,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/compatibility/http2/H2CompatibilityTest.java,293,,"                            new StringAsyncEntityProducer(""some important message"", ContentType.TEXT_PLAIN)),"
121196,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/framework/TestTestingFramework.java,290,,"                response.put(BODY, TestingFramework.DEFAULT_RESPONSE_BODY + ""junk"");"
121197,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/framework/TestTestingFramework.java,336,,"        @SuppressWarnings(""unchecked"")"
121198,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/framework/TestTestingFramework.java,588,,"                Assert.assertTrue(headers.containsKey(""header1""));"
121199,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/nio/H2IntegrationTest.java,177,,"            return new URI(""http"", null, ""localhost"", serverEndpoint.getPort(), path, null, null);"
121200,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/nio/H2IntegrationTest.java,185,,"        server.register(""/hello"", () -> new SingleLineResponseHandler(""Hi there""));"
121201,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/nio/H2IntegrationTest.java,185,,"        server.register(""/hello"", () -> new SingleLineResponseHandler(""Hi there""));"
121202,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/nio/H2IntegrationTest.java,237,,"        server.register(""/"", () -> new MultiLineResponseHandler(""0123456789abcdef"", 5000));"
121203,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/nio/H2IntegrationTest.java,260,,"        final StringTokenizer t1 = new StringTokenizer(s1, ""\r\n"");"
121204,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/nio/H2IntegrationTest.java,319,,"                new BasicRequestProducer(Method.POST, createRequestURI(serverEndpoint, ""/echo""),"
121205,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/nio/H2IntegrationTest.java,337,,"        server.register(""/"", () -> new MultiLineResponseHandler(""0123456789abcd"", 3));"
121206,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/nio/H2IntegrationTest.java,708,,"                    return new BasicResponseProducer(HttpStatus.SC_UNAUTHORIZED, ""You shall not pass"");"
121207,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/nio/H2ServerAndMultiplexingRequesterTest.java,167,,"        final HttpHost target = new HttpHost(scheme.id, ""localhost"", address.getPort());"
121208,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/nio/H2ServerAndMultiplexingRequesterTest.java,169,,"                new BasicRequestProducer(Method.POST, target, ""/stuff"","
121209,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/nio/H2ServerAndMultiplexingRequesterTest.java,170,,"                        new StringAsyncEntityProducer(""some stuff"", ContentType.TEXT_PLAIN)),"
121210,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/nio/H2ServerAndMultiplexingRequesterTest.java,181,,"                        new StringAsyncEntityProducer(""some other stuff"", ContentType.TEXT_PLAIN)),"
121211,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/nio/H2ServerAndMultiplexingRequesterTest.java,192,,"                        new StringAsyncEntityProducer(""some more stuff"", ContentType.TEXT_PLAIN)),"
121212,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/nio/H2ServerAndRequesterTest.java,173,,"                        new StringAsyncEntityProducer(""some stuff"", ContentType.TEXT_PLAIN)),"
121213,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/nio/H2ServerAndRequesterTest.java,184,,"                        new StringAsyncEntityProducer(""some other stuff"", ContentType.TEXT_PLAIN)),"
121214,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/nio/H2ServerAndRequesterTest.java,195,,"                        new StringAsyncEntityProducer(""some more stuff"", ContentType.TEXT_PLAIN)),"
121215,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/nio/H2TLSIntegrationTest.java,153,,"        final HttpHost target = new HttpHost(URIScheme.HTTPS.id, ""localhost"", address.getPort());"
121216,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/nio/H2TLSIntegrationTest.java,155,,"                new BasicRequestProducer(Method.POST, target, ""/stuff"","
121217,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/nio/H2TLSIntegrationTest.java,156,,"                        new StringAsyncEntityProducer(""some stuff"", ContentType.TEXT_PLAIN)),"
121218,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/nio/Http1AuthenticationTest.java,126,,"                            return challengeResponse != null && challengeResponse.equals(""let me pass"");"
121219,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/nio/Http1AuthenticationTest.java,140,,"                            return AsyncEntityProducers.create(""You shall not pass!!!"");"
121220,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/nio/Http1AuthenticationTest.java,206,,"        final HttpRequest request1 = new BasicHttpRequest(Method.GET, target, ""/stuff"");"
121221,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/nio/Http1IntegrationTest.java,188,,"            return new URI(scheme.id, null, ""localhost"", serverEndpoint.getPort(), path, null, null);"
121222,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/nio/Http1IntegrationTest.java,196,,"        server.register(""/hello"", () -> new SingleLineResponseHandler(""Hi there""));"
121223,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/nio/Http1IntegrationTest.java,196,,"        server.register(""/hello"", () -> new SingleLineResponseHandler(""Hi there""));"
121224,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/nio/Http1IntegrationTest.java,297,,"        server.register(""/"", () -> new MultiLineResponseHandler(""0123456789abcdef"", 5000));"
121225,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/nio/Http1IntegrationTest.java,316,,"        final StringTokenizer t1 = new StringTokenizer(s1, ""\r\n"");"
121226,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/nio/Http1IntegrationTest.java,372,,"        server.register(""/hello"", () -> new SingleLineResponseHandler(""Hi back""));"
121227,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/nio/Http1IntegrationTest.java,487,,"                    new BasicRequestProducer(Method.POST, createRequestURI(serverEndpoint, ""/echo""),"
121228,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/nio/Http1IntegrationTest.java,656,,"                responseTrigger.submitResponse(new BasicResponseProducer(HttpStatus.SC_OK, ""All is well""), context);"
121229,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/nio/Http1IntegrationTest.java,664,,"                final Header h = request.getFirstHeader(""password"");"
121230,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/nio/Http1IntegrationTest.java,665,,"                if (h != null && ""secret"".equals(h.getValue())) {"
121231,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/nio/Http1IntegrationTest.java,668,,"                    return new BasicResponseProducer(HttpStatus.SC_UNAUTHORIZED, ""You shall not pass"");"
121232,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/nio/Http1IntegrationTest.java,977,,"        server.register(""/"", () -> new MultiLineResponseHandler(""0123456789abcd"", 100));"
121233,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/nio/Http1ServerAndRequesterTest.java,201,,"        final HttpHost target = new HttpHost(scheme.id, ""localhost"", address.getPort());"
121234,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/nio/Http1ServerAndRequesterTest.java,204,,"                        new StringAsyncEntityProducer(""some stuff"", ContentType.TEXT_PLAIN)),"
121235,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/nio/Http1ServerAndRequesterTest.java,215,,"                        new StringAsyncEntityProducer(""some other stuff"", ContentType.TEXT_PLAIN)),"
121236,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/nio/Http1ServerAndRequesterTest.java,226,,"                        new StringAsyncEntityProducer(""some more stuff"", ContentType.TEXT_PLAIN)),"
121237,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/nio/JSSEProviderIntegrationTest.java,202,,"            return new URI(""https"", null, ""localhost"", serverEndpoint.getPort(), path, null, null);"
121238,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/nio/JSSEProviderIntegrationTest.java,210,,"        server.register(""/hello"", () -> new SingleLineResponseHandler(""Hi there""));"
121239,./TargetProjects/httpcomponents-core/httpcore5-testing/src/test/java/org/apache/hc/core5/testing/nio/JSSEProviderIntegrationTest.java,210,,"        server.register(""/hello"", () -> new SingleLineResponseHandler(""Hi there""));"
121240,./TargetProjects/httpcomponents-core/httpcore5/src/main/java/org/apache/hc/core5/http/config/NamedElementChain.java,60,,"        Args.notBlank(name, ""Name"");"
121241,./TargetProjects/httpcomponents-core/httpcore5/src/main/java/org/apache/hc/core5/http/config/NamedElementChain.java,61,,"        Args.notNull(value, ""Value"");"
121242,./TargetProjects/httpcomponents-core/httpcore5/src/main/java/org/apache/hc/core5/http/impl/bootstrap/AsyncServerBootstrap.java,274,,"        Args.notBlank(name, ""Name"");"
121243,./TargetProjects/httpcomponents-core/httpcore5/src/main/java/org/apache/hc/core5/http/impl/bootstrap/AsyncServerBootstrap.java,275,,"        Args.notNull(filterHandler, ""Filter handler"");"
121244,./TargetProjects/httpcomponents-core/httpcore5/src/main/java/org/apache/hc/core5/http/impl/bootstrap/ServerBootstrap.java,277,,"        Args.notBlank(name, ""Name"");"
121245,./TargetProjects/httpcomponents-core/httpcore5/src/main/java/org/apache/hc/core5/http/impl/bootstrap/ServerBootstrap.java,278,,"        Args.notNull(filterHandler, ""Filter handler"");"
121246,./TargetProjects/httpcomponents-core/httpcore5/src/main/java/org/apache/hc/core5/http/impl/io/HttpRequestExecutor.java,126,,"        Args.notNull(context, ""HTTP context"");"
121247,./TargetProjects/httpcomponents-core/httpcore5/src/main/java/org/apache/hc/core5/http/impl/io/SessionInputBufferImpl.java,136,,"        Args.notNull(inputStream, ""Input stream"");"
121248,./TargetProjects/httpcomponents-core/httpcore5/src/main/java/org/apache/hc/core5/http/impl/io/SessionOutputBufferImpl.java,125,,"        Args.notNull(outputStream, ""Output stream"");"
121249,./TargetProjects/httpcomponents-core/httpcore5/src/main/java/org/apache/hc/core5/http/impl/nio/ClientHttp1StreamDuplexer.java,347,,"        Asserts.notNull(incoming, ""Response stream handler"");"
121250,./TargetProjects/httpcomponents-core/httpcore5/src/main/java/org/apache/hc/core5/http/io/entity/EntityUtils.java,124,,"        Args.notNull(entity, ""HttpEntity"");"
121251,./TargetProjects/httpcomponents-core/httpcore5/src/main/java/org/apache/hc/core5/http/message/BasicHeaderValueFormatter.java,57,,"        Args.notNull(buffer, ""Char array buffer"");"
121252,./TargetProjects/httpcomponents-core/httpcore5/src/main/java/org/apache/hc/core5/http/message/BasicHeaderValueParser.java,77,,"        Args.notNull(buffer, ""Char sequence"");"
121253,./TargetProjects/httpcomponents-core/httpcore5/src/main/java/org/apache/hc/core5/http/message/BasicHeaderValueParser.java,78,,"        Args.notNull(cursor, ""Parser cursor"");"
121254,./TargetProjects/httpcomponents-core/httpcore5/src/main/java/org/apache/hc/core5/http/message/BasicHttpResponse.java,70,,"        this.code = Args.positive(code, ""Status code"");"
121255,./TargetProjects/httpcomponents-core/httpcore5/src/main/java/org/apache/hc/core5/http/ssl/TLS.java,44,,"    V_1_0(""TLSv1"",   new ProtocolVersion(""TLS"", 1, 0)),"
121256,./TargetProjects/httpcomponents-core/httpcore5/src/main/java/org/apache/hc/core5/pool/LaxConnPool.java,162,,"        Args.notNull(route, ""Route"");"
121257,./TargetProjects/httpcomponents-core/httpcore5/src/main/java/org/apache/hc/core5/pool/StrictConnPool.java,174,,"        Args.notNull(route, ""Route"");"
121258,./TargetProjects/httpcomponents-core/httpcore5/src/main/java/org/apache/hc/core5/util/Tokenizer.java,138,,"        Args.notNull(buf, ""Char sequence"");"
121259,./TargetProjects/httpcomponents-core/httpcore5/src/main/java/org/apache/hc/core5/util/Tokenizer.java,139,,"        Args.notNull(cursor, ""Parser cursor"");"
121260,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/TestContentType.java,44,,"        final ContentType contentType = ContentType.create(""text/plain"", ""US-ASCII"");"
121261,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/TestContentType.java,144,,"        contentType = ContentType.create(""text/blah"").withParameters("
121262,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/TestHttpExceptions.java,46,,"        new HttpException(""Oppsie"");"
121263,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/TestHttpHost.java,49,,"        final HttpHost host1 = new HttpHost(""somehost"");"
121264,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/TestHttpHost.java,52,,"        Assert.assertEquals(""http"", host1.getSchemeName());"
121265,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/TestHttpHost.java,61,,"        final HttpHost host4 = new HttpHost(""https"", ""somehost"", 443);"
121266,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/TestHttpHost.java,78,,"        final HttpHost host3 = new HttpHost(""http"", ""someotherhost"", 8080);"
121267,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/TestHttpHost.java,80,,"        final HttpHost host5 = new HttpHost(""http"", ""SomeHost"", 80);"
121268,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/TestHttpHost.java,81,,"        final HttpHost host6 = new HttpHost(""myhttp"", ""SomeHost"", 80);"
121269,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/TestHttpHost.java,83,,"                ""http"", InetAddress.getByAddress(""127.0.0.1"", new byte[] {127,0,0,1}), 80);"
121270,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/TestHttpHost.java,132,,"        Assert.assertNotEquals(""http://somehost"", host1);"
121271,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/TestHttpHost.java,213,,"        Assert.assertEquals(""::1"", host.getHostName());"
121272,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/TestHttpVersion.java,96,,"        Assert.assertEquals((new ProtocolVersion(""HTTP"", 0, 9)), HttpVersion.HTTP_0_9);"
121273,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/config/TestRegistry.java,36,,"        final Registry<String> reg = RegistryBuilder.<String>create().register(""Stuff"", ""Stuff"").build();"
121274,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/examples/AsyncReverseProxyExample.java,286,,"            println(""[proxy->origin] "" + exchangeState.id + "" request connection to "" + targetHost);"
121275,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/examples/AsyncReverseProxyExample.java,315,,"                    println(""[client<-proxy] "" + exchangeState.id + "" status "" + outgoingResponse.getCode());"
121276,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/examples/AsyncReverseProxyExample.java,315,,"                    println(""[client<-proxy] "" + exchangeState.id + "" status "" + outgoingResponse.getCode());"
121277,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/examples/AsyncReverseProxyExample.java,339,,"                    println(""[client<-proxy] "" + exchangeState.id + "" input capacity: "" + capacity);"
121278,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/examples/AsyncReverseProxyExample.java,353,,"                        println(""[proxy->origin] "" + exchangeState.id + "" "" + bytesWritten + "" bytes sent"");"
121279,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/examples/AsyncReverseProxyExample.java,381,,"                    println(""[proxy->origin] "" + exchangeState.id + "" end of output"");"
121280,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/examples/AsyncReverseProxyExample.java,546,,"                println(""[proxy<-origin] "" + exchangeState.id + "" status "" + incomingResponse.getCode());"
121281,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/examples/ClassicReverseProxyExample.java,135,,"                        System.out.println(""[client->proxy] "" + Thread.currentThread() + "" "" +"
121282,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/impl/TestDefaultConnectionReuseStrategy.java,80,,"        response.addHeader(""Transfer-Encoding"", ""chunked"");"
121283,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/impl/TestDefaultConnectionReuseStrategy.java,80,,"        response.addHeader(""Transfer-Encoding"", ""chunked"");"
121284,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/impl/TestDefaultConnectionReuseStrategy.java,88,,"        response.addHeader(""Connection"", ""keep-alive"");"
121285,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/impl/TestDefaultConnectionReuseStrategy.java,88,,"        response.addHeader(""Connection"", ""keep-alive"");"
121286,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/impl/TestDefaultConnectionReuseStrategy.java,97,,"        response.addHeader(""Connection"", ""close"");"
121287,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/impl/TestDefaultConnectionReuseStrategy.java,106,,"        response.addHeader(""Content-Length"", ""10"");"
121288,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/impl/io/TestDefaultBHttpClientConnection.java,92,,"        Assert.assertTrue(response.containsHeader(""User-Agent""));"
121289,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/impl/io/TestDefaultBHttpClientConnection.java,110,,"        Assert.assertTrue(response.containsHeader(""Server""));"
121290,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/impl/io/TestDefaultBHttpClientConnection.java,242,,"        final ClassicHttpRequest request = new BasicClassicHttpRequest(Method.GET, ""/stuff"");"
121291,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/impl/io/TestDefaultBHttpClientConnection.java,243,,"        request.addHeader(""User-Agent"", ""test"");"
121292,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/impl/io/TestDefaultBHttpClientConnection.java,265,,"        request.setEntity(new StringEntity(""123"", ContentType.TEXT_PLAIN));"
121293,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/impl/io/TestDefaultBHttpServerConnection.java,92,,"        Assert.assertTrue(request.containsHeader(""User-Agent""));"
121294,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/impl/io/TestDefaultBHttpServerConnection.java,217,,"        response.addHeader(""User-Agent"", ""test"");"
121295,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/impl/io/TestDefaultBHttpServerConnection.java,256,,"        response.addHeader(""Server"", ""test"");"
121296,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/impl/io/TestHttpRequestExecutor.java,143,,"                new BasicClassicHttpResponse(110, ""Huh?""),"
121297,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/impl/io/TestHttpService.java,198,,"        final ClassicHttpRequest request = new BasicClassicHttpRequest(""whatever"", ""/"");"
121298,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/impl/io/TestMessageParser.java,48,,"            ""header1: stuff\r\n"" +"
121299,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/impl/io/TestMessageParser.java,54,,"            ""\r\n"";"
121300,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/impl/io/TestMessageParser.java,61,,"        Assert.assertEquals(""stuff"", headers[0].getValue());"
121301,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/impl/io/TestRequestParser.java,54,,"            ""\r\n"";"
121302,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/impl/io/TestResponseParser.java,54,,"            ""\r\n"";"
121303,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestChunkDecoder.java,79,,"        final String s = ""10;key=\""value\""\r\n1234567890123456\r\n"" +"
121304,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestChunkDecoder.java,99,,"        Assert.assertEquals(""12345678901234561234512345"", CodecTestUtils.convert(dst));"
121305,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestChunkDecoder.java,300,,"        final String s = ""10\r\n1234567890123456\r\n"" +"
121306,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestChunkDecoder.java,378,,"                ""1234567890123456"", CodecTestUtils.convert(dst));"
121307,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestChunkEncoder.java,95,,"        channel.write(CodecTestUtils.wrap(""0123456789ABCDEF""));"
121308,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestIdentityDecoder.java,67,,"                new String[] {""stuff;"", ""more stuff""}, StandardCharsets.US_ASCII);"
121309,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestIdentityDecoder.java,67,,"                new String[] {""stuff;"", ""more stuff""}, StandardCharsets.US_ASCII);"
121310,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestIdentityDecoder.java,149,,"                new String[] {""stuff; "", ""more stuff; "", ""a lot more stuff!""}, StandardCharsets.US_ASCII);"
121311,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestIdentityEncoder.java,73,,"        Assert.assertEquals(5, encoder.write(CodecTestUtils.wrap(""stuff"")));"
121312,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestIdentityEncoder.java,118,,"        Assert.assertThrows(IllegalStateException.class, () -> encoder.write(CodecTestUtils.wrap(""more stuff"")));"
121313,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestIdentityEncoder.java,142,,"            testfile.write(""stuff;"".getBytes(StandardCharsets.US_ASCII));"
121314,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestIdentityEncoder.java,230,,"        chbuffer.append(""header"");"
121315,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestLengthDelimitedDecoder.java,68,,"                new String[] {""stuff;"", ""more stuff""}, StandardCharsets.US_ASCII);"
121316,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestLengthDelimitedDecoder.java,68,,"                new String[] {""stuff;"", ""more stuff""}, StandardCharsets.US_ASCII);"
121317,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestLengthDelimitedEncoder.java,74,,"        encoder.write(CodecTestUtils.wrap(""stuff;""));"
121318,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestLengthDelimitedEncoder.java,75,,"        encoder.write(CodecTestUtils.wrap(""more stuff""));"
121319,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestLengthDelimitedEncoder.java,80,,"        Assert.assertEquals(""stuff;more stuff"", s);"
121320,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestLengthDelimitedEncoder.java,132,,"        encoder.write(CodecTestUtils.wrap(""stuff""));"
121321,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestLengthDelimitedEncoder.java,272,,"        chbuffer.append(""header"");"
121322,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestSessionInOutBuffers.java,342,,"        final byte[] pattern = ""0123456789ABCDEF"".getBytes(StandardCharsets.US_ASCII);"
121323,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestBufferedHttpEntity.java,45,,"        final byte[] bytes = ""Message content"".getBytes(StandardCharsets.US_ASCII);"
121324,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestByteArrayEntity.java,44,,"        final byte[] bytes = ""Message content"".getBytes(StandardCharsets.US_ASCII);"
121325,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestEntityUtils.java,64,,"        final byte[] content = ""Message content"".getBytes(StandardCharsets.ISO_8859_1);"
121326,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestInputStreamEntity.java,47,,"        final byte[] bytes = ""Message content"".getBytes(StandardCharsets.ISO_8859_1);"
121327,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicHeaderElementIterator.java,46,,"                new BasicHeader(""Name"", ""value0""),"
121328,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicHeaderElementIterator.java,55,,"        Assert.assertEquals(""The two header values must be equal"","
121329,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicHeaderIterator.java,122,,"            new BasicHeader(""yellow"", ""00""),"
121330,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicHeaderIterator.java,123,,"            new BasicHeader(""maroon"", ""01""),"
121331,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicHeaderIterator.java,124,,"            new BasicHeader(""orange"", ""02""),"
121332,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicHeaderValueFormatter.java,52,,"        final NameValuePair param1 = new BasicNameValuePair(""param"", ""regular_stuff"");"
121333,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicHeaderValueFormatter.java,52,,"        final NameValuePair param1 = new BasicNameValuePair(""param"", ""regular_stuff"");"
121334,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicHeaderValueFormatter.java,53,,"        final NameValuePair param2 = new BasicNameValuePair(""param"", ""this\\that"");"
121335,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicHeaderValueFormatter.java,54,,"        final NameValuePair param3 = new BasicNameValuePair(""param"", ""this,that"");"
121336,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicHeaderValueParser.java,96,,"        Assert.assertEquals(""test1"", elements[0].getName());"
121337,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicHeaderValueParser.java,98,,"        Assert.assertEquals(""test2"", elements[1].getName());"
121338,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicHeaderValueParser.java,100,,"        Assert.assertEquals(""test3"", elements[2].getName());"
121339,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicHeaderValueParser.java,137,,"        String s = ""test"";"
121340,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicHeaderValueParser.java,177,,"        Assert.assertEquals(""stuff"", param.getValue());"
121341,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicMessages.java,52,,"        final HttpResponse response2 = new BasicHttpResponse(HttpStatus.SC_INTERNAL_SERVER_ERROR, ""whatever"");"
121342,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicMessages.java,117,,"        final HttpRequest request = new BasicHttpRequest(Method.GET, ""/stuff"");"
121343,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicMessages.java,135,,"        final HttpRequest request = new BasicHttpRequest(Method.GET, new URI(""https://host:9443/stuff?param=value""));"
121344,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicMessages.java,138,,"        Assert.assertEquals(new URIAuthority(""host"", 9443), request.getAuthority());"
121345,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicMessages.java,159,,"        Assert.assertEquals(""http"", request.getScheme());"
121346,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicMessages.java,175,,"        final HttpRequest request = new BasicHttpRequest(Method.GET, new HttpHost(""http"", ""somehost"", -1), ""/stuff"");"
121347,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicMessages.java,184,,"        final HttpRequest request = new BasicHttpRequest(Method.GET, new HttpHost(""http"", ""somehost"", -1), ""stuff"");"
121348,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicTokenIterator.java,47,,"            new BasicHeader(""Name"", ""token0,token1, token2 , token3"")"
121349,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicTokenIterator.java,53,,"        Assert.assertEquals(""token0"", ""token0"", ti.next());"
121350,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicTokenIterator.java,55,,"        Assert.assertEquals(""token1"", ""token1"", ti.next());"
121351,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicTokenIterator.java,57,,"        Assert.assertEquals(""token2"", ""token2"", ti.next());"
121352,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicTokenIterator.java,59,,"        Assert.assertEquals(""token3"", ""token3"", ti.next());"
121353,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicTokenIterator.java,84,,"            new BasicHeader(""Name"", ""token4""),"
121354,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicTokenIterator.java,148,,"        Assert.assertEquals(""token5"", ""token5"", ti.next());"
121355,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestHeader.java,46,,"        final Header header = new BasicHeader(""name"", ""value"");"
121356,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestHeaderElement.java,43,,"        final HeaderElement element = new BasicHeaderElement(""name"", ""value"","
121357,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestHeaderElement.java,43,,"        final HeaderElement element = new BasicHeaderElement(""name"", ""value"","
121358,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestHeaderElement.java,45,,"                    new BasicNameValuePair(""param1"", ""value1""),"
121359,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestHeaderElement.java,45,,"                    new BasicNameValuePair(""param1"", ""value1""),"
121360,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestHeaderElement.java,46,,"                    new BasicNameValuePair(""param2"", ""value2"")"
121361,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestHeaderElement.java,46,,"                    new BasicNameValuePair(""param2"", ""value2"")"
121362,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestHeaderGroup.java,56,,"        headergroup.addHeader(new BasicHeader(""name"", ""value""));"
121363,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestHeaderGroup.java,56,,"        headergroup.addHeader(new BasicHeader(""name"", ""value""));"
121364,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestHeaderGroup.java,101,,"        final Header header1 = new BasicHeader(""name1"", ""value1"");"
121365,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestHeaderGroup.java,101,,"        final Header header1 = new BasicHeader(""name1"", ""value1"");"
121366,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestHeaderGroup.java,102,,"        final Header header2 = new BasicHeader(""name2"", ""value2"");"
121367,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestHeaderGroup.java,102,,"        final Header header2 = new BasicHeader(""name2"", ""value2"");"
121368,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestHeaderGroup.java,103,,"        final Header header3 = new BasicHeader(""name3"", ""value3"");"
121369,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestHeaderGroup.java,103,,"        final Header header3 = new BasicHeader(""name3"", ""value3"");"
121370,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestNameValuePair.java,42,,"        final NameValuePair param = new BasicNameValuePair(""name"", ""value"");"
121371,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestNameValuePair.java,42,,"        final NameValuePair param = new BasicNameValuePair(""name"", ""value"");"
121372,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/nio/entity/TestBasicAsyncEntityProducer.java,58,,"        Assert.assertEquals(""abc"", byteChannel.dump(StandardCharsets.US_ASCII));"
121373,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/nio/entity/TestStringAsyncEntityProducer.java,46,,"                ""abc"", ContentType.TEXT_PLAIN);"
121374,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/nio/support/classic/TestSharedInputBuffer.java,55,,"        inputBuffer.fill(charset.encode(""1234567890""));"
121375,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/nio/support/classic/TestSharedOutputBuffer.java,103,,"        final byte[] tmp = ""1234567890"".getBytes(charset);"
121376,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestHttpExecutionContext.java,42,,"        parentContext.setAttribute(""param1"", ""1"");"
121377,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestHttpExecutionContext.java,43,,"        parentContext.setAttribute(""param2"", ""2"");"
121378,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestHttpExecutionContext.java,44,,"        currentContext.setAttribute(""param3"", ""3"");"
121379,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestRequestHandlerRegistry.java,45,,"        handlerRegistry = new RequestHandlerRegistry<>(""myhost"", UriPatternMatcher::new);"
121380,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestRequestHandlerRegistry.java,51,,"        handlerRegistry.register(null, ""/test*"", ""stuff"");"
121381,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestRequestHandlerRegistry.java,51,,"        handlerRegistry.register(null, ""/test*"", ""stuff"");"
121382,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestRequestHandlerRegistry.java,54,,"        Assert.assertEquals(""stuff"", handlerRegistry.resolve(new BasicHttpRequest(Method.GET, ""/test""), context));"
121383,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestRequestHandlerRegistry.java,55,,"        Assert.assertEquals(""stuff"", handlerRegistry.resolve(new BasicHttpRequest(Method.GET, ""/testabc""), context));"
121384,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestStandardInterceptors.java,62,,"        Assert.assertEquals(""keep-alive"", header.getValue());"
121385,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestStandardInterceptors.java,79,,"        final Header myheader = new BasicHeader(HttpHeaders.CONNECTION, ""close"");"
121386,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestStandardInterceptors.java,111,,"        request1.addHeader(new BasicHeader(HttpHeaders.TRANSFER_ENCODING, ""chunked""));"
121387,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestStandardInterceptors.java,138,,"        request.setEntity(new StringEntity(""whatever"", StandardCharsets.US_ASCII));"
121388,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestStandardInterceptors.java,354,,"        request.setAuthority(new URIAuthority(""somehost"", 8080));"
121389,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestUriPatternMatcher.java,43,,"        matcher.register(""/h1"", h1);"
121390,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestUriPatternOrderedMatcher.java,43,,"        matcher.register(""/h1"", h1);"
121391,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestUriPatternOrderedMatcher.java,178,,"        matcher.register(""exact"", h1);"
121392,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestUriRegexMatcher.java,42,,"        matcher.register(""/h1"", h1);"
121393,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/support/TestBasicMessageBuilders.java,116,,"        Assert.assertEquals(""GET"", builder.getMethod());"
121394,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/support/TestBasicMessageBuilders.java,134,,"        builder.setUri(URI.create(""http://host:1234/blah?param=value""));"
121395,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/http/support/TestBasicMessageBuilders.java,137,,"        Assert.assertEquals(new URIAuthority(""host"", 1234), builder.getAuthority());"
121396,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/net/TestHost.java,47,,"        final Host host1 = new Host(""somehost"", 8080);"
121397,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/net/TestHost.java,119,,"        Assert.assertEquals(""::1"", host.getHostName());"
121398,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/net/TestURIAuthority.java,49,,"        final URIAuthority host1 = new URIAuthority(""somehost"");"
121399,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/net/TestURIAuthority.java,66,,"        final URIAuthority host5 = new URIAuthority(""SomeHost"", 80);"
121400,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/net/TestURIAuthority.java,67,,"        final URIAuthority host6 = new URIAuthority(""user"", ""SomeHost"", 80);"
121401,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/net/TestURIAuthority.java,150,,"                CoreMatchers.equalTo(new URIAuthority(""someuser"", ""somehost"", -1)));"
121402,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/net/TestURIAuthority.java,198,,"        Assert.assertEquals(new URIAuthority(""::1"", 8080), URIAuthority.create(""[::1]:8080""));"
121403,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/net/TestURIBuilder.java,58,,"        MatcherAssert.assertThat(parsePath(""/this/that""), CoreMatchers.equalTo(Arrays.asList(""this"", ""that"")));"
121404,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/net/TestURIBuilder.java,58,,"        MatcherAssert.assertThat(parsePath(""/this/that""), CoreMatchers.equalTo(Arrays.asList(""this"", ""that"")));"
121405,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/net/TestURIBuilder.java,95,,"        MatcherAssert.assertThat(parseQuery(""Name0""),"
121406,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/net/TestURIBuilder.java,104,,"                NameValuePairListMatcher.equalsTo(new BasicNameValuePair(""Name4"", ""Value 4!"")));"
121407,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/net/TestURIBuilder.java,111,,"                        new BasicNameValuePair(""Name5"", ""aaa""),"
121408,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/net/TestURIBuilder.java,115,,"                        new BasicNameValuePair(""Name7"", ""aaa""),"
121409,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/net/TestURIBuilder.java,169,,"        final URI uri = new URI(""http"", ""stuff"", ""localhost"", 80, ""/some stuff"", ""param=stuff"", ""fragment"");"
121410,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/net/TestURIBuilder.java,169,,"        final URI uri = new URI(""http"", ""stuff"", ""localhost"", 80, ""/some stuff"", ""param=stuff"", ""fragment"");"
121411,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/net/TestURIBuilder.java,169,,"        final URI uri = new URI(""http"", ""stuff"", ""localhost"", 80, ""/some stuff"", ""param=stuff"", ""fragment"");"
121412,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/net/TestURIBuilder.java,177,,"        final URI uri = new URI(""http://stuff@localhost:80/stuff?param=stuff#fragment"");"
121413,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/net/TestURIBuilder.java,228,,"       final String scheme=""https"";"
121414,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/net/TestURIBuilder.java,294,,"        final URI uri = new URI(""http"", null, ""localhost"", 80, ""/"", ""param=stuff&blah&blah"", null);"
121415,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/net/TestURIBuilder.java,301,,"        Assert.assertEquals(""stuff"", uribuilder.getFirstQueryParam(""param"").getValue());"
121416,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/net/TestURIBuilder.java,302,,"        Assert.assertNull(uribuilder.getFirstQueryParam(""blah"").getValue());"
121417,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/net/TestURIBuilder.java,328,,"        final URIBuilder uribuilder = new URIBuilder(uri).setParameter(""param"", ""some other stuff"")"
121418,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/net/TestURIBuilder.java,388,,"        final URI uri2 = new URIBuilder(""https://somehost.com/stuff"")"
121419,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/net/TestURIBuilder.java,512,,"        final URI uri = new URIBuilder(""./mypath"").setHost(""somehost"").setScheme(""http"").build();"
121420,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/net/TestURIBuilder.java,580,,"                .setScheme(""file"")"
121421,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/net/TestURIBuilder.java,591,,"            .setPathSegments(Arrays.asList(""api"", ""products""))"
121422,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/net/TestURIBuilder.java,591,,"            .setPathSegments(Arrays.asList(""api"", ""products""))"
121423,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/net/TestURIBuilder.java,631,,"            .appendPath(""idA"")"
121424,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/net/TestURIBuilder.java,672,,"            .setHost(""myhost"")"
121425,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/net/TestURIBuilder.java,795,,"               .setSchemeSpecificPart(""my@email.server"", new BasicNameValuePair(""subject"", ""mail subject""));"
121426,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/net/TestURIBuilder.java,849,,"        Assert.assertEquals(""::1"", builder.getHost());"
121427,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/net/TestURIBuilder.java,851,,"        Assert.assertEquals(""/path"", builder.getPath());"
121428,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/net/TestWWWFormCodec.java,53,,"        MatcherAssert.assertThat(parse(""Name0""),"
121429,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/net/TestWWWFormCodec.java,62,,"                NameValuePairListMatcher.equalsTo(new BasicNameValuePair(""Name4"", ""Value 4!"")));"
121430,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/net/TestWWWFormCodec.java,69,,"                        new BasicNameValuePair(""Name5"", ""aaa""),"
121431,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/net/TestWWWFormCodec.java,73,,"                        new BasicNameValuePair(""Name7"", ""aaa""),"
121432,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/pool/TestLaxConnPool.java,53,,"        final PoolStats stats = pool.getStats(""somehost"");"
121433,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/pool/TestLaxConnPool.java,76,,"        final Future<PoolEntry<String, HttpConnection>> future3 = pool.lease(""otherhost"", null);"
121434,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/pool/TestPoolEntry.java,56,,"                ""route1"", TimeValue.of(10L, TimeUnit.MILLISECONDS), currentTimeSupplier);"
121435,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/pool/TestStrictConnPool.java,57,,"        final PoolStats stats = pool.getStats(""somehost"");"
121436,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/pool/TestStrictConnPool.java,82,,"        final Future<PoolEntry<String, HttpConnection>> future3 = pool.lease(""otherhost"", null);"
121437,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/pool/TestStrictConnPool.java,316,,"        entry1.updateState(""some-stuff"");"
121438,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/reactor/TestAbstractIOSessionPool.java,86,,"        final Future<IOSession> future1 = impl.getSession(""somehost"", Timeout.ofSeconds(123L), null);"
121439,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/ssl/TestSSLContextBuilder.java,102,,"                .setProtocol(""TLS"")"
121440,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/ssl/TestSSLContextBuilder.java,148,,"        final URL resource1 = getResource(""/test-keypasswd.p12"");"
121441,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/ssl/TestSSLContextBuilder.java,149,,"        final String storePassword = ""nopassword"";"
121442,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/ssl/TestSSLContextBuilder.java,183,,"        final URL resource1 = getResource(""/test-server.p12"");"
121443,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/ssl/TestSSLContextBuilder.java,334,,"            clientSocket.connect(new InetSocketAddress(""localhost"", localPort), TIMEOUT.toMillisecondsIntBound());"
121444,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/ssl/TestSSLContextBuilder.java,454,,"        final URL resource2 = getResource(""/test-client.p12"");"
121445,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/ssl/TestSSLContextBuilder.java,648,,"        Assert.assertTrue(supportedServerProtocols.contains(""TLSv1""));"
121446,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/ssl/TestSSLContextBuilder.java,663,,"            Assert.assertTrue(supportedClientProtocols.contains(""SSLv3""));"
121447,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/util/TestArgs.java,61,,"        Assert.assertSame(stuff, Args.notNull(stuff, ""Stuff""));"
121448,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/util/TestArgs.java,126,,"        Assert.assertEquals(1, Args.positive(1, ""Number""));"
121449,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/util/TestAsserts.java,52,,"                Asserts.notNull(null, ""Stuff""));"
121450,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/util/TestByteArrayBuffer.java,115,,"        Assert.assertFalse(""The input buffer should be drained"", tmp.hasRemaining());"
121451,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/util/TestCharArrayBuffer.java,113,,"        buffer.append(""stuff"");"
121452,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/util/TestLangUtils.java,68,,"        Assert.assertFalse(LangUtils.equals(null, ""abc""));"
121453,./TargetProjects/httpcomponents-core/httpcore5/src/test/java/org/apache/hc/core5/util/TestTimeValue.java,271,,"        Assert.assertEquals(""9223372036854775807 SECONDS"", TimeValue.ofSeconds(Long.MAX_VALUE).toString());"
121454,./TargetProjects/iceberg/api/src/main/java/org/apache/iceberg/expressions/Expressions.java,80,,"  @SuppressWarnings(""unchecked"")"
121455,./TargetProjects/iceberg/api/src/main/java/org/apache/iceberg/expressions/Literals.java,58,,"  @SuppressWarnings(""unchecked"")"
121456,./TargetProjects/iceberg/api/src/main/java/org/apache/iceberg/expressions/StrictMetricsEvaluator.java,131,,"          ""Cannot filter by nested column: %s"", schema.findField(id));"
121457,./TargetProjects/iceberg/api/src/main/java/org/apache/iceberg/transforms/Transforms.java,95,,"  @SuppressWarnings(""unchecked"")"
121458,./TargetProjects/iceberg/api/src/main/java/org/apache/iceberg/transforms/Truncate.java,155,,"      return ""truncate["" + width + ""]"";"
121459,./TargetProjects/iceberg/api/src/main/java/org/apache/iceberg/types/Comparators.java,60,,"  @SuppressWarnings(""unchecked"")"
121460,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/PartitionSpecTestBase.java,32,,"      Types.NestedField.required(6, ""dec"", Types.DecimalType.of(9, 2)),"
121461,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/TestHelpers.java,51,,"  @SuppressWarnings(""unchecked"")"
121462,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/TestPartitionSpecValidation.java,31,,"      NestedField.required(3, ""another_ts"", Types.TimestampType.withZone()),"
121463,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/TestPartitionSpecValidation.java,33,,"      NestedField.required(5, ""another_d"", Types.TimestampType.withZone()),"
121464,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/TestPartitionSpecValidation.java,40,,"        IllegalArgumentException.class, ""Cannot use partition name more than once"","
121465,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/TestPartitionSpecValidation.java,43,,"        IllegalArgumentException.class, ""Cannot add redundant partition"","
121466,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/TestPartitionSpecValidation.java,155,,"        .truncate(""s"", 1, ""custom_truncate"")"
121467,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/TestPartitionSpecValidation.java,162,,"    AssertHelpers.assertThrows(""Should not allow target column name that exists in schema"","
121468,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/TestPartitionSpecValidation.java,164,,"        ""Cannot create partition from name that exists in schema: another_ts"","
121469,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/TestPartitionSpecValidation.java,200,,"    AssertHelpers.assertThrows(""Should detect missing source column"","
121470,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/TestPartitionSpecValidation.java,201,,"        IllegalArgumentException.class, ""Cannot find source column"","
121471,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/TestPartitionSpecValidation.java,202,,"        () -> PartitionSpec.builderFor(SCHEMA).year(""missing"").build());"
121472,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/catalog/TestTableIdentifier.java,30,,"    TableIdentifier oneLevelIdentifier = TableIdentifier.parse(""tbl"");"
121473,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestEvaluator.java,75,,"    Evaluator structEvaluator = new Evaluator(STRUCT, lessThan(""s1.s2.s3.s4.i"", 7));"
121474,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestEvaluator.java,239,,"    Assert.assertFalse(""3 is not null"", evaluator.eval(TestHelpers.Row.of(1, 2, 3)));"
121475,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestEvaluator.java,267,,"    Assert.assertTrue(""NaN is NaN"", evaluator.eval(TestHelpers.Row.of(1, Double.NaN, 3)));"
121476,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestEvaluator.java,354,,"    Assert.assertFalse(""not(7 == 7) => false"", evaluator.eval(TestHelpers.Row.of(7)));"
121477,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestEvaluator.java,355,,"    Assert.assertTrue(""not(8 == 7) => false"", evaluator.eval(TestHelpers.Row.of(8)));"
121478,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestEvaluator.java,401,,"    Evaluator evaluator = new Evaluator(struct, equal(""s"", ""abc""));"
121479,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestEvaluator.java,412,,"    Assert.assertEquals(3, in(""s"", ""abc"", ""abd"", ""abc"").literals().size());"
121480,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestEvaluator.java,463,,"        ""Throw exception if value is null"","
121481,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestEvaluator.java,465,,"        ""Cannot create expression literal from null"","
121482,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestEvaluator.java,489,,"        ""Invalid value for conversion to type int"","
121483,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestExpressionHelpers.java,143,,"    Assert.assertEquals(""Should produce the correct expression string"","
121484,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestExpressionSerialization.java,45,,"        Expressions.equal(""col"", ""data""),"
121485,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestInclusiveManifestEvaluator.java,57,,"      optional(4, ""all_nulls_missing_nan"", Types.StringType.get()),"
121486,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestInclusiveManifestEvaluator.java,58,,"      optional(5, ""some_nulls"", Types.StringType.get()),"
121487,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestInclusiveManifestEvaluator.java,59,,"      optional(6, ""no_nulls"", Types.StringType.get()),"
121488,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestInclusiveManifestEvaluator.java,60,,"      optional(7, ""float"", Types.FloatType.get()),"
121489,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestInclusiveManifestEvaluator.java,61,,"      optional(8, ""all_nulls_double"", Types.DoubleType.get()),"
121490,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestInclusiveManifestEvaluator.java,62,,"      optional(9, ""all_nulls_no_nans"", Types.FloatType.get()),"
121491,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestInclusiveManifestEvaluator.java,63,,"      optional(10, ""all_nans"", Types.DoubleType.get()),"
121492,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestInclusiveManifestEvaluator.java,64,,"      optional(11, ""both_nan_and_null"", Types.FloatType.get()),"
121493,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestInclusiveManifestEvaluator.java,65,,"      optional(12, ""no_nan_or_null"", Types.DoubleType.get()),"
121494,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestInclusiveManifestEvaluator.java,66,,"      optional(13, ""all_nulls_missing_nan_float"", Types.FloatType.get())"
121495,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestInclusiveManifestEvaluator.java,262,,"    Assert.assertTrue(""Should read: one possible id"", shouldRead);"
121496,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestInclusiveManifestEvaluator.java,324,,"    Assert.assertTrue(""Should read: id equal to lower bound"", shouldRead);"
121497,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestInclusiveManifestEvaluator.java,327,,"    Assert.assertTrue(""Should read: id between lower and upper bounds"", shouldRead);"
121498,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestInclusiveManifestEvaluator.java,330,,"    Assert.assertTrue(""Should read: id equal to upper bound"", shouldRead);"
121499,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestInclusiveManifestEvaluator.java,342,,"    Assert.assertTrue(""Should read: id below lower bound"", shouldRead);"
121500,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestInclusiveManifestEvaluator.java,357,,"    Assert.assertTrue(""Should read: id above upper bound"", shouldRead);"
121501,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestInclusiveManifestEvaluator.java,421,,"    Assert.assertTrue(""Should read: range matches"", shouldRead);"
121502,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestInclusiveManifestEvaluator.java,473,,"        in(""all_nulls_missing_nan"", ""abc"", ""def""), SPEC, true).eval(FILE);"
121503,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestInclusiveManifestEvaluator.java,473,,"        in(""all_nulls_missing_nan"", ""abc"", ""def""), SPEC, true).eval(FILE);"
121504,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestInclusiveMetricsEvaluator.java,61,,"      optional(2, ""no_stats"", Types.IntegerType.get()),"
121505,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestInclusiveMetricsEvaluator.java,62,,"      required(3, ""required"", Types.StringType.get()),"
121506,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestInclusiveMetricsEvaluator.java,63,,"      optional(4, ""all_nulls"", Types.StringType.get()),"
121507,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestInclusiveMetricsEvaluator.java,64,,"      optional(5, ""some_nulls"", Types.StringType.get()),"
121508,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestInclusiveMetricsEvaluator.java,65,,"      optional(6, ""no_nulls"", Types.StringType.get()),"
121509,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestInclusiveMetricsEvaluator.java,67,,"      optional(8, ""some_nans"", Types.FloatType.get()),"
121510,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestInclusiveMetricsEvaluator.java,154,,"      ImmutableMap.of(3, toByteBuffer(StringType.get(), ""abc"")),"
121511,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestInclusiveMetricsEvaluator.java,343,,"    Assert.assertTrue(""Should read: one possible id"", shouldRead);"
121512,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestInclusiveMetricsEvaluator.java,403,,"    Assert.assertTrue(""Should read: id equal to lower bound"", shouldRead);"
121513,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestInclusiveMetricsEvaluator.java,406,,"    Assert.assertTrue(""Should read: id between lower and upper bounds"", shouldRead);"
121514,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestInclusiveMetricsEvaluator.java,409,,"    Assert.assertTrue(""Should read: id equal to upper bound"", shouldRead);"
121515,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestInclusiveMetricsEvaluator.java,421,,"    Assert.assertTrue(""Should read: id below lower bound"", shouldRead);"
121516,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestInclusiveMetricsEvaluator.java,436,,"    Assert.assertTrue(""Should read: id above upper bound"", shouldRead);"
121517,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestInclusiveMetricsEvaluator.java,503,,"    Assert.assertTrue(""Should read: range matches"", shouldRead);"
121518,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestInclusiveMetricsEvaluator.java,521,,"    Assert.assertFalse(""Should not read: range doesn't match"", shouldRead);"
121519,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestInclusiveMetricsEvaluator.java,574,,"        in(""all_nulls"", ""abc"", ""def"")).eval(FILE);"
121520,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestMetricsEvaluatorsNaNHandling.java,43,,"      required(1, ""all_nan"", Types.DoubleType.get()),"
121521,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestMetricsEvaluatorsNaNHandling.java,44,,"      required(2, ""max_nan"", Types.DoubleType.get()),"
121522,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestMetricsEvaluatorsNaNHandling.java,45,,"      optional(3, ""min_max_nan"", Types.FloatType.get()),"
121523,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestMetricsEvaluatorsNaNHandling.java,46,,"      required(4, ""all_nan_null_bounds"", Types.DoubleType.get()),"
121524,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestMetricsEvaluatorsNaNHandling.java,47,,"      optional(5, ""some_nan_correct_bounds"", Types.FloatType.get())"
121525,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestMetricsEvaluatorsNaNHandling.java,98,,"      Assert.assertFalse(""Should not match: all nan column doesn't contain number"", shouldRead);"
121526,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestMetricsEvaluatorsNaNHandling.java,101,,"      Assert.assertFalse(""Should not match: 1 is smaller than lower bound"", shouldRead);"
121527,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestMetricsEvaluatorsNaNHandling.java,107,,"      Assert.assertTrue(""Should match: no visibility"", shouldRead);"
121528,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestMetricsEvaluatorsNaNHandling.java,260,,"      Assert.assertFalse(""Should not match: no visibility"", shouldRead);"
121529,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestMetricsEvaluatorsNaNHandling.java,297,,"    Assert.assertTrue(""Should match: all nan column doesn't contain number"", shouldRead);"
121530,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestNumericLiteralConversions.java,34,,"    Assert.assertEquals(""Value should match"", 34L, (long) longLit.value());"
121531,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestNumericLiteralConversions.java,168,,"    Assert.assertEquals(""Dates should be equal"", lit.to(Types.DateType.get()), new Literals.DateLiteral(0));"
121532,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestPredicateBinding.java,56,,"  @SuppressWarnings(""unchecked"")"
121533,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestPredicateBinding.java,69,,"    Assert.assertEquals(""Should reference correct field ID"", 11, bound.ref().fieldId());"
121534,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestPredicateBinding.java,71,,"    Assert.assertTrue(""Should be a literal predicate"", bound.isLiteralPredicate());"
121535,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestPredicateBinding.java,72,,"    Assert.assertEquals(""Should not alter literal value"","
121536,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestPredicateBinding.java,117,,"      UnboundPredicate<String> unbound = new UnboundPredicate<>(op, ref(""d""), ""12.40"");"
121537,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestPredicateBinding.java,195,,"    Assert.assertEquals(""Should translate bound to Integer"","
121538,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestPredicateBinding.java,267,,"    Assert.assertEquals(""Should translate bound to Float"","
121539,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestPredicateBinding.java,299,,"    Assert.assertEquals(""Should use the same operation"", IS_NULL, bound.op());"
121540,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestPredicateBinding.java,300,,"    Assert.assertEquals(""Should use the correct field"", 19, bound.ref().fieldId());"
121541,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestPredicateBinding.java,301,,"    Assert.assertTrue(""Should be a unary predicate"", bound.isUnaryPredicate());"
121542,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestPredicateBinding.java,407,,"    UnboundPredicate<String> unbound = Expressions.in(""d"", ""12.40"", ""1.23"", ""99.99"", ""1.23"");"
121543,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestPredicateBinding.java,407,,"    UnboundPredicate<String> unbound = Expressions.in(""d"", ""12.40"", ""1.23"", ""99.99"", ""1.23"");"
121544,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestStrictMetricsEvaluator.java,57,,"      optional(2, ""no_stats"", IntegerType.get()),"
121545,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestStrictMetricsEvaluator.java,59,,"      optional(4, ""all_nulls"", StringType.get()),"
121546,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestStrictMetricsEvaluator.java,60,,"      optional(5, ""some_nulls"", StringType.get()),"
121547,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestStrictMetricsEvaluator.java,61,,"      optional(6, ""no_nulls"", StringType.get()),"
121548,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestStrictMetricsEvaluator.java,62,,"      required(7, ""always_5"", IntegerType.get()),"
121549,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestStrictMetricsEvaluator.java,63,,"      optional(8, ""all_nans"", Types.DoubleType.get()),"
121550,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestStrictMetricsEvaluator.java,131,,"      ImmutableMap.of(5, toByteBuffer(StringType.get(), ""bbb"")),"
121551,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestStrictMetricsEvaluator.java,348,,"    Assert.assertTrue(""Should match: all values in range"", shouldRead);"
121552,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestStrictMetricsEvaluator.java,493,,"        in(""all_nulls"", ""abc"", ""def"")).eval(FILE);"
121553,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestStrictMetricsEvaluator.java,493,,"        in(""all_nulls"", ""abc"", ""def"")).eval(FILE);"
121554,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/expressions/TestStringLiteralConversions.java,111,,"    Assert.assertEquals(""Timestamp without zone should match UTC"","
121555,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/io/TestCloseableIterable.java,40,,"    Assert.assertFalse(""Iterable should not be closed"", iterable.closed());"
121556,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestBucketingProjection.java,111,,"    Schema schema = new Schema(optional(1, ""value"", Types.IntegerType.get()));"
121557,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestBucketingProjection.java,123,,"        Expression.Operation.NOT_IN, ""[6, 7, 8]"");"
121558,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestBucketingProjection.java,230,,"    String value = ""abcdefg"";"
121559,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestBucketingProjection.java,242,,"    assertProjectionStrict(spec, notIn(""value"", value, value + ""abc""),"
121560,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestBucketingProjection.java,268,,"    ByteBuffer value = ByteBuffer.wrap(""abcdefg"".getBytes(""UTF-8""));"
121561,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestBucketingProjection.java,282,,"        Expression.Operation.NOT_IN, ""[4, 6]"");"
121562,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestDates.java,58,,"    Assert.assertEquals(""Should produce the correct Human string"","
121563,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestDatesProjection.java,48,,"  private static final Schema SCHEMA = new Schema(optional(1, ""date"", TYPE));"
121564,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestDatesProjection.java,111,,"    Integer date = (Integer) Literal.of(""1970-01-01"").to(TYPE).value();"
121565,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestDatesProjection.java,114,,"    assertProjectionStrict(spec, lessThan(""date"", date), Expression.Operation.LT, ""1970-01"");"
121566,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestDatesProjection.java,121,,"    Integer anotherDate = (Integer) Literal.of(""1969-12-31"").to(TYPE).value();"
121567,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestDatesProjection.java,123,,"        Expression.Operation.NOT_IN, ""[1969-12, 1970-01]"");"
121568,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestDatesProjection.java,147,,"    Integer date = (Integer) Literal.of(""2017-01-01"").to(TYPE).value();"
121569,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestDatesProjection.java,150,,"    assertProjectionStrict(spec, lessThan(""date"", date), Expression.Operation.LT, ""2017-01"");"
121570,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestDatesProjection.java,159,,"        Expression.Operation.NOT_IN, ""[2017-01, 2017-12]"");"
121571,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestDatesProjection.java,165,,"    Integer date = (Integer) Literal.of(""1969-01-01"").to(TYPE).value();"
121572,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestDatesProjection.java,168,,"    assertProjectionStrict(spec, lessThan(""date"", date), Expression.Operation.LT, ""1969-01"");"
121573,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestDatesProjection.java,183,,"    Integer date = (Integer) Literal.of(""2017-12-31"").to(TYPE).value();"
121574,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestDatesProjection.java,186,,"    assertProjectionStrict(spec, lessThan(""date"", date), Expression.Operation.LT, ""2017-12"");"
121575,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestDatesProjection.java,299,,"    assertProjectionStrict(spec, greaterThanOrEqual(""date"", date), Expression.Operation.GT, ""2016-12-31"");"
121576,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestDatesProjection.java,311,,"    Integer date = (Integer) Literal.of(""1969-12-30"").to(TYPE).value();"
121577,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestDatesProjection.java,370,,"    assertProjectionStrict(spec, lessThan(""date"", date), Expression.Operation.LT, ""2017"");"
121578,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestDatesProjection.java,379,,"        Expression.Operation.NOT_IN, ""[2016, 2017]"");"
121579,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestDatesProjection.java,388,,"    assertProjectionStrict(spec, lessThan(""date"", date), Expression.Operation.LT, ""1970"");"
121580,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestDatesProjection.java,397,,"        Expression.Operation.NOT_IN, ""[1969, 1970]"");"
121581,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestProjection.java,85,,"      Assert.assertEquals(""Field name should match partition struct field"","
121582,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestProjection.java,87,,"      Assert.assertEquals(""Operation should match"", bound.op(), projected.op());"
121583,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestProjection.java,90,,"        Assert.assertEquals(""Literal should be equal"","
121584,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestProjection.java,93,,"        Assert.assertNull(""Literal should be null"", projected.literal());"
121585,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestProjection.java,251,,"        required(4, ""dateint"", Types.IntegerType.get()));"
121586,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestProjection.java,282,,"        required(1, ""timestamp1"", Types.TimestampType.withoutZone()),"
121587,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestProjection.java,283,,"        optional(2, ""timestamp2"", Types.TimestampType.withoutZone()),"
121588,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestProjection.java,284,,"        optional(3, ""timestamp3"", Types.TimestampType.withoutZone()),"
121589,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestProjection.java,285,,"        optional(4, ""timestamp4"", Types.TimestampType.withoutZone()),"
121590,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestProjection.java,286,,"        optional(5, ""date1"", Types.DateType.get()),"
121591,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestProjection.java,287,,"        optional(6, ""date2"", Types.DateType.get()),"
121592,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestProjection.java,288,,"        optional(7, ""date3"", Types.DateType.get()),"
121593,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestProjection.java,289,,"        optional(8, ""long"", Types.LongType.get()),"
121594,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestProjection.java,290,,"        optional(9, ""string"", Types.StringType.get())"
121595,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestResiduals.java,55,,"        Types.NestedField.optional(50, ""dateint"", Types.IntegerType.get()),"
121596,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestResiduals.java,56,,"        Types.NestedField.optional(51, ""hour"", Types.IntegerType.get())"
121597,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestResiduals.java,73,,"    Assert.assertEquals(""Residual should be hour < 12"", LT, unbound.op());"
121598,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestResiduals.java,80,,"    Assert.assertEquals(""Residual should be hour > 11"", GT, unbound.op());"
121599,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestResiduals.java,86,,"    Assert.assertEquals(""Residual should be alwaysTrue"", alwaysTrue(), residual);"
121600,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestResiduals.java,90,,"    Assert.assertEquals(""Residual should be alwaysFalse"", alwaysFalse(), residual);"
121601,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestResiduals.java,245,,"        Types.NestedField.optional(50, ""double"", Types.DoubleType.get()),"
121602,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestResiduals.java,246,,"        Types.NestedField.optional(51, ""float"", Types.FloatType.get())"
121603,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestStartsWith.java,52,,"    assertProjectionInclusive(spec, startsWith(COLUMN, ""abab""), ""abab"", Expression.Operation.STARTS_WITH);"
121604,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestTimestamps.java,63,,"    Assert.assertEquals(""Should produce the correct Human string"","
121605,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestTimestamps.java,171,,"    Assert.assertEquals(""Should produce \""null\"" for null"","
121606,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestTimestamps.java,172,,"        ""null"", Transforms.year(type).toHumanString(null));"
121607,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestTimestampsProjection.java,48,,"  private static final Schema SCHEMA = new Schema(optional(1, ""timestamp"", TYPE));"
121608,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestTimestampsProjection.java,111,,"    Long date = (long) Literal.of(""1970-01-01T00:00:00.00000"").to(TYPE).value();"
121609,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestTimestampsProjection.java,114,,"    assertProjectionStrict(spec, lessThan(""timestamp"", date), Expression.Operation.LT, ""1970-01-01"");"
121610,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestTimestampsProjection.java,147,,"    Long date = (long) Literal.of(""2017-12-01T00:00:00.00000"").to(TYPE).value();"
121611,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestTimestampsProjection.java,150,,"    assertProjectionStrict(spec, lessThan(""timestamp"", date), Expression.Operation.LT, ""2017-12"");"
121612,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestTimestampsProjection.java,157,,"    Long anotherDate = (long) Literal.of(""2017-12-02T00:00:00.00000"").to(TYPE).value();"
121613,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestTimestampsProjection.java,165,,"    Long date = (long) Literal.of(""1969-01-01T00:00:00.00000"").to(TYPE).value();"
121614,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestTimestampsProjection.java,168,,"    assertProjectionStrict(spec, lessThan(""timestamp"", date), Expression.Operation.LT, ""1969-01"");"
121615,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestTimestampsProjection.java,201,,"    Long date = (long) Literal.of(""1969-12-31T23:59:59.999999"").to(TYPE).value();"
121616,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestTimestampsProjection.java,205,,"    assertProjectionStrict(spec, lessThanOrEqual(""timestamp"", date), Expression.Operation.LT, ""1970-01"");"
121617,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestTimestampsProjection.java,294,,"    assertProjectionStrict(spec, lessThan(""timestamp"", date), Expression.Operation.LT, ""2017-12-01"");"
121618,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestTimestampsProjection.java,312,,"    assertProjectionStrict(spec, lessThan(""timestamp"", date), Expression.Operation.LT, ""1969-01-01"");"
121619,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestTimestampsProjection.java,352,,"    assertProjectionStrict(spec, notEqual(""timestamp"", date), Expression.Operation.NOT_IN, ""[1969-12-31, 1970-01-01]"");"
121620,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestTimestampsProjection.java,438,,"    assertProjectionStrict(spec, lessThan(""timestamp"", date), Expression.Operation.LT, ""2017"");"
121621,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestTimestampsProjection.java,445,,"    Long anotherDate = (long) Literal.of(""2016-12-02T00:00:00.00000"").to(TYPE).value();"
121622,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestTimestampsProjection.java,447,,"        Expression.Operation.NOT_IN, ""[2016, 2017]"");"
121623,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestTimestampsProjection.java,463,,"    Long anotherDate = (long) Literal.of(""2016-12-31T23:59:59.999999"").to(TYPE).value();"
121624,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestTimestampsProjection.java,510,,"    assertProjectionStrict(spec, lessThan(""timestamp"", date), Expression.Operation.LT, ""2017-12-01-10"");"
121625,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestTruncate.java,77,,"        ""abc"", trunc.apply(""abc""));"
121626,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestTruncate.java,84,,"        ByteBuffer.wrap(""abcd"".getBytes(""UTF-8"")),"
121627,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestTruncatesProjection.java,112,,"    Schema schema = new Schema(optional(1, ""value"", Types.IntegerType.get()));"
121628,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestTruncatesProjection.java,115,,"    assertProjectionStrict(spec, lessThan(""value"", value), Expression.Operation.LT, ""100"");"
121629,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestTruncatesProjection.java,123,,"        Expression.Operation.NOT_IN, ""[90, 100, 100]"");"
121630,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestTruncatesProjection.java,141,,"        Expression.Operation.NOT_IN, ""[90, 90, 100]"");"
121631,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestTruncatesProjection.java,256,,"    BigDecimal value = (BigDecimal) Literal.of(""100.00"").to(type).value();"
121632,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestTruncatesProjection.java,263,,"    assertProjectionStrict(spec, greaterThanOrEqual(""value"", value), Expression.Operation.GT, ""99.90"");"
121633,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestTruncatesProjection.java,335,,"    String value = ""abcdefg"";"
121634,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestTruncatesProjection.java,339,,"    assertProjectionStrict(spec, lessThan(""value"", value), Expression.Operation.LT, ""abcde"");"
121635,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestTruncatesProjection.java,346,,"    assertProjectionStrict(spec, notIn(""value"", value, value + ""abc""),"
121636,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestTruncatesProjection.java,371,,"    ByteBuffer value = ByteBuffer.wrap(""abcdefg"".getBytes(""UTF-8""));"
121637,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestTruncatesResiduals.java,83,,"    Schema schema = new Schema(Types.NestedField.optional(50, ""value"", Types.IntegerType.get()));"
121638,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/transforms/TestTruncatesResiduals.java,149,,"    assertResidualValue(spec, lessThan(""value"", ""bcd""), ""ab"", Expression.Operation.TRUE);"
121639,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/types/TestCharSeqComparator.java,38,,"    String s1 = ""abc"";"
121640,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/types/TestCharSeqComparator.java,58,,"    Assert.assertTrue(""When one string is a substring of the other, the longer is greater"","
121641,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/types/TestCharSeqComparator.java,79,,"    Assert.assertTrue(""First difference takes precedence over length"","
121642,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/types/TestReadabilityChecks.java,55,,"      Schema fromSchema = new Schema(required(1, ""from_field"", from));"
121643,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/types/TestReadabilityChecks.java,58,,"            new Schema(required(1, ""to_field"", to)), fromSchema);"
121644,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/types/TestReadabilityChecks.java,63,,"          Assert.assertEquals(""Should produce 1 error message"", 1, errors.size());"
121645,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/types/TestReadabilityChecks.java,77,,"    Schema mapSchema = new Schema(required(1, ""map_field"","
121646,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/types/TestReadabilityChecks.java,89,,"    Schema listSchema = new Schema(required(1, ""list_field"", Types.ListType.ofRequired(2, from)));"
121647,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/types/TestReadabilityChecks.java,134,,"    Schema write = new Schema(required(0, ""nested"", Types.StructType.of("
121648,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/types/TestReadabilityChecks.java,174,,"    Assert.assertEquals(""Should produce no error messages"", 0, errors.size());"
121649,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/types/TestReadabilityChecks.java,189,,"    Assert.assertTrue(""Should complain about incompatible types"","
121650,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/types/TestReadabilityChecks.java,338,,"            required(1, ""field_a"", Types.IntegerType.get()),"
121651,./TargetProjects/iceberg/api/src/test/java/org/apache/iceberg/types/TestReadabilityChecks.java,339,,"            required(2, ""field_b"", Types.IntegerType.get())"
121652,./TargetProjects/iceberg/arrow/src/test/java/org/apache/iceberg/arrow/vectorized/ArrowReaderTest.java,101,,"          ""timestamp"","
121653,./TargetProjects/iceberg/arrow/src/test/java/org/apache/iceberg/arrow/vectorized/ArrowReaderTest.java,102,,"          ""timestamp_nullable"","
121654,./TargetProjects/iceberg/arrow/src/test/java/org/apache/iceberg/arrow/vectorized/ArrowReaderTest.java,103,,"          ""boolean"","
121655,./TargetProjects/iceberg/arrow/src/test/java/org/apache/iceberg/arrow/vectorized/ArrowReaderTest.java,104,,"          ""boolean_nullable"","
121656,./TargetProjects/iceberg/arrow/src/test/java/org/apache/iceberg/arrow/vectorized/ArrowReaderTest.java,105,,"          ""int"","
121657,./TargetProjects/iceberg/arrow/src/test/java/org/apache/iceberg/arrow/vectorized/ArrowReaderTest.java,106,,"          ""int_nullable"","
121658,./TargetProjects/iceberg/arrow/src/test/java/org/apache/iceberg/arrow/vectorized/ArrowReaderTest.java,107,,"          ""long"","
121659,./TargetProjects/iceberg/arrow/src/test/java/org/apache/iceberg/arrow/vectorized/ArrowReaderTest.java,108,,"          ""long_nullable"","
121660,./TargetProjects/iceberg/arrow/src/test/java/org/apache/iceberg/arrow/vectorized/ArrowReaderTest.java,109,,"          ""float"","
121661,./TargetProjects/iceberg/arrow/src/test/java/org/apache/iceberg/arrow/vectorized/ArrowReaderTest.java,110,,"          ""float_nullable"","
121662,./TargetProjects/iceberg/arrow/src/test/java/org/apache/iceberg/arrow/vectorized/ArrowReaderTest.java,111,,"          ""double"","
121663,./TargetProjects/iceberg/arrow/src/test/java/org/apache/iceberg/arrow/vectorized/ArrowReaderTest.java,112,,"          ""double_nullable"","
121664,./TargetProjects/iceberg/arrow/src/test/java/org/apache/iceberg/arrow/vectorized/ArrowReaderTest.java,113,,"          ""timestamp_tz"","
121665,./TargetProjects/iceberg/arrow/src/test/java/org/apache/iceberg/arrow/vectorized/ArrowReaderTest.java,114,,"          ""timestamp_tz_nullable"","
121666,./TargetProjects/iceberg/arrow/src/test/java/org/apache/iceberg/arrow/vectorized/ArrowReaderTest.java,115,,"          ""string"","
121667,./TargetProjects/iceberg/arrow/src/test/java/org/apache/iceberg/arrow/vectorized/ArrowReaderTest.java,116,,"          ""string_nullable"","
121668,./TargetProjects/iceberg/arrow/src/test/java/org/apache/iceberg/arrow/vectorized/ArrowReaderTest.java,117,,"          ""bytes"","
121669,./TargetProjects/iceberg/arrow/src/test/java/org/apache/iceberg/arrow/vectorized/ArrowReaderTest.java,118,,"          ""bytes_nullable"","
121670,./TargetProjects/iceberg/arrow/src/test/java/org/apache/iceberg/arrow/vectorized/ArrowReaderTest.java,119,,"          ""date"","
121671,./TargetProjects/iceberg/arrow/src/test/java/org/apache/iceberg/arrow/vectorized/ArrowReaderTest.java,120,,"          ""date_nullable"","
121672,./TargetProjects/iceberg/arrow/src/test/java/org/apache/iceberg/arrow/vectorized/ArrowReaderTest.java,121,,"          ""int_promotion"","
121673,./TargetProjects/iceberg/arrow/src/test/java/org/apache/iceberg/arrow/vectorized/ArrowReaderTest.java,122,,"          ""time"","
121674,./TargetProjects/iceberg/arrow/src/test/java/org/apache/iceberg/arrow/vectorized/ArrowReaderTest.java,123,,"          ""time_nullable"","
121675,./TargetProjects/iceberg/arrow/src/test/java/org/apache/iceberg/arrow/vectorized/ArrowReaderTest.java,124,,"          ""uuid"","
121676,./TargetProjects/iceberg/arrow/src/test/java/org/apache/iceberg/arrow/vectorized/ArrowReaderTest.java,125,,"          ""uuid_nullable"""
121677,./TargetProjects/iceberg/aws/src/integration/java/org/apache/iceberg/aws/AssumeRoleAwsClientFactoryTest.java,68,,"            ""\""Effect\"":\""Allow\"","" +"
121678,./TargetProjects/iceberg/aws/src/integration/java/org/apache/iceberg/aws/glue/GlueCatalogCommitFailureTest.java,108,,"    Assert.assertTrue(""Current metadata file should still exist"", metadataFileExists(ops.current()));"
121679,./TargetProjects/iceberg/aws/src/integration/java/org/apache/iceberg/aws/glue/GlueCatalogCommitFailureTest.java,126,,"        CommitStateUnknownException.class, ""Datacenter on fire"","
121680,./TargetProjects/iceberg/aws/src/integration/java/org/apache/iceberg/aws/glue/GlueCatalogNamespaceTest.java,101,,"    properties.put(""key"", ""val"");"
121681,./TargetProjects/iceberg/aws/src/integration/java/org/apache/iceberg/aws/glue/GlueCatalogNamespaceTest.java,101,,"    properties.put(""key"", ""val"");"
121682,./TargetProjects/iceberg/aws/src/integration/java/org/apache/iceberg/aws/glue/GlueCatalogNamespaceTest.java,102,,"    properties.put(""key2"", ""val2"");"
121683,./TargetProjects/iceberg/aws/src/integration/java/org/apache/iceberg/aws/glue/GlueCatalogNamespaceTest.java,102,,"    properties.put(""key2"", ""val2"");"
121684,./TargetProjects/iceberg/aws/src/test/java/org/apache/iceberg/aws/glue/GlueCatalogTest.java,123,,"        .database(Database.builder().name(""db1"").build()).build())"
121685,./TargetProjects/iceberg/aws/src/test/java/org/apache/iceberg/aws/glue/GlueCatalogTest.java,134,,"                    ""key"", ""val"","
121686,./TargetProjects/iceberg/aws/src/test/java/org/apache/iceberg/aws/glue/GlueCatalogTest.java,134,,"                    ""key"", ""val"","
121687,./TargetProjects/iceberg/aws/src/test/java/org/apache/iceberg/aws/glue/GlueToIcebergConverterTest.java,49,,"        .name(""name"")"
121688,./TargetProjects/iceberg/aws/src/test/java/org/apache/iceberg/aws/s3/S3RequestUtilTest.java,40,,"    awsProperties.setS3FileIoSseKey(""key"");"
121689,./TargetProjects/iceberg/aws/src/test/java/org/apache/iceberg/aws/s3/S3URITest.java,36,,"    assertEquals(""bucket"", uri1.bucket());"
121690,./TargetProjects/iceberg/common/src/main/java/org/apache/iceberg/common/DynConstructors.java,81,,"    @SuppressWarnings(""unchecked"")"
121691,./TargetProjects/iceberg/core/src/main/java/org/apache/iceberg/BaseTransaction.java,268,,"          .onFailure((file, exc) -> LOG.warn(""Failed to delete uncommitted file: {}"", file, exc))"
121692,./TargetProjects/iceberg/core/src/main/java/org/apache/iceberg/TableMetadataParser.java,65,,"      Preconditions.checkArgument(fileName.contains("".metadata.json""),"
121693,./TargetProjects/iceberg/core/src/main/java/org/apache/iceberg/TableMetadataParser.java,311,,"          ""%s must exist in format v%s"", SCHEMAS, formatVersion);"
121694,./TargetProjects/iceberg/core/src/main/java/org/apache/iceberg/avro/AvroSchemaUtil.java,178,,"    Schema.Field keyField = new Schema.Field(""key"", keySchema, null, (Object) null);"
121695,./TargetProjects/iceberg/core/src/main/java/org/apache/iceberg/avro/AvroSchemaUtil.java,181,,"    Schema.Field valueField = new Schema.Field(""value"", valueSchema, null,"
121696,./TargetProjects/iceberg/core/src/main/java/org/apache/iceberg/avro/PruneColumns.java,136,,"      Integer keyId = AvroSchemaUtil.getFieldId(keyValue.getField(""key""), nameMapping, fieldNames());"
121697,./TargetProjects/iceberg/core/src/main/java/org/apache/iceberg/avro/PruneColumns.java,137,,"      Integer valueId = AvroSchemaUtil.getFieldId(keyValue.getField(""value""), nameMapping, fieldNames());"
121698,./TargetProjects/iceberg/core/src/main/java/org/apache/iceberg/avro/ValueWriters.java,393,,"    @SuppressWarnings(""unchecked"")"
121699,./TargetProjects/iceberg/core/src/main/java/org/apache/iceberg/jdbc/JdbcCatalog.java,174,,"      throw new NoSuchNamespaceException(""Namespace does not exist: %s"", namespace);"
121700,./TargetProjects/iceberg/core/src/main/java/org/apache/iceberg/jdbc/JdbcUtil.java,37,,"      "" SET "" + METADATA_LOCATION + "" = ? , "" + PREVIOUS_METADATA_LOCATION + "" = ? "" +"
121701,./TargetProjects/iceberg/core/src/main/java/org/apache/iceberg/jdbc/JdbcUtil.java,38,,"      "" WHERE "" + CATALOG_NAME + "" = ? AND "" +"
121702,./TargetProjects/iceberg/core/src/main/java/org/apache/iceberg/jdbc/JdbcUtil.java,38,,"      "" WHERE "" + CATALOG_NAME + "" = ? AND "" +"
121703,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/LocalTableOperations.java,43,,"    throw new UnsupportedOperationException(""Not implemented for tests"");"
121704,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TableTestBase.java,60,,"      .withPartitionPath(""data_bucket=0"") // easy way to set partition data for now"
121705,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TableTestBase.java,179,,"    return TestTables.create(tableDir, ""test"", schema, spec, formatVersion);"
121706,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TableTestBase.java,330,,"      Assert.assertEquals(""Path should match expected"", newPaths.next(), file.path().toString());"
121707,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TableTestBase.java,334,,"    Assert.assertFalse(""Should find all files in the manifest"", newPaths.hasNext());"
121708,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestCatalogUtil.java,44,,"    options.put(""key"", ""val"");"
121709,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestCatalogUtil.java,44,,"    options.put(""key"", ""val"");"
121710,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestCatalogUtil.java,46,,"    String name = ""custom"";"
121711,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestCreateTransaction.java,53,,"    Transaction txn = TestTables.beginCreate(tableDir, ""test_create"", SCHEMA, unpartitioned());"
121712,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestCreateTransaction.java,55,,"    Assert.assertNull(""Starting a create transaction should not commit metadata"","
121713,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestCreateTransaction.java,57,,"    Assert.assertNull(""Should have no metadata version"","
121714,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestCreateTransaction.java,63,,"    Assert.assertNotNull(""Table metadata should be created after transaction commits"", meta);"
121715,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestCreateTransaction.java,64,,"    Assert.assertEquals(""Should have metadata version 0"","
121716,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestCreateTransaction.java,66,,"    Assert.assertEquals(""Should have 0 manifest files"","
121717,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestCreateTransaction.java,69,,"    Assert.assertEquals(""Table schema should match with reassigned IDs"","
121718,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestCreateTransaction.java,71,,"    Assert.assertEquals(""Table spec should match"", unpartitioned(), meta.spec());"
121719,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestCreateTransaction.java,72,,"    Assert.assertEquals(""Table should not have any snapshots"", 0, meta.snapshots().size());"
121720,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestCreateTransaction.java,123,,"    Transaction txn = TestTables.beginCreate(tableDir, ""test_append"", SCHEMA, unpartitioned());"
121721,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestCreateTransaction.java,204,,"    Transaction txn = TestTables.beginCreate(tableDir, ""test_properties"", SCHEMA, unpartitioned());"
121722,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestCreateTransaction.java,212,,"        .set(""test-property"", ""test-value"")"
121723,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestCreateTransaction.java,212,,"        .set(""test-property"", ""test-value"")"
121724,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestCreateTransaction.java,285,,"    Transaction txn = TestTables.beginCreate(tableDir, ""uncommitted_change"", SCHEMA, unpartitioned());"
121725,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestCreateTransaction.java,324,,"    Transaction txn = TestTables.beginCreate(tableDir, ""test_conflict"", SCHEMA, SPEC);"
121726,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestDeleteFileIndex.java,175,,"    Assert.assertEquals(""Should have one task"", 1, tasks.size());"
121727,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestDeleteFileIndex.java,178,,"    Assert.assertEquals(""Should have the correct data file path"","
121728,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestDeleteFileIndex.java,180,,"    Assert.assertEquals(""Should have one associated delete file"","
121729,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestDeleteFileIndex.java,220,,"    Assert.assertEquals(""Should have only pos delete file"","
121730,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestFastAppend.java,49,,"    Assert.assertEquals(""Table should start empty"", 0, listManifestFiles().size());"
121731,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestFastAppend.java,52,,"    Assert.assertNull(""Should not have a current snapshot"", base.currentSnapshot());"
121732,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestFastAppend.java,139,,"    Assert.assertNotNull(""Should have a current snapshot"", base.currentSnapshot());"
121733,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestFastAppend.java,248,,"    Assert.assertTrue(""Should create new manifest"", new File(newManifest.path()).exists());"
121734,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestFastAppend.java,276,,"    table.updateProperties().set(TableProperties.MANIFEST_LISTS_ENABLED, ""true"").commit();"
121735,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestFastAppend.java,299,,"    table.updateProperties().set(TableProperties.MANIFEST_LISTS_ENABLED, ""false"").commit();"
121736,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestFilterFiles.java,76,,"    Table table = TestTables.create(tableDir, ""test"", schema, spec, formatVersion);"
121737,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestLocationProvider.java,106,,"    this.table.locationProvider().newDataLocation(""my_file"");"
121738,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestLocationProvider.java,130,,"    String invalidImpl = String.format(""%s$%s"","
121739,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestManifestListVersions.java,90,,"    Assert.assertEquals(""Path"", PATH, manifest.path());"
121740,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestManifestListVersions.java,91,,"    Assert.assertEquals(""Length"", LENGTH, manifest.length());"
121741,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestManifestListVersions.java,92,,"    Assert.assertEquals(""Spec id"", SPEC_ID, manifest.partitionSpecId());"
121742,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestManifestListVersions.java,94,,"    Assert.assertEquals(""Snapshot id"", SNAPSHOT_ID, (long) manifest.snapshotId());"
121743,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestManifestListVersions.java,95,,"    Assert.assertEquals(""Added files count"", ADDED_FILES, (int) manifest.addedFilesCount());"
121744,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestManifestListVersions.java,96,,"    Assert.assertEquals(""Existing files count"", EXISTING_FILES, (int) manifest.existingFilesCount());"
121745,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestManifestListVersions.java,97,,"    Assert.assertEquals(""Deleted files count"", DELETED_FILES, (int) manifest.deletedFilesCount());"
121746,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestManifestListVersions.java,98,,"    Assert.assertEquals(""Added rows count"", ADDED_ROWS, (long) manifest.addedRowsCount());"
121747,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestManifestListVersions.java,99,,"    Assert.assertEquals(""Existing rows count"", EXISTING_ROWS, (long) manifest.existingRowsCount());"
121748,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestManifestListVersions.java,100,,"    Assert.assertEquals(""Deleted rows count"", DELETED_ROWS, (long) manifest.deletedRowsCount());"
121749,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestManifestListVersions.java,129,,"    Assert.assertEquals(""Path"", PATH, generic.get(""manifest_path"").toString());"
121750,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestManifestListVersions.java,130,,"    Assert.assertEquals(""Length"", LENGTH, generic.get(""manifest_length""));"
121751,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestManifestListVersions.java,131,,"    Assert.assertEquals(""Spec id"", SPEC_ID, generic.get(""partition_spec_id""));"
121752,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestManifestListVersions.java,132,,"    Assert.assertEquals(""Snapshot id"", SNAPSHOT_ID, (long) generic.get(""added_snapshot_id""));"
121753,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestManifestListVersions.java,133,,"    Assert.assertEquals(""Added files count"", ADDED_FILES, (int) generic.get(""added_data_files_count""));"
121754,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestManifestListVersions.java,134,,"    Assert.assertEquals(""Existing files count"", EXISTING_FILES, (int) generic.get(""existing_data_files_count""));"
121755,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestManifestListVersions.java,135,,"    Assert.assertEquals(""Deleted files count"", DELETED_FILES, (int) generic.get(""deleted_data_files_count""));"
121756,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestManifestReaderStats.java,101,,"        .select(ImmutableList.of(""file_path""))"
121757,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestManifestWriterVersions.java,112,,"    Assert.assertEquals(""Content"", ManifestContent.DATA, manifest.content());"
121758,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestManifestWriterVersions.java,180,,"    Assert.assertEquals(""Snapshot ID"", (Long) SNAPSHOT_ID, entry.snapshotId());"
121759,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestManifestWriterVersions.java,181,,"    Assert.assertEquals(""Sequence number"", expectedSequenceNumber, entry.sequenceNumber());"
121760,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestMergeAppend.java,52,,"    Assert.assertEquals(""Table should start empty"", 0, listManifestFiles().size());"
121761,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestMergeAppend.java,55,,"    Assert.assertNull(""Should not have a current snapshot"", base.currentSnapshot());"
121762,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestMergeAppend.java,56,,"    Assert.assertEquals(""Last sequence number should be 0"", 0, base.lastSequenceNumber());"
121763,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestMergeAppend.java,64,,"    Assert.assertNotNull(""Should create a snapshot"", table.currentSnapshot());"
121764,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestMergeAppend.java,66,,"    V2Assert.assertEquals(""Last sequence number should be 1"", 1, table.ops().current().lastSequenceNumber());"
121765,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestMergeAppend.java,68,,"    Assert.assertEquals(""Should create 1 manifest for initial write"","
121766,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestMergeAppend.java,108,,"        ""2"", committedSnapshot.summary().get(""added-data-files""));"
121767,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestMergeAppend.java,151,,"    table.updateProperties().set(""commit.manifest.min-count-to-merge"", ""1"").commit();"
121768,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestMergeAppend.java,218,,"    V2Assert.assertEquals(""Last sequence number should be 2"", 2, table.ops().current().lastSequenceNumber());"
121769,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestMergeAppend.java,264,,"    V2Assert.assertEquals(""Snapshot sequence number should be 1"", 1, snap1.sequenceNumber());"
121770,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestMergeAppend.java,266,,"    V1Assert.assertEquals(""Table should end with last-sequence-number 0"", 0, base.lastSequenceNumber());"
121771,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestMergeAppend.java,289,,"    V2Assert.assertEquals(""Snapshot sequence number should be 2"", 2, snap2.sequenceNumber());"
121772,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestMergeAppend.java,673,,"        .bucket(""data"", 16)"
121773,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestMergeAppend.java,915,,"        .set(TableProperties.SNAPSHOT_ID_INHERITANCE_ENABLED, ""true"")"
121774,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestMergeAppend.java,1090,,"    Assert.assertEquals(""data_bucket"", fields.get(0).name());"
121775,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestMergeAppend.java,1194,,"        .getOrDefault(SnapshotSummary.PARTITION_SUMMARY_PROP, ""false"");"
121776,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestMetadataTableScans.java,80,,"        .filter(Expressions.equal(""record_count"", 1));"
121777,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestMetadataTableScans.java,99,,"        .filter(Expressions.equal(""snapshot_id"", 1L));"
121778,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestMetadataTableScans.java,185,,"    TableScan scanNoFilter = partitionsTable.newScan().select(""partition.data_bucket"");"
121779,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestMetrics.java,75,,"      required(3, ""longCol"", LongType.get()),"
121780,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestMetrics.java,77,,"      required(7, ""doubleCol"", DoubleType.get())"
121781,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestMetrics.java,81,,"      required(1, ""intCol"", IntegerType.get()),"
121782,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestMetrics.java,86,,"      optional(1, ""booleanCol"", BooleanType.get()),"
121783,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestMetrics.java,89,,"      required(4, ""floatCol"", FloatType.get()),"
121784,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestMetrics.java,91,,"      optional(6, ""decimalCol"", DecimalType.of(10, 2)),"
121785,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestMetrics.java,92,,"      required(7, ""stringCol"", StringType.get()),"
121786,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestMetrics.java,93,,"      optional(8, ""dateCol"", DateType.get()),"
121787,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestMetrics.java,94,,"      required(9, ""timeCol"", TimeType.get()),"
121788,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestMetrics.java,95,,"      required(10, ""timestampColAboveEpoch"", TimestampType.withoutZone()),"
121789,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestMetrics.java,96,,"      required(11, ""fixedCol"", FixedType.ofLength(4)),"
121790,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestMetrics.java,97,,"      required(12, ""binaryCol"", BinaryType.get()),"
121791,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestMetrics.java,98,,"      required(13, ""timestampColBelowEpoch"", TimestampType.withoutZone())"
121792,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestMetrics.java,144,,"    record.setField(""decimalCol"", new BigDecimal(""3.50""));"
121793,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestMetrics.java,145,,"    record.setField(""stringCol"", ""AAA"");"
121794,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestMetrics.java,495,,"        MetricsConfig.fromProperties(ImmutableMap.of(""write.metadata.metrics.default"", ""none"")),"
121795,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestMetricsModes.java,61,,"        TableProperties.METRICS_MODE_COLUMN_CONF_PREFIX + ""col"", ""troncate(5)"");"
121796,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestMetricsTruncation.java,68,,"    Assert.assertTrue(""Truncated lower bound should be lower than or equal to the actual lower bound"","
121797,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestMetricsTruncation.java,72,,"    Assert.assertTrue(""No truncation required as truncate length is greater than the input size"","
121798,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestMetricsTruncation.java,90,,"    Assert.assertTrue(""Truncated upper bound should be greater than or equal to the actual upper bound"","
121799,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestOverwrite.java,47,,"      required(3, ""date"", Types.StringType.get()));"
121800,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestOverwrite.java,129,,"        .overwriteByRowFilter(equal(""date"", ""2018-06-08""))"
121801,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestOverwrite.java,152,,"    AssertHelpers.assertThrows(""Should reject commit with file not matching delete expression"","
121802,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestOverwrite.java,156,,"    Assert.assertEquals(""Should not create a new snapshot"","
121803,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestOverwriteWithValidation.java,146,,"    Assert.assertNull(""Should be empty table"", table.currentSnapshot());"
121804,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestOverwriteWithValidation.java,275,,"    AssertHelpers.assertThrows(""Should reject commit"","
121805,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestOverwriteWithValidation.java,279,,"    Assert.assertEquals(""Should not create a new snapshot"","
121806,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestPartitionSpecInfo.java,44,,"      required(2, ""data"", Types.StringType.get()));"
121807,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestPartitionSpecInfo.java,71,,"    TestTables.TestTable table = TestTables.create(tableDir, ""test"", schema, spec, formatVersion);"
121808,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestPartitionSpecParser.java,32,,"    String expected = ""{\n"" +"
121809,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestPartitionSpecParser.java,34,,"        ""  \""fields\"" : [ {\n"" +"
121810,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestPartitionSpecParser.java,35,,"        ""    \""name\"" : \""data_bucket\"",\n"" +"
121811,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestPartitionSpecParser.java,36,,"        ""    \""transform\"" : \""bucket[16]\"",\n"" +"
121812,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestPartitionSpecParser.java,39,,"        ""  } ]\n"" +"
121813,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestRemoveSnapshots.java,85,,"    Assert.assertEquals(""Expire should not change current snapshot"", snapshotId, table.currentSnapshot().snapshotId());"
121814,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestRemoveSnapshots.java,98,,"    Assert.assertEquals(""Should create one manifest"","
121815,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestRemoveSnapshots.java,678,,"    Assert.assertTrue(""FILE_A should be deleted"", deletedFiles.contains(FILE_A.path().toString()));"
121816,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestReplacePartitions.java,129,,"        tableDir, ""unpartitioned"", SCHEMA, PartitionSpec.unpartitioned(), formatVersion);"
121817,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestReplaceTransaction.java,64,,"    Assert.assertEquals(""Version should be 1"", 1L, (long) version());"
121818,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestReplaceTransaction.java,73,,"    Transaction replace = TestTables.beginReplace(tableDir, ""test"", schema, unpartitioned(), newSortOrder, props);"
121819,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestReplaceTransaction.java,78,,"    Assert.assertEquals(""Version should be 2"", 2L, (long) version());"
121820,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestReplaceTransaction.java,79,,"    Assert.assertNull(""Table should not have a current snapshot"", table.currentSnapshot());"
121821,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestReplaceTransaction.java,149,,"    Assert.assertEquals(""Schema should use new schema, not compatible with previous"","
121822,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestReplaceTransaction.java,217,,"    Assert.assertEquals(""Version should be 0"", 0L, (long) version());"
121823,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestReplaceTransaction.java,330,,"    Transaction replace = TestTables.beginReplace(tableDir, ""test_append"", SCHEMA, unpartitioned());"
121824,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestRewriteFiles.java,53,,"    Assert.assertEquals(""Table should start empty"", 0, listManifestFiles().size());"
121825,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestRewriteFiles.java,58,,"    AssertHelpers.assertThrows(""Expected an exception"","
121826,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestRewriteFiles.java,141,,"    Assert.assertEquals(""Should create 1 manifest for initial write"","
121827,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestRewriteFiles.java,167,,"    Assert.assertEquals(""Only 3 manifests should exist"", 3, listManifestFiles().size());"
121828,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestRewriteFiles.java,212,,"    Assume.assumeTrue(""Rewriting delete files is only supported in iceberg format v2. "", formatVersion > 1);"
121829,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestRewriteFiles.java,294,,"    Assert.assertFalse(""Should clean up new manifest"", new File(manifest1.path()).exists());"
121830,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestRewriteFiles.java,429,,"    Assert.assertTrue(""Should reuse new manifest"", new File(manifest1.path()).exists());"
121831,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestRewriteManifests.java,58,,"    table.updateProperties().set(SNAPSHOT_ID_INHERITANCE_ENABLED, ""true"").commit();"
121832,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestRewriteManifests.java,61,,"        ""manifest-file-1.avro"","
121833,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestRewriteManifests.java,181,,"        .clusterBy(file -> ""file"")"
121834,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestRewriteManifests.java,431,,"    Assert.assertNull(""Table should be empty"", table.currentSnapshot());"
121835,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestRewriteManifests.java,453,,"        ""manifest-file-2.avro"","
121836,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestRewriteManifests.java,864,,"    AssertHelpers.assertThrows(""Should reject commit"","
121837,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestRowDelta.java,40,,"    Assert.assertEquals(""Commit should produce sequence number 1"", 1, snap.sequenceNumber());"
121838,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestRowDelta.java,41,,"    Assert.assertEquals(""Last sequence number should be 1"", 1, table.ops().current().lastSequenceNumber());"
121839,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestRowDelta.java,44,,"    Assert.assertEquals(""Should produce 1 data manifest"", 1, snap.dataManifests().size());"
121840,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestRowDelta.java,52,,"    Assert.assertEquals(""Should produce 1 delete manifest"", 1, snap.deleteManifests().size());"
121841,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestRowDelta.java,84,,"    AssertHelpers.assertThrows(""Should fail to add FILE_A_DELETES because FILE_A is missing"","
121842,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestRowDelta.java,85,,"        ValidationException.class, ""Cannot commit, missing data files"","
121843,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestRowDelta.java,92,,"    Assert.assertEquals(""Table state should not be modified by failed RowDelta operation"","
121844,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestRowDelta.java,95,,"    Assert.assertEquals(""Table should not have any delete manifests"","
121845,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestRowDelta.java,205,,"    Assert.assertEquals(""Commit should produce sequence number 2"", 3, snap.sequenceNumber());"
121846,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestRowDelta.java,206,,"    Assert.assertEquals(""Last sequence number should be 3"", 3, table.ops().current().lastSequenceNumber());"
121847,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestRowDelta.java,403,,"    Assert.assertEquals(""Last sequence number should be 2"", 2, table.ops().current().lastSequenceNumber());"
121848,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestScanSummary.java,101,,"        timestampRange(ImmutableList.of(lessThanOrEqual(""ts_ms"", upper))));"
121849,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestScansAndSchemaEvolution.java,48,,"      required(3, ""part"", Types.StringType.get()));"
121850,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaAndMappingUpdate.java,60,,"        .addColumn(""count"", Types.LongType.get())"
121851,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaAndMappingUpdate.java,70,,"    Assert.assertEquals(""Mapping should use the assigned field ID"","
121852,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaAndMappingUpdate.java,72,,"    Assert.assertNull(""Should not contain a nested mapping"", updated.find(""count"").nestedMapping());"
121853,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaAndMappingUpdate.java,85,,"        .addColumn(""location"", Types.StructType.of("
121854,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaAndMappingUpdate.java,121,,"        .renameColumn(""id"", ""object_id"")"
121855,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaAndMappingUpdate.java,133,,"    Assert.assertNotNull(""Mapping for id column should exist"", updatedMapping);"
121856,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaAndMappingUpdate.java,180,,"    table.updateSchema().renameColumn(""id"", ""bloop"").commit();"
121857,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaAndMappingUpdate.java,230,,"    Assert.assertEquals(""Mapping should use the new field ID"", (Integer) idColumnId, newMapping.id());"
121858,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaAndMappingUpdate.java,234,,"    Assert.assertNotNull(""Mapping for original id column should exist"", updatedMapping);"
121859,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaAndMappingUpdate.java,235,,"    Assert.assertEquals(""Mapping should use the original field ID"", (Integer) startIdColumnId, updatedMapping.id());"
121860,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaAndMappingUpdate.java,236,,"    Assert.assertFalse(""Should not use id as a name"", updatedMapping.names().contains(""id""));"
121861,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaAndMappingUpdate.java,257,,"        .renameColumn(""data"", ""id"")"
121862,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaAndMappingUpdate.java,304,,"        .renameColumn(""object_id"", ""oid"")"
121863,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaID.java,58,,"    Assert.assertEquals(""Current snapshot's schemaId should be the current"","
121864,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaID.java,61,,"    Assert.assertEquals(""Schema ids should be correct in snapshots"","
121865,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUnionByFieldName.java,91,,"      Schema newSchema = new Schema(optional(1, ""aList"", Types.ListType.ofOptional(2, primitiveType)));"
121866,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUnionByFieldName.java,100,,"      Schema newSchema = new Schema(optional(1, ""aMap"", Types.MapType.ofOptional(2, 3, primitiveType, primitiveType)));"
121867,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUnionByFieldName.java,109,,"      Schema currentSchema = new Schema(optional(1, ""aStruct"", Types.StructType.of("
121868,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUnionByFieldName.java,155,,"    Schema newSchema = new Schema(optional(1, ""struct1"", Types.StructType.of("
121869,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUnionByFieldName.java,156,,"            optional(2, ""struct2"", Types.StructType.of("
121870,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUnionByFieldName.java,219,,"    Schema currentSchema = new Schema(required(1, ""aCol"", IntegerType.get()));"
121871,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUnionByFieldName.java,305,,"    Schema aSchema = new Schema(optional(9, ""struct1"", Types.StructType.of(optional(8, ""string1"", StringType.get()))),"
121872,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUnionByFieldName.java,306,,"            optional(6, ""list1"", Types.ListType.ofOptional(7, StringType.get())),"
121873,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUpdate.java,40,,"      optional(2, ""data"", Types.StringType.get()),"
121874,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUpdate.java,41,,"      optional(3, ""preferences"", Types.StructType.of("
121875,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUpdate.java,42,,"          required(8, ""feature1"", Types.BooleanType.get()),"
121876,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUpdate.java,43,,"          optional(9, ""feature2"", Types.BooleanType.get())"
121877,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUpdate.java,44,,"      ), ""struct of named boolean options""),"
121878,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUpdate.java,45,,"      required(4, ""locations"", Types.MapType.ofRequired(10, 11,"
121879,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUpdate.java,47,,"              required(20, ""address"", Types.StringType.get()),"
121880,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUpdate.java,48,,"              required(21, ""city"", Types.StringType.get()),"
121881,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUpdate.java,49,,"              required(22, ""state"", Types.StringType.get()),"
121882,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUpdate.java,50,,"              required(23, ""zip"", Types.IntegerType.get())"
121883,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUpdate.java,53,,"              required(12, ""lat"", Types.FloatType.get()),"
121884,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUpdate.java,54,,"              required(13, ""long"", Types.FloatType.get())"
121885,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUpdate.java,55,,"          )), ""map of address to coordinate""),"
121886,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUpdate.java,56,,"      optional(5, ""points"", Types.ListType.ofOptional(14,"
121887,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUpdate.java,60,,"          )), ""2-D cartesian points""),"
121888,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUpdate.java,61,,"      required(6, ""doubles"", Types.ListType.ofRequired(17,"
121889,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUpdate.java,64,,"      optional(7, ""properties"", Types.MapType.ofOptional(18, 19,"
121890,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUpdate.java,67,,"      ), ""string map of properties"")"
121891,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUpdate.java,83,,"    List<String> columns = Lists.newArrayList(""id"", ""data"", ""preferences"", ""preferences.feature1"","
121892,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUpdate.java,84,,"        ""preferences.feature2"", ""locations"", ""locations.lat"", ""locations.long"", ""points"","
121893,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUpdate.java,85,,"        ""points.x"", ""points.y"", ""doubles"", ""properties"");"
121894,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUpdate.java,163,,"        Schema fromSchema = new Schema(required(1, ""col"", fromType));"
121895,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUpdate.java,185,,"        optional(2, ""json"", Types.StringType.get()),"
121896,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUpdate.java,186,,"        optional(3, ""options"", Types.StructType.of("
121897,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUpdate.java,188,,"            optional(9, ""newfeature"", Types.BooleanType.get())"
121898,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUpdate.java,198,,"                required(12, ""latitude"", Types.FloatType.get()),"
121899,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUpdate.java,204,,"                required(16, ""y.y"", Types.LongType.get())"
121900,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUpdate.java,246,,"                optional(25, ""alt"", Types.FloatType.get())"
121901,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUpdate.java,253,,"                optional(27, ""t.t"", Types.LongType.get())"
121902,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUpdate.java,262,,"        optional(24, ""toplevel"", Types.DecimalType.of(9, 2))"
121903,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUpdate.java,272,,"    Assert.assertEquals(""Should match with added fields"", expected.asStruct(), added.asStruct());"
121904,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUpdate.java,562,,"        IllegalArgumentException.class, ""missing column: col"", () -> {"
121905,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUpdate.java,756,,"    Assert.assertEquals(""Should move data first"", expected.asStruct(), actual.asStruct());"
121906,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUpdate.java,831,,"        required(2, ""struct"", Types.StructType.of("
121907,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUpdate.java,832,,"            required(3, ""count"", Types.LongType.get()),"
121908,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUpdate.java,841,,"        .moveFirst(""struct.data"")"
121909,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUpdate.java,861,,"        .moveBefore(""struct.data"", ""struct.count"")"
121910,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUpdate.java,903,,"        .moveAfter(""struct.ts"", ""struct.count"")"
121911,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUpdate.java,935,,"        required(2, ""list"", Types.ListType.ofOptional(6, Types.StructType.of("
121912,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUpdate.java,957,,"        required(2, ""map"", Types.MapType.ofOptional(6, 7, Types.StringType.get(), Types.StructType.of("
121913,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUpdate.java,1067,,"    AssertHelpers.assertThrows(""Should fail move for a field that is not in the schema"","
121914,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUpdate.java,1087,,"        IllegalArgumentException.class, ""Cannot move missing column"", () ->"
121915,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUpdate.java,1089,,"                .moveFirst(""items"")"
121916,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUpdate.java,1242,,"        .addRequiredColumn(""new_field"", Types.StringType.get())"
121917,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUpdate.java,1314,,"        .addRequiredColumn(""new_field2"", Types.StringType.get())"
121918,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSchemaUpdate.java,1360,,"        ""must not be nested in "" + SCHEMA.findField(""locations""),"
121919,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSequenceNumberForV2Table.java,43,,"    V2Assert.assertEquals(""Snapshot sequence number should be 1"", 1, snap1.sequenceNumber());"
121920,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSequenceNumberForV2Table.java,44,,"    V2Assert.assertEquals(""Last sequence number should be 1"", 1, readMetadata().lastSequenceNumber());"
121921,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSequenceNumberForV2Table.java,52,,"    V2Assert.assertEquals(""Snapshot sequence number should be 2"", 2, snap2.sequenceNumber());"
121922,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSequenceNumberForV2Table.java,53,,"    V2Assert.assertEquals(""Last sequence number should be 2"", 2, readMetadata().lastSequenceNumber());"
121923,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSequenceNumberForV2Table.java,61,,"    V2Assert.assertEquals(""Snapshot sequence number should be 3"", 3, snap3.sequenceNumber());"
121924,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSequenceNumberForV2Table.java,62,,"    V2Assert.assertEquals(""Last sequence number should be 3"", 3, readMetadata().lastSequenceNumber());"
121925,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSnapshotJson.java,43,,"        ""file:/tmp/manifest1.avro"", ""file:/tmp/manifest2.avro"");"
121926,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSnapshotJson.java,43,,"        ""file:/tmp/manifest1.avro"", ""file:/tmp/manifest2.avro"");"
121927,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSnapshotJson.java,47,,"    Assert.assertEquals(""Snapshot ID should match"","
121928,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSnapshotJson.java,49,,"    Assert.assertEquals(""Files should match"","
121929,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSnapshotManager.java,70,,"    Assert.assertEquals(""Should find the staged overwrite snapshot"", DataOperations.OVERWRITE, staged.operation());"
121930,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSnapshotManager.java,135,,"    AssertHelpers.assertThrows(""Should reject partition replacement when a partition has been modified"","
121931,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSnapshotManager.java,141,,"    Assert.assertEquals(""Failed cherry-pick should not change the table state"","
121932,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSortOrder.java,48,,"      required(11, ""data"", Types.StringType.get()),"
121933,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSortOrder.java,102,,"    TestTables.TestTable table = TestTables.create(tableDir, ""test"", SCHEMA, spec, formatVersion);"
121934,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestSortOrder.java,118,,"        .asc(""s.id"", NULLS_LAST)"
121935,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestTableMetadata.java,69,,"      Types.NestedField.required(2, ""y"", Types.LongType.get(), ""comment""),"
121936,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestTableMetadata.java,93,,"        new GenericManifestFile(localInput(""file:/tmp/manfiest.1.avro""), SPEC_5.specId())));"
121937,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestTableMetadata.java,97,,"        new GenericManifestFile(localInput(""file:/tmp/manfiest.2.avro""), SPEC_5.specId())));"
121938,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestTableMetadata.java,111,,"        3, ImmutableList.of(SORT_ORDER_3), ImmutableMap.of(""property"", ""value""), currentSnapshotId,"
121939,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestTableMetadata.java,111,,"        3, ImmutableList.of(SORT_ORDER_3), ImmutableMap.of(""property"", ""value""), currentSnapshotId,"
121940,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestTableMetadata.java,301,,"        ""/tmp/000001-"" + UUID.randomUUID().toString() + "".metadata.json""));"
121941,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestTableMetadata.java,301,,"        ""/tmp/000001-"" + UUID.randomUUID().toString() + "".metadata.json""));"
121942,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestTableMetadata.java,314,,"    Assert.assertEquals(""Metadata logs should match"", previousMetadataLog, metadataFromJson.previousFiles());"
121943,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestTableMetadata.java,693,,"    Assert.assertEquals(""Should have expected schema upon return"","
121944,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestTableMetadata.java,695,,"    Assert.assertEquals(""Should return expected last column id"", 1, freshTable.lastColumnId());"
121945,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestTableUpdatePartitionSpec.java,48,,"    PartitionSpec initialSpec = PartitionSpec.builderFor(table.schema()).bucket(""data"", 16).build();"
121946,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestTableUpdatePartitionSpec.java,63,,"        .bucket(""id"", 8, ""id_bucket_8"")"
121947,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestTableUpdatePartitionSpec.java,70,,"        .removeField(""data_bucket"")"
121948,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestTableUpdatePartitionSpec.java,116,,"        .renameField(""data_bucket"", ""data_partition"")"
121949,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestTableUpdatePartitionSpec.java,206,,"    V1Assert.assertEquals(""Should add a new id bucket"", PartitionSpec.builderFor(table.schema())"
121950,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestTransaction.java,50,,"    Assert.assertEquals(""Table should be on version 0"", 0, (int) version());"
121951,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestTransaction.java,57,,"    Assert.assertSame(""Base metadata should not change when commit is created"","
121952,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestTransaction.java,72,,"    Assert.assertEquals(""Table should be on version 0 after txn create"", 0, (int) version());"
121953,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestTransaction.java,246,,"    Assert.assertEquals(""Table should be on version 1"", 1, (int) version());"
121954,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestTransaction.java,254,,"    Assert.assertEquals(""Table should be on version 1 after txn create"", 1, (int) version());"
121955,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestTransaction.java,263,,"    Assert.assertEquals(""Table should be on version 1 after append"", 1, (int) version());"
121956,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestTransaction.java,388,,"    Assert.assertEquals(""Append should create one manifest"","
121957,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestTransaction.java,419,,"    Assert.assertFalse(""Append manifest should be deleted"", new File(appendManifest.path()).exists());"
121958,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestUpdatePartitionSpec.java,43,,"      Types.NestedField.required(3, ""category"", Types.StringType.get()),"
121959,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestUpdatePartitionSpec.java,44,,"      Types.NestedField.optional(4, ""data"", Types.StringType.get())"
121960,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestUpdatePartitionSpec.java,51,,"      .bucket(""id"", 16, ""shard"")"
121961,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestUpdatePartitionSpec.java,73,,"    Assert.assertEquals(""Should match expected spec"", expected, updated);"
121962,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestUpdatePartitionSpec.java,204,,"        .addField(""prefix"", truncate(""data"", 4))"
121963,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestUpdatePartitionSpec.java,231,,"            new PartitionField(2, 1000, ""ts_day"", Transforms.day(Types.TimestampType.withZone())),"
121964,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestUpdatePartitionSpec.java,367,,"        .renameField(""shard"", ""id_bucket"") // rename back to default"
121965,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestUpdatePartitionSpec.java,439,,"    AssertHelpers.assertThrows(""Should fail adding a duplicate field"","
121966,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestUpdatePartitionSpec.java,449,,"        IllegalArgumentException.class, ""Cannot add duplicate partition field"","
121967,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestUpdatePartitionSpec.java,575,,"            .addField(""ts_date"", day(""ts""))"
121968,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestWapWorkflow.java,121,,"        .set(""wap.id"", ""123456789"")"
121969,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestWapWorkflow.java,121,,"        .set(""wap.id"", ""123456789"")"
121970,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestWapWorkflow.java,128,,"    Assert.assertEquals(""Metadata should have both snapshots"", 2, base.snapshots().size());"
121971,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestWapWorkflow.java,131,,"    Assert.assertEquals(""Current snapshot should be first commit's snapshot"","
121972,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestWapWorkflow.java,133,,"    Assert.assertEquals(""Snapshot log should indicate number of snapshots committed"", 1,"
121973,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestWapWorkflow.java,143,,"    Assert.assertEquals(""Should contain manifests for both files"", 2, base.currentSnapshot().allManifests().size());"
121974,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestWapWorkflow.java,144,,"    Assert.assertEquals(""Should contain append from last commit"", 1,"
121975,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestWapWorkflow.java,321,,"    Assert.assertEquals(""Should have first wap id in summary"", ""123456789"","
121976,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestWapWorkflow.java,365,,"        .set(""wap.id"", ""987654321"")"
121977,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/TestWapWorkflow.java,397,,"        ""Current snapshot should be set to one after wap snapshot"","
121978,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/avro/AvroDataTest.java,44,,"      optional(101, ""data"", Types.StringType.get()),"
121979,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/avro/TestAvroDeleteWriters.java,53,,"      NestedField.optional(2, ""data"", Types.StringType.get()));"
121980,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/avro/TestAvroEnums.java,48,,"        .name(""enumCol"")"
121981,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/avro/TestAvroFileSplit.java,49,,"      NestedField.required(2, ""data"", Types.StringType.get()));"
121982,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/avro/TestAvroNameMapping.java,53,,"        Types.NestedField.optional(5, ""location"", Types.MapType.ofOptional(6, 7,"
121983,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/avro/TestAvroNameMapping.java,56,,"                Types.NestedField.required(1, ""lat"", Types.FloatType.get()),"
121984,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/avro/TestAvroNameMapping.java,57,,"                Types.NestedField.optional(2, ""long"", Types.FloatType.get())"
121985,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/avro/TestAvroNameMapping.java,61,,"    Record record = new Record(AvroSchemaUtil.convert(writeSchema, ""table""));"
121986,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/avro/TestAvroNameMapping.java,78,,"    Assert.assertNotNull(""Field missing from table mapping is renamed"", projected.getSchema().getField(""location_r5""));"
121987,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/avro/TestAvroNameMapping.java,92,,"    Assert.assertNotNull(""Field missing from table mapping is renamed"", projectedL1.getSchema().getField(""long_r2""));"
121988,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/avro/TestAvroNameMapping.java,185,,"        Types.NestedField.optional(22, ""point"","
121989,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/avro/TestAvroNameMapping.java,233,,"        Types.NestedField.optional(22, ""points"","
121990,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/avro/TestAvroOptionsWithNonNullDefaults.java,50,,"            new Schema.Field(""field"", Schema.createUnion(Schema.createArray(Schema.create(INT)), Schema.create(NULL)),"
121991,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/avro/TestAvroReadProjection.java,63,,"        Types.NestedField.optional(0, ""map"", Types.MapType.ofOptional(2, 3,"
121992,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/avro/TestReadProjection.java,52,,"        Types.NestedField.optional(1, ""data"", Types.StringType.get())"
121993,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/avro/TestReadProjection.java,55,,"    Record record = new Record(AvroSchemaUtil.convert(schema, ""table""));"
121994,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/avro/TestReadProjection.java,57,,"    record.put(""data"", ""test"");"
121995,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/avro/TestReadProjection.java,61,,"    Assert.assertEquals(""Should contain the correct id value"", 34L, (long) projected.get(""id""));"
121996,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/avro/TestReadProjection.java,195,,"        Types.NestedField.optional(3, ""location"", Types.StructType.of("
121997,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/avro/TestReadProjection.java,196,,"            Types.NestedField.required(1, ""lat"", Types.FloatType.get()),"
121998,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/avro/TestReadProjection.java,197,,"            Types.NestedField.required(2, ""long"", Types.FloatType.get())"
121999,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/avro/TestReadProjection.java,213,,"    Record projected = writeAndRead(""id_only"", writeSchema, idOnly, record);"
